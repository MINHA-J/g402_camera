
logitech-g402.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008920  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08008a2c  08008a2c  00018a2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008aac  08008aac  00020110  2**0
                  CONTENTS
  4 .ARM          00000000  08008aac  08008aac  00020110  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008aac  08008aac  00020110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008aac  08008aac  00018aac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008ab0  08008ab0  00018ab0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000110  20000000  08008ab4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000095c  20000110  08008bc4  00020110  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a6c  08008bc4  00020a6c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020110  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001841e  00000000  00000000  00020139  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003545  00000000  00000000  00038557  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001198  00000000  00000000  0003baa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001020  00000000  00000000  0003cc38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014b35  00000000  00000000  0003dc58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000147e1  00000000  00000000  0005278d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00071192  00000000  00000000  00066f6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d8100  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004874  00000000  00000000  000d8154  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000110 	.word	0x20000110
 8000128:	00000000 	.word	0x00000000
 800012c:	08008a14 	.word	0x08008a14

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000114 	.word	0x20000114
 8000148:	08008a14 	.word	0x08008a14

0800014c <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if (htim == &htim4)
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	4a08      	ldr	r2, [pc, #32]	; (8000178 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000158:	4293      	cmp	r3, r2
 800015a:	d108      	bne.n	800016e <HAL_TIM_PeriodElapsedCallback+0x22>
	{
		if(us_tick > 0)
 800015c:	4b07      	ldr	r3, [pc, #28]	; (800017c <HAL_TIM_PeriodElapsedCallback+0x30>)
 800015e:	681b      	ldr	r3, [r3, #0]
 8000160:	2b00      	cmp	r3, #0
 8000162:	d004      	beq.n	800016e <HAL_TIM_PeriodElapsedCallback+0x22>
			us_tick--;
 8000164:	4b05      	ldr	r3, [pc, #20]	; (800017c <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000166:	681b      	ldr	r3, [r3, #0]
 8000168:	3b01      	subs	r3, #1
 800016a:	4a04      	ldr	r2, [pc, #16]	; (800017c <HAL_TIM_PeriodElapsedCallback+0x30>)
 800016c:	6013      	str	r3, [r2, #0]
	}
}
 800016e:	bf00      	nop
 8000170:	370c      	adds	r7, #12
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	200001cc 	.word	0x200001cc
 800017c:	20000274 	.word	0x20000274

08000180 <delay_us>:


void delay_us(uint32_t time)
{
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	us_tick = time/10;
 8000188:	687b      	ldr	r3, [r7, #4]
 800018a:	4a09      	ldr	r2, [pc, #36]	; (80001b0 <delay_us+0x30>)
 800018c:	fba2 2303 	umull	r2, r3, r2, r3
 8000190:	08db      	lsrs	r3, r3, #3
 8000192:	4a08      	ldr	r2, [pc, #32]	; (80001b4 <delay_us+0x34>)
 8000194:	6013      	str	r3, [r2, #0]
	while(us_tick != 0)
 8000196:	e000      	b.n	800019a <delay_us+0x1a>
		__asm__("nop");
 8000198:	bf00      	nop
	while(us_tick != 0)
 800019a:	4b06      	ldr	r3, [pc, #24]	; (80001b4 <delay_us+0x34>)
 800019c:	681b      	ldr	r3, [r3, #0]
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d1fa      	bne.n	8000198 <delay_us+0x18>
}
 80001a2:	bf00      	nop
 80001a4:	bf00      	nop
 80001a6:	370c      	adds	r7, #12
 80001a8:	46bd      	mov	sp, r7
 80001aa:	bc80      	pop	{r7}
 80001ac:	4770      	bx	lr
 80001ae:	bf00      	nop
 80001b0:	cccccccd 	.word	0xcccccccd
 80001b4:	20000274 	.word	0x20000274

080001b8 <spi_write>:

	blink_tick = uwTick;
}

void spi_write(uint8_t addr,uint8_t data)
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	b082      	sub	sp, #8
 80001bc:	af00      	add	r7, sp, #0
 80001be:	4603      	mov	r3, r0
 80001c0:	460a      	mov	r2, r1
 80001c2:	71fb      	strb	r3, [r7, #7]
 80001c4:	4613      	mov	r3, r2
 80001c6:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(SPI_NCS_GPIO_Port, SPI_NCS_Pin, GPIO_PIN_RESET);
 80001c8:	2200      	movs	r2, #0
 80001ca:	2110      	movs	r1, #16
 80001cc:	480f      	ldr	r0, [pc, #60]	; (800020c <spi_write+0x54>)
 80001ce:	f000 fe8b 	bl	8000ee8 <HAL_GPIO_WritePin>
	addr |= 0x80;
 80001d2:	79fb      	ldrb	r3, [r7, #7]
 80001d4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80001d8:	b2db      	uxtb	r3, r3
 80001da:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1, (uint8_t*)&addr , 1, 10);
 80001dc:	1df9      	adds	r1, r7, #7
 80001de:	230a      	movs	r3, #10
 80001e0:	2201      	movs	r2, #1
 80001e2:	480b      	ldr	r0, [pc, #44]	; (8000210 <spi_write+0x58>)
 80001e4:	f003 f868 	bl	80032b8 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)&data , 1, 10);
 80001e8:	1db9      	adds	r1, r7, #6
 80001ea:	230a      	movs	r3, #10
 80001ec:	2201      	movs	r2, #1
 80001ee:	4808      	ldr	r0, [pc, #32]	; (8000210 <spi_write+0x58>)
 80001f0:	f003 f862 	bl	80032b8 <HAL_SPI_Transmit>
	delay_us(180);
 80001f4:	20b4      	movs	r0, #180	; 0xb4
 80001f6:	f7ff ffc3 	bl	8000180 <delay_us>
	HAL_GPIO_WritePin(SPI_NCS_GPIO_Port, SPI_NCS_Pin, GPIO_PIN_SET);
 80001fa:	2201      	movs	r2, #1
 80001fc:	2110      	movs	r1, #16
 80001fe:	4803      	ldr	r0, [pc, #12]	; (800020c <spi_write+0x54>)
 8000200:	f000 fe72 	bl	8000ee8 <HAL_GPIO_WritePin>
}
 8000204:	bf00      	nop
 8000206:	3708      	adds	r7, #8
 8000208:	46bd      	mov	sp, r7
 800020a:	bd80      	pop	{r7, pc}
 800020c:	40010800 	.word	0x40010800
 8000210:	2000021c 	.word	0x2000021c

08000214 <spi_read>:

uint8_t spi_read(uint8_t addr)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b084      	sub	sp, #16
 8000218:	af00      	add	r7, sp, #0
 800021a:	4603      	mov	r3, r0
 800021c:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 800021e:	2300      	movs	r3, #0
 8000220:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin(SPI_NCS_GPIO_Port, SPI_NCS_Pin, GPIO_PIN_RESET);
 8000222:	2200      	movs	r2, #0
 8000224:	2110      	movs	r1, #16
 8000226:	4810      	ldr	r0, [pc, #64]	; (8000268 <spi_read+0x54>)
 8000228:	f000 fe5e 	bl	8000ee8 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, (uint8_t*)&addr , 1, 10);
 800022c:	1df9      	adds	r1, r7, #7
 800022e:	230a      	movs	r3, #10
 8000230:	2201      	movs	r2, #1
 8000232:	480e      	ldr	r0, [pc, #56]	; (800026c <spi_read+0x58>)
 8000234:	f003 f840 	bl	80032b8 <HAL_SPI_Transmit>

	delay_us(160);
 8000238:	20a0      	movs	r0, #160	; 0xa0
 800023a:	f7ff ffa1 	bl	8000180 <delay_us>

	HAL_SPI_Receive(&hspi1, (uint8_t*)&data, 1, 10);
 800023e:	f107 010f 	add.w	r1, r7, #15
 8000242:	230a      	movs	r3, #10
 8000244:	2201      	movs	r2, #1
 8000246:	4809      	ldr	r0, [pc, #36]	; (800026c <spi_read+0x58>)
 8000248:	f003 f972 	bl	8003530 <HAL_SPI_Receive>

	delay_us(20);
 800024c:	2014      	movs	r0, #20
 800024e:	f7ff ff97 	bl	8000180 <delay_us>

	HAL_GPIO_WritePin(SPI_NCS_GPIO_Port, SPI_NCS_Pin, GPIO_PIN_SET);
 8000252:	2201      	movs	r2, #1
 8000254:	2110      	movs	r1, #16
 8000256:	4804      	ldr	r0, [pc, #16]	; (8000268 <spi_read+0x54>)
 8000258:	f000 fe46 	bl	8000ee8 <HAL_GPIO_WritePin>

	return data;
 800025c:	7bfb      	ldrb	r3, [r7, #15]
}
 800025e:	4618      	mov	r0, r3
 8000260:	3710      	adds	r7, #16
 8000262:	46bd      	mov	sp, r7
 8000264:	bd80      	pop	{r7, pc}
 8000266:	bf00      	nop
 8000268:	40010800 	.word	0x40010800
 800026c:	2000021c 	.word	0x2000021c

08000270 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000276:	f000 fb29 	bl	80008cc <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800027a:	f000 f89b 	bl	80003b4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configusb_tx_bufferured peripherals */
	MX_GPIO_Init();
 800027e:	f000 f99d 	bl	80005bc <MX_GPIO_Init>
	MX_SPI1_Init();
 8000282:	f000 f8f3 	bl	800046c <MX_SPI1_Init>
	MX_TIM4_Init();
 8000286:	f000 f927 	bl	80004d8 <MX_TIM4_Init>
	MX_USB_DEVICE_Init();
 800028a:	f007 ffa7 	bl	80081dc <MX_USB_DEVICE_Init>
	/* USER CODE BEGIN 2 */

	//there appears to be a mosfet that pull DP or DN high (depending on USB FS or LS)
	//to actually connect the USB bus to output we need to pull down this pin to enable the switch
	HAL_GPIO_WritePin(USB_EN_GPIO_Port, USB_EN_Pin,GPIO_PIN_RESET);
 800028e:	2200      	movs	r2, #0
 8000290:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000294:	4841      	ldr	r0, [pc, #260]	; (800039c <main+0x12c>)
 8000296:	f000 fe27 	bl	8000ee8 <HAL_GPIO_WritePin>

	HAL_TIM_Base_Start_IT(&htim4);
 800029a:	4841      	ldr	r0, [pc, #260]	; (80003a0 <main+0x130>)
 800029c:	f003 fd44 	bl	8003d28 <HAL_TIM_Base_Start_IT>
	/*
	 * The below code resets the sensor
	 * and initializes common registers
	 */

	HAL_Delay(3);
 80002a0:	2003      	movs	r0, #3
 80002a2:	f000 fb75 	bl	8000990 <HAL_Delay>

	//shutdown the sensor
	spi_write(0x3b, 0xb6);
 80002a6:	21b6      	movs	r1, #182	; 0xb6
 80002a8:	203b      	movs	r0, #59	; 0x3b
 80002aa:	f7ff ff85 	bl	80001b8 <spi_write>

	HAL_Delay(300);
 80002ae:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80002b2:	f000 fb6d 	bl	8000990 <HAL_Delay>

	delay_us(40);
 80002b6:	2028      	movs	r0, #40	; 0x28
 80002b8:	f7ff ff62 	bl	8000180 <delay_us>

	delay_us(40);
 80002bc:	2028      	movs	r0, #40	; 0x28
 80002be:	f7ff ff5f 	bl	8000180 <delay_us>
	//power up reset
	spi_write(0x3a, 0x5a);
 80002c2:	215a      	movs	r1, #90	; 0x5a
 80002c4:	203a      	movs	r0, #58	; 0x3a
 80002c6:	f7ff ff77 	bl	80001b8 <spi_write>

	delay_us(50);
 80002ca:	2032      	movs	r0, #50	; 0x32
 80002cc:	f7ff ff58 	bl	8000180 <delay_us>
	//set res
	spi_write(0x0d, 0x20);
 80002d0:	2120      	movs	r1, #32
 80002d2:	200d      	movs	r0, #13
 80002d4:	f7ff ff70 	bl	80001b8 <spi_write>
	//set motion control
	spi_write(0x41, 0x00);
 80002d8:	2100      	movs	r1, #0
 80002da:	2041      	movs	r0, #65	; 0x41
 80002dc:	f7ff ff6c 	bl	80001b8 <spi_write>
	//set auto led switching
	spi_write(0x43,0x08);
 80002e0:	2108      	movs	r1, #8
 80002e2:	2043      	movs	r0, #67	; 0x43
 80002e4:	f7ff ff68 	bl	80001b8 <spi_write>
	//set led to be continuously on
	spi_write(0x40,0x4);
 80002e8:	2104      	movs	r1, #4
 80002ea:	2040      	movs	r0, #64	; 0x40
 80002ec:	f7ff ff64 	bl	80001b8 <spi_write>
	//set rest mode to default
	spi_write(0x45,0x00);
 80002f0:	2100      	movs	r1, #0
 80002f2:	2045      	movs	r0, #69	; 0x45
 80002f4:	f7ff ff60 	bl	80001b8 <spi_write>


	frame = (struct FRAME*) usb_tx_buffer;
 80002f8:	4b2a      	ldr	r3, [pc, #168]	; (80003a4 <main+0x134>)
 80002fa:	4a2b      	ldr	r2, [pc, #172]	; (80003a8 <main+0x138>)
 80002fc:	601a      	str	r2, [r3, #0]

		//uncomment this code to get some LED action going!
		//blink();


		frame->start = 1;
 80002fe:	4b29      	ldr	r3, [pc, #164]	; (80003a4 <main+0x134>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	2201      	movs	r2, #1
 8000304:	701a      	strb	r2, [r3, #0]
		frame->line = 0;
 8000306:	4b27      	ldr	r3, [pc, #156]	; (80003a4 <main+0x134>)
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	2200      	movs	r2, #0
 800030c:	705a      	strb	r2, [r3, #1]

		//this disables rest mode
		spi_write(0x22, 0x80);
 800030e:	2180      	movs	r1, #128	; 0x80
 8000310:	2022      	movs	r0, #34	; 0x22
 8000312:	f7ff ff51 	bl	80001b8 <spi_write>

		//write something to the pixel_grab register to reset the current read pixel to 0
		spi_write(0x0b, 0x01);
 8000316:	2101      	movs	r1, #1
 8000318:	200b      	movs	r0, #11
 800031a:	f7ff ff4d 	bl	80001b8 <spi_write>

		//read 26 * 26 pixel array
		for(uint32_t x = 0; x< ARRAY_SIZE/2;x++)
 800031e:	2300      	movs	r3, #0
 8000320:	607b      	str	r3, [r7, #4]
 8000322:	e036      	b.n	8000392 <main+0x122>
		{
			for(uint32_t y = 0; y< ARRAY_SIZE*2;)
 8000324:	2300      	movs	r3, #0
 8000326:	603b      	str	r3, [r7, #0]
 8000328:	e01b      	b.n	8000362 <main+0xf2>
			{
				tmp = spi_read(0x0b);
 800032a:	200b      	movs	r0, #11
 800032c:	f7ff ff72 	bl	8000214 <spi_read>
 8000330:	4603      	mov	r3, r0
 8000332:	461a      	mov	r2, r3
 8000334:	4b1d      	ldr	r3, [pc, #116]	; (80003ac <main+0x13c>)
 8000336:	701a      	strb	r2, [r3, #0]

				//wait for a valid pixel, bit 7 contains the PIXEL_VALID value
				if(!(tmp & 128))
 8000338:	4b1c      	ldr	r3, [pc, #112]	; (80003ac <main+0x13c>)
 800033a:	781b      	ldrb	r3, [r3, #0]
 800033c:	b25b      	sxtb	r3, r3
 800033e:	2b00      	cmp	r3, #0
 8000340:	db00      	blt.n	8000344 <main+0xd4>
					continue;
 8000342:	e00e      	b.n	8000362 <main+0xf2>

				//only bits [0->6] contain the pixel data
				frame->linebuff[y] = tmp & 127;
 8000344:	4b19      	ldr	r3, [pc, #100]	; (80003ac <main+0x13c>)
 8000346:	781b      	ldrb	r3, [r3, #0]
 8000348:	4a16      	ldr	r2, [pc, #88]	; (80003a4 <main+0x134>)
 800034a:	6812      	ldr	r2, [r2, #0]
 800034c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000350:	b2d9      	uxtb	r1, r3
 8000352:	683b      	ldr	r3, [r7, #0]
 8000354:	4413      	add	r3, r2
 8000356:	3302      	adds	r3, #2
 8000358:	460a      	mov	r2, r1
 800035a:	701a      	strb	r2, [r3, #0]

				y++;
 800035c:	683b      	ldr	r3, [r7, #0]
 800035e:	3301      	adds	r3, #1
 8000360:	603b      	str	r3, [r7, #0]
			for(uint32_t y = 0; y< ARRAY_SIZE*2;)
 8000362:	683b      	ldr	r3, [r7, #0]
 8000364:	2b33      	cmp	r3, #51	; 0x33
 8000366:	d9e0      	bls.n	800032a <main+0xba>
			}

			USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, usb_tx_buffer, 0x40);
 8000368:	2240      	movs	r2, #64	; 0x40
 800036a:	490f      	ldr	r1, [pc, #60]	; (80003a8 <main+0x138>)
 800036c:	4810      	ldr	r0, [pc, #64]	; (80003b0 <main+0x140>)
 800036e:	f006 fdfb 	bl	8006f68 <USBD_CUSTOM_HID_SendReport>
			HAL_Delay(1);
 8000372:	2001      	movs	r0, #1
 8000374:	f000 fb0c 	bl	8000990 <HAL_Delay>

			frame->line++;
 8000378:	4b0a      	ldr	r3, [pc, #40]	; (80003a4 <main+0x134>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	785a      	ldrb	r2, [r3, #1]
 800037e:	3201      	adds	r2, #1
 8000380:	b2d2      	uxtb	r2, r2
 8000382:	705a      	strb	r2, [r3, #1]
			frame->start = 0;
 8000384:	4b07      	ldr	r3, [pc, #28]	; (80003a4 <main+0x134>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	2200      	movs	r2, #0
 800038a:	701a      	strb	r2, [r3, #0]
		for(uint32_t x = 0; x< ARRAY_SIZE/2;x++)
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	3301      	adds	r3, #1
 8000390:	607b      	str	r3, [r7, #4]
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	2b0c      	cmp	r3, #12
 8000396:	d9c5      	bls.n	8000324 <main+0xb4>
		frame->start = 1;
 8000398:	e7b1      	b.n	80002fe <main+0x8e>
 800039a:	bf00      	nop
 800039c:	40010800 	.word	0x40010800
 80003a0:	200001cc 	.word	0x200001cc
 80003a4:	20000218 	.word	0x20000218
 80003a8:	20000278 	.word	0x20000278
 80003ac:	20000188 	.word	0x20000188
 80003b0:	200002bc 	.word	0x200002bc

080003b4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b094      	sub	sp, #80	; 0x50
 80003b8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003be:	2228      	movs	r2, #40	; 0x28
 80003c0:	2100      	movs	r1, #0
 80003c2:	4618      	mov	r0, r3
 80003c4:	f008 fb1e 	bl	8008a04 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003c8:	f107 0314 	add.w	r3, r7, #20
 80003cc:	2200      	movs	r2, #0
 80003ce:	601a      	str	r2, [r3, #0]
 80003d0:	605a      	str	r2, [r3, #4]
 80003d2:	609a      	str	r2, [r3, #8]
 80003d4:	60da      	str	r2, [r3, #12]
 80003d6:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003d8:	1d3b      	adds	r3, r7, #4
 80003da:	2200      	movs	r2, #0
 80003dc:	601a      	str	r2, [r3, #0]
 80003de:	605a      	str	r2, [r3, #4]
 80003e0:	609a      	str	r2, [r3, #8]
 80003e2:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003e4:	2301      	movs	r3, #1
 80003e6:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003ec:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80003ee:	2300      	movs	r3, #0
 80003f0:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003f2:	2301      	movs	r3, #1
 80003f4:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003f6:	2302      	movs	r3, #2
 80003f8:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003fe:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000400:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000404:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000406:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800040a:	4618      	mov	r0, r3
 800040c:	f002 fa32 	bl	8002874 <HAL_RCC_OscConfig>
 8000410:	4603      	mov	r3, r0
 8000412:	2b00      	cmp	r3, #0
 8000414:	d001      	beq.n	800041a <SystemClock_Config+0x66>
	{
		Error_Handler();
 8000416:	f000 f93f 	bl	8000698 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800041a:	230f      	movs	r3, #15
 800041c:	617b      	str	r3, [r7, #20]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800041e:	2302      	movs	r3, #2
 8000420:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000422:	2300      	movs	r3, #0
 8000424:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000426:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800042a:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800042c:	2300      	movs	r3, #0
 800042e:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000430:	f107 0314 	add.w	r3, r7, #20
 8000434:	2101      	movs	r1, #1
 8000436:	4618      	mov	r0, r3
 8000438:	f002 fc9c 	bl	8002d74 <HAL_RCC_ClockConfig>
 800043c:	4603      	mov	r3, r0
 800043e:	2b00      	cmp	r3, #0
 8000440:	d001      	beq.n	8000446 <SystemClock_Config+0x92>
	{
		Error_Handler();
 8000442:	f000 f929 	bl	8000698 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000446:	2310      	movs	r3, #16
 8000448:	607b      	str	r3, [r7, #4]
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800044a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800044e:	613b      	str	r3, [r7, #16]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000450:	1d3b      	adds	r3, r7, #4
 8000452:	4618      	mov	r0, r3
 8000454:	f002 fdf6 	bl	8003044 <HAL_RCCEx_PeriphCLKConfig>
 8000458:	4603      	mov	r3, r0
 800045a:	2b00      	cmp	r3, #0
 800045c:	d001      	beq.n	8000462 <SystemClock_Config+0xae>
	{
		Error_Handler();
 800045e:	f000 f91b 	bl	8000698 <Error_Handler>
	}
}
 8000462:	bf00      	nop
 8000464:	3750      	adds	r7, #80	; 0x50
 8000466:	46bd      	mov	sp, r7
 8000468:	bd80      	pop	{r7, pc}
	...

0800046c <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8000470:	4b17      	ldr	r3, [pc, #92]	; (80004d0 <MX_SPI1_Init+0x64>)
 8000472:	4a18      	ldr	r2, [pc, #96]	; (80004d4 <MX_SPI1_Init+0x68>)
 8000474:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000476:	4b16      	ldr	r3, [pc, #88]	; (80004d0 <MX_SPI1_Init+0x64>)
 8000478:	f44f 7282 	mov.w	r2, #260	; 0x104
 800047c:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800047e:	4b14      	ldr	r3, [pc, #80]	; (80004d0 <MX_SPI1_Init+0x64>)
 8000480:	2200      	movs	r2, #0
 8000482:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000484:	4b12      	ldr	r3, [pc, #72]	; (80004d0 <MX_SPI1_Init+0x64>)
 8000486:	2200      	movs	r2, #0
 8000488:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800048a:	4b11      	ldr	r3, [pc, #68]	; (80004d0 <MX_SPI1_Init+0x64>)
 800048c:	2200      	movs	r2, #0
 800048e:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000490:	4b0f      	ldr	r3, [pc, #60]	; (80004d0 <MX_SPI1_Init+0x64>)
 8000492:	2200      	movs	r2, #0
 8000494:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8000496:	4b0e      	ldr	r3, [pc, #56]	; (80004d0 <MX_SPI1_Init+0x64>)
 8000498:	f44f 7200 	mov.w	r2, #512	; 0x200
 800049c:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800049e:	4b0c      	ldr	r3, [pc, #48]	; (80004d0 <MX_SPI1_Init+0x64>)
 80004a0:	2228      	movs	r2, #40	; 0x28
 80004a2:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80004a4:	4b0a      	ldr	r3, [pc, #40]	; (80004d0 <MX_SPI1_Init+0x64>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80004aa:	4b09      	ldr	r3, [pc, #36]	; (80004d0 <MX_SPI1_Init+0x64>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80004b0:	4b07      	ldr	r3, [pc, #28]	; (80004d0 <MX_SPI1_Init+0x64>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 80004b6:	4b06      	ldr	r3, [pc, #24]	; (80004d0 <MX_SPI1_Init+0x64>)
 80004b8:	220a      	movs	r2, #10
 80004ba:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80004bc:	4804      	ldr	r0, [pc, #16]	; (80004d0 <MX_SPI1_Init+0x64>)
 80004be:	f002 fe77 	bl	80031b0 <HAL_SPI_Init>
 80004c2:	4603      	mov	r3, r0
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d001      	beq.n	80004cc <MX_SPI1_Init+0x60>
	{
		Error_Handler();
 80004c8:	f000 f8e6 	bl	8000698 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 80004cc:	bf00      	nop
 80004ce:	bd80      	pop	{r7, pc}
 80004d0:	2000021c 	.word	0x2000021c
 80004d4:	40013000 	.word	0x40013000

080004d8 <MX_TIM4_Init>:
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b08e      	sub	sp, #56	; 0x38
 80004dc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80004e2:	2200      	movs	r2, #0
 80004e4:	601a      	str	r2, [r3, #0]
 80004e6:	605a      	str	r2, [r3, #4]
 80004e8:	609a      	str	r2, [r3, #8]
 80004ea:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004ec:	f107 0320 	add.w	r3, r7, #32
 80004f0:	2200      	movs	r2, #0
 80004f2:	601a      	str	r2, [r3, #0]
 80004f4:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 80004f6:	1d3b      	adds	r3, r7, #4
 80004f8:	2200      	movs	r2, #0
 80004fa:	601a      	str	r2, [r3, #0]
 80004fc:	605a      	str	r2, [r3, #4]
 80004fe:	609a      	str	r2, [r3, #8]
 8000500:	60da      	str	r2, [r3, #12]
 8000502:	611a      	str	r2, [r3, #16]
 8000504:	615a      	str	r2, [r3, #20]
 8000506:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8000508:	4b2a      	ldr	r3, [pc, #168]	; (80005b4 <MX_TIM4_Init+0xdc>)
 800050a:	4a2b      	ldr	r2, [pc, #172]	; (80005b8 <MX_TIM4_Init+0xe0>)
 800050c:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 48 - 1;
 800050e:	4b29      	ldr	r3, [pc, #164]	; (80005b4 <MX_TIM4_Init+0xdc>)
 8000510:	222f      	movs	r2, #47	; 0x2f
 8000512:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000514:	4b27      	ldr	r3, [pc, #156]	; (80005b4 <MX_TIM4_Init+0xdc>)
 8000516:	2200      	movs	r2, #0
 8000518:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 10 - 1;
 800051a:	4b26      	ldr	r3, [pc, #152]	; (80005b4 <MX_TIM4_Init+0xdc>)
 800051c:	2209      	movs	r2, #9
 800051e:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000520:	4b24      	ldr	r3, [pc, #144]	; (80005b4 <MX_TIM4_Init+0xdc>)
 8000522:	2200      	movs	r2, #0
 8000524:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000526:	4b23      	ldr	r3, [pc, #140]	; (80005b4 <MX_TIM4_Init+0xdc>)
 8000528:	2200      	movs	r2, #0
 800052a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800052c:	4821      	ldr	r0, [pc, #132]	; (80005b4 <MX_TIM4_Init+0xdc>)
 800052e:	f003 fbab 	bl	8003c88 <HAL_TIM_Base_Init>
 8000532:	4603      	mov	r3, r0
 8000534:	2b00      	cmp	r3, #0
 8000536:	d001      	beq.n	800053c <MX_TIM4_Init+0x64>
	{
		Error_Handler();
 8000538:	f000 f8ae 	bl	8000698 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800053c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000540:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000542:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000546:	4619      	mov	r1, r3
 8000548:	481a      	ldr	r0, [pc, #104]	; (80005b4 <MX_TIM4_Init+0xdc>)
 800054a:	f003 fdf1 	bl	8004130 <HAL_TIM_ConfigClockSource>
 800054e:	4603      	mov	r3, r0
 8000550:	2b00      	cmp	r3, #0
 8000552:	d001      	beq.n	8000558 <MX_TIM4_Init+0x80>
	{
		Error_Handler();
 8000554:	f000 f8a0 	bl	8000698 <Error_Handler>
	}
	if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8000558:	4816      	ldr	r0, [pc, #88]	; (80005b4 <MX_TIM4_Init+0xdc>)
 800055a:	f003 fc31 	bl	8003dc0 <HAL_TIM_OC_Init>
 800055e:	4603      	mov	r3, r0
 8000560:	2b00      	cmp	r3, #0
 8000562:	d001      	beq.n	8000568 <MX_TIM4_Init+0x90>
	{
		Error_Handler();
 8000564:	f000 f898 	bl	8000698 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000568:	2300      	movs	r3, #0
 800056a:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800056c:	2300      	movs	r3, #0
 800056e:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000570:	f107 0320 	add.w	r3, r7, #32
 8000574:	4619      	mov	r1, r3
 8000576:	480f      	ldr	r0, [pc, #60]	; (80005b4 <MX_TIM4_Init+0xdc>)
 8000578:	f004 f89e 	bl	80046b8 <HAL_TIMEx_MasterConfigSynchronization>
 800057c:	4603      	mov	r3, r0
 800057e:	2b00      	cmp	r3, #0
 8000580:	d001      	beq.n	8000586 <MX_TIM4_Init+0xae>
	{
		Error_Handler();
 8000582:	f000 f889 	bl	8000698 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000586:	2300      	movs	r3, #0
 8000588:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 800058a:	2300      	movs	r3, #0
 800058c:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800058e:	2300      	movs	r3, #0
 8000590:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000592:	2300      	movs	r3, #0
 8000594:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000596:	1d3b      	adds	r3, r7, #4
 8000598:	2208      	movs	r2, #8
 800059a:	4619      	mov	r1, r3
 800059c:	4805      	ldr	r0, [pc, #20]	; (80005b4 <MX_TIM4_Init+0xdc>)
 800059e:	f003 fd6f 	bl	8004080 <HAL_TIM_OC_ConfigChannel>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <MX_TIM4_Init+0xd4>
	{
		Error_Handler();
 80005a8:	f000 f876 	bl	8000698 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 80005ac:	bf00      	nop
 80005ae:	3738      	adds	r7, #56	; 0x38
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	200001cc 	.word	0x200001cc
 80005b8:	40000800 	.word	0x40000800

080005bc <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b088      	sub	sp, #32
 80005c0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c2:	f107 0310 	add.w	r3, r7, #16
 80005c6:	2200      	movs	r2, #0
 80005c8:	601a      	str	r2, [r3, #0]
 80005ca:	605a      	str	r2, [r3, #4]
 80005cc:	609a      	str	r2, [r3, #8]
 80005ce:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80005d0:	4b2e      	ldr	r3, [pc, #184]	; (800068c <MX_GPIO_Init+0xd0>)
 80005d2:	699b      	ldr	r3, [r3, #24]
 80005d4:	4a2d      	ldr	r2, [pc, #180]	; (800068c <MX_GPIO_Init+0xd0>)
 80005d6:	f043 0320 	orr.w	r3, r3, #32
 80005da:	6193      	str	r3, [r2, #24]
 80005dc:	4b2b      	ldr	r3, [pc, #172]	; (800068c <MX_GPIO_Init+0xd0>)
 80005de:	699b      	ldr	r3, [r3, #24]
 80005e0:	f003 0320 	and.w	r3, r3, #32
 80005e4:	60fb      	str	r3, [r7, #12]
 80005e6:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80005e8:	4b28      	ldr	r3, [pc, #160]	; (800068c <MX_GPIO_Init+0xd0>)
 80005ea:	699b      	ldr	r3, [r3, #24]
 80005ec:	4a27      	ldr	r2, [pc, #156]	; (800068c <MX_GPIO_Init+0xd0>)
 80005ee:	f043 0304 	orr.w	r3, r3, #4
 80005f2:	6193      	str	r3, [r2, #24]
 80005f4:	4b25      	ldr	r3, [pc, #148]	; (800068c <MX_GPIO_Init+0xd0>)
 80005f6:	699b      	ldr	r3, [r3, #24]
 80005f8:	f003 0304 	and.w	r3, r3, #4
 80005fc:	60bb      	str	r3, [r7, #8]
 80005fe:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000600:	4b22      	ldr	r3, [pc, #136]	; (800068c <MX_GPIO_Init+0xd0>)
 8000602:	699b      	ldr	r3, [r3, #24]
 8000604:	4a21      	ldr	r2, [pc, #132]	; (800068c <MX_GPIO_Init+0xd0>)
 8000606:	f043 0308 	orr.w	r3, r3, #8
 800060a:	6193      	str	r3, [r2, #24]
 800060c:	4b1f      	ldr	r3, [pc, #124]	; (800068c <MX_GPIO_Init+0xd0>)
 800060e:	699b      	ldr	r3, [r3, #24]
 8000610:	f003 0308 	and.w	r3, r3, #8
 8000614:	607b      	str	r3, [r7, #4]
 8000616:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, SPI_NCS_Pin|USB_EN_Pin, GPIO_PIN_RESET);
 8000618:	2200      	movs	r2, #0
 800061a:	f248 0110 	movw	r1, #32784	; 0x8010
 800061e:	481c      	ldr	r0, [pc, #112]	; (8000690 <MX_GPIO_Init+0xd4>)
 8000620:	f000 fc62 	bl	8000ee8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LED6_Pin|LED3_Pin|LED4_Pin|LED5_Pin, GPIO_PIN_RESET);
 8000624:	2200      	movs	r2, #0
 8000626:	21e1      	movs	r1, #225	; 0xe1
 8000628:	481a      	ldr	r0, [pc, #104]	; (8000694 <MX_GPIO_Init+0xd8>)
 800062a:	f000 fc5d 	bl	8000ee8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : SPI_NCS_Pin */
	GPIO_InitStruct.Pin = SPI_NCS_Pin;
 800062e:	2310      	movs	r3, #16
 8000630:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000632:	2301      	movs	r3, #1
 8000634:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000636:	2300      	movs	r3, #0
 8000638:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800063a:	2303      	movs	r3, #3
 800063c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(SPI_NCS_GPIO_Port, &GPIO_InitStruct);
 800063e:	f107 0310 	add.w	r3, r7, #16
 8000642:	4619      	mov	r1, r3
 8000644:	4812      	ldr	r0, [pc, #72]	; (8000690 <MX_GPIO_Init+0xd4>)
 8000646:	f000 fad5 	bl	8000bf4 <HAL_GPIO_Init>

	/*Configure GPIO pins : LED6_Pin LED3_Pin LED4_Pin LED5_Pin */
	GPIO_InitStruct.Pin = LED6_Pin|LED3_Pin|LED4_Pin|LED5_Pin;
 800064a:	23e1      	movs	r3, #225	; 0xe1
 800064c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800064e:	2301      	movs	r3, #1
 8000650:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000652:	2300      	movs	r3, #0
 8000654:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000656:	2302      	movs	r3, #2
 8000658:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800065a:	f107 0310 	add.w	r3, r7, #16
 800065e:	4619      	mov	r1, r3
 8000660:	480c      	ldr	r0, [pc, #48]	; (8000694 <MX_GPIO_Init+0xd8>)
 8000662:	f000 fac7 	bl	8000bf4 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_EN_Pin */
	GPIO_InitStruct.Pin = USB_EN_Pin;
 8000666:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800066a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800066c:	2301      	movs	r3, #1
 800066e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000670:	2300      	movs	r3, #0
 8000672:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000674:	2302      	movs	r3, #2
 8000676:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(USB_EN_GPIO_Port, &GPIO_InitStruct);
 8000678:	f107 0310 	add.w	r3, r7, #16
 800067c:	4619      	mov	r1, r3
 800067e:	4804      	ldr	r0, [pc, #16]	; (8000690 <MX_GPIO_Init+0xd4>)
 8000680:	f000 fab8 	bl	8000bf4 <HAL_GPIO_Init>

}
 8000684:	bf00      	nop
 8000686:	3720      	adds	r7, #32
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	40021000 	.word	0x40021000
 8000690:	40010800 	.word	0x40010800
 8000694:	40010c00 	.word	0x40010c00

08000698 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800069c:	b672      	cpsid	i
}
 800069e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80006a0:	e7fe      	b.n	80006a0 <Error_Handler+0x8>
	...

080006a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b085      	sub	sp, #20
 80006a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80006aa:	4b15      	ldr	r3, [pc, #84]	; (8000700 <HAL_MspInit+0x5c>)
 80006ac:	699b      	ldr	r3, [r3, #24]
 80006ae:	4a14      	ldr	r2, [pc, #80]	; (8000700 <HAL_MspInit+0x5c>)
 80006b0:	f043 0301 	orr.w	r3, r3, #1
 80006b4:	6193      	str	r3, [r2, #24]
 80006b6:	4b12      	ldr	r3, [pc, #72]	; (8000700 <HAL_MspInit+0x5c>)
 80006b8:	699b      	ldr	r3, [r3, #24]
 80006ba:	f003 0301 	and.w	r3, r3, #1
 80006be:	60bb      	str	r3, [r7, #8]
 80006c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c2:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <HAL_MspInit+0x5c>)
 80006c4:	69db      	ldr	r3, [r3, #28]
 80006c6:	4a0e      	ldr	r2, [pc, #56]	; (8000700 <HAL_MspInit+0x5c>)
 80006c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006cc:	61d3      	str	r3, [r2, #28]
 80006ce:	4b0c      	ldr	r3, [pc, #48]	; (8000700 <HAL_MspInit+0x5c>)
 80006d0:	69db      	ldr	r3, [r3, #28]
 80006d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006d6:	607b      	str	r3, [r7, #4]
 80006d8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80006da:	4b0a      	ldr	r3, [pc, #40]	; (8000704 <HAL_MspInit+0x60>)
 80006dc:	685b      	ldr	r3, [r3, #4]
 80006de:	60fb      	str	r3, [r7, #12]
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80006e6:	60fb      	str	r3, [r7, #12]
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006ee:	60fb      	str	r3, [r7, #12]
 80006f0:	4a04      	ldr	r2, [pc, #16]	; (8000704 <HAL_MspInit+0x60>)
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006f6:	bf00      	nop
 80006f8:	3714      	adds	r7, #20
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bc80      	pop	{r7}
 80006fe:	4770      	bx	lr
 8000700:	40021000 	.word	0x40021000
 8000704:	40010000 	.word	0x40010000

08000708 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b088      	sub	sp, #32
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000710:	f107 0310 	add.w	r3, r7, #16
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
 8000718:	605a      	str	r2, [r3, #4]
 800071a:	609a      	str	r2, [r3, #8]
 800071c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	4a1b      	ldr	r2, [pc, #108]	; (8000790 <HAL_SPI_MspInit+0x88>)
 8000724:	4293      	cmp	r3, r2
 8000726:	d12f      	bne.n	8000788 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000728:	4b1a      	ldr	r3, [pc, #104]	; (8000794 <HAL_SPI_MspInit+0x8c>)
 800072a:	699b      	ldr	r3, [r3, #24]
 800072c:	4a19      	ldr	r2, [pc, #100]	; (8000794 <HAL_SPI_MspInit+0x8c>)
 800072e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000732:	6193      	str	r3, [r2, #24]
 8000734:	4b17      	ldr	r3, [pc, #92]	; (8000794 <HAL_SPI_MspInit+0x8c>)
 8000736:	699b      	ldr	r3, [r3, #24]
 8000738:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800073c:	60fb      	str	r3, [r7, #12]
 800073e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000740:	4b14      	ldr	r3, [pc, #80]	; (8000794 <HAL_SPI_MspInit+0x8c>)
 8000742:	699b      	ldr	r3, [r3, #24]
 8000744:	4a13      	ldr	r2, [pc, #76]	; (8000794 <HAL_SPI_MspInit+0x8c>)
 8000746:	f043 0304 	orr.w	r3, r3, #4
 800074a:	6193      	str	r3, [r2, #24]
 800074c:	4b11      	ldr	r3, [pc, #68]	; (8000794 <HAL_SPI_MspInit+0x8c>)
 800074e:	699b      	ldr	r3, [r3, #24]
 8000750:	f003 0304 	and.w	r3, r3, #4
 8000754:	60bb      	str	r3, [r7, #8]
 8000756:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000758:	23a0      	movs	r3, #160	; 0xa0
 800075a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800075c:	2302      	movs	r3, #2
 800075e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000760:	2303      	movs	r3, #3
 8000762:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000764:	f107 0310 	add.w	r3, r7, #16
 8000768:	4619      	mov	r1, r3
 800076a:	480b      	ldr	r0, [pc, #44]	; (8000798 <HAL_SPI_MspInit+0x90>)
 800076c:	f000 fa42 	bl	8000bf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000770:	2340      	movs	r3, #64	; 0x40
 8000772:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000774:	2300      	movs	r3, #0
 8000776:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000778:	2300      	movs	r3, #0
 800077a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800077c:	f107 0310 	add.w	r3, r7, #16
 8000780:	4619      	mov	r1, r3
 8000782:	4805      	ldr	r0, [pc, #20]	; (8000798 <HAL_SPI_MspInit+0x90>)
 8000784:	f000 fa36 	bl	8000bf4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000788:	bf00      	nop
 800078a:	3720      	adds	r7, #32
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	40013000 	.word	0x40013000
 8000794:	40021000 	.word	0x40021000
 8000798:	40010800 	.word	0x40010800

0800079c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b084      	sub	sp, #16
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a0d      	ldr	r2, [pc, #52]	; (80007e0 <HAL_TIM_Base_MspInit+0x44>)
 80007aa:	4293      	cmp	r3, r2
 80007ac:	d113      	bne.n	80007d6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80007ae:	4b0d      	ldr	r3, [pc, #52]	; (80007e4 <HAL_TIM_Base_MspInit+0x48>)
 80007b0:	69db      	ldr	r3, [r3, #28]
 80007b2:	4a0c      	ldr	r2, [pc, #48]	; (80007e4 <HAL_TIM_Base_MspInit+0x48>)
 80007b4:	f043 0304 	orr.w	r3, r3, #4
 80007b8:	61d3      	str	r3, [r2, #28]
 80007ba:	4b0a      	ldr	r3, [pc, #40]	; (80007e4 <HAL_TIM_Base_MspInit+0x48>)
 80007bc:	69db      	ldr	r3, [r3, #28]
 80007be:	f003 0304 	and.w	r3, r3, #4
 80007c2:	60fb      	str	r3, [r7, #12]
 80007c4:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80007c6:	2200      	movs	r2, #0
 80007c8:	2100      	movs	r1, #0
 80007ca:	201e      	movs	r0, #30
 80007cc:	f000 f9db 	bl	8000b86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80007d0:	201e      	movs	r0, #30
 80007d2:	f000 f9f4 	bl	8000bbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80007d6:	bf00      	nop
 80007d8:	3710      	adds	r7, #16
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	40000800 	.word	0x40000800
 80007e4:	40021000 	.word	0x40021000

080007e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007ec:	e7fe      	b.n	80007ec <NMI_Handler+0x4>

080007ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007ee:	b480      	push	{r7}
 80007f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007f2:	e7fe      	b.n	80007f2 <HardFault_Handler+0x4>

080007f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007f8:	e7fe      	b.n	80007f8 <MemManage_Handler+0x4>

080007fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007fa:	b480      	push	{r7}
 80007fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007fe:	e7fe      	b.n	80007fe <BusFault_Handler+0x4>

08000800 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000804:	e7fe      	b.n	8000804 <UsageFault_Handler+0x4>

08000806 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000806:	b480      	push	{r7}
 8000808:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800080a:	bf00      	nop
 800080c:	46bd      	mov	sp, r7
 800080e:	bc80      	pop	{r7}
 8000810:	4770      	bx	lr

08000812 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000812:	b480      	push	{r7}
 8000814:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000816:	bf00      	nop
 8000818:	46bd      	mov	sp, r7
 800081a:	bc80      	pop	{r7}
 800081c:	4770      	bx	lr

0800081e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800081e:	b480      	push	{r7}
 8000820:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000822:	bf00      	nop
 8000824:	46bd      	mov	sp, r7
 8000826:	bc80      	pop	{r7}
 8000828:	4770      	bx	lr

0800082a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800082a:	b580      	push	{r7, lr}
 800082c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800082e:	f000 f893 	bl	8000958 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000832:	bf00      	nop
 8000834:	bd80      	pop	{r7, pc}
	...

08000838 <USB_HP_IRQHandler>:

/**
  * @brief This function handles USB high priority interrupt.
  */
void USB_HP_IRQHandler(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_IRQn 0 */

  /* USER CODE END USB_HP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800083c:	4802      	ldr	r0, [pc, #8]	; (8000848 <USB_HP_IRQHandler+0x10>)
 800083e:	f000 fc9c 	bl	800117a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_IRQn 1 */

  /* USER CODE END USB_HP_IRQn 1 */
}
 8000842:	bf00      	nop
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	20000780 	.word	0x20000780

0800084c <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt.
  */
void USB_LP_IRQHandler(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000850:	4802      	ldr	r0, [pc, #8]	; (800085c <USB_LP_IRQHandler+0x10>)
 8000852:	f000 fc92 	bl	800117a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8000856:	bf00      	nop
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	20000780 	.word	0x20000780

08000860 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000864:	4802      	ldr	r0, [pc, #8]	; (8000870 <TIM4_IRQHandler+0x10>)
 8000866:	f003 fb03 	bl	8003e70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800086a:	bf00      	nop
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	200001cc 	.word	0x200001cc

08000874 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000878:	bf00      	nop
 800087a:	46bd      	mov	sp, r7
 800087c:	bc80      	pop	{r7}
 800087e:	4770      	bx	lr

08000880 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000880:	480c      	ldr	r0, [pc, #48]	; (80008b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000882:	490d      	ldr	r1, [pc, #52]	; (80008b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000884:	4a0d      	ldr	r2, [pc, #52]	; (80008bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000886:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000888:	e002      	b.n	8000890 <LoopCopyDataInit>

0800088a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800088a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800088c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800088e:	3304      	adds	r3, #4

08000890 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000890:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000892:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000894:	d3f9      	bcc.n	800088a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000896:	4a0a      	ldr	r2, [pc, #40]	; (80008c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000898:	4c0a      	ldr	r4, [pc, #40]	; (80008c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800089a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800089c:	e001      	b.n	80008a2 <LoopFillZerobss>

0800089e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800089e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008a0:	3204      	adds	r2, #4

080008a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008a4:	d3fb      	bcc.n	800089e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80008a6:	f7ff ffe5 	bl	8000874 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008aa:	f008 f887 	bl	80089bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008ae:	f7ff fcdf 	bl	8000270 <main>
  bx lr
 80008b2:	4770      	bx	lr
  ldr r0, =_sdata
 80008b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008b8:	20000110 	.word	0x20000110
  ldr r2, =_sidata
 80008bc:	08008ab4 	.word	0x08008ab4
  ldr r2, =_sbss
 80008c0:	20000110 	.word	0x20000110
  ldr r4, =_ebss
 80008c4:	20000a6c 	.word	0x20000a6c

080008c8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008c8:	e7fe      	b.n	80008c8 <ADC1_IRQHandler>
	...

080008cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008d0:	4b08      	ldr	r3, [pc, #32]	; (80008f4 <HAL_Init+0x28>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a07      	ldr	r2, [pc, #28]	; (80008f4 <HAL_Init+0x28>)
 80008d6:	f043 0310 	orr.w	r3, r3, #16
 80008da:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008dc:	2003      	movs	r0, #3
 80008de:	f000 f947 	bl	8000b70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008e2:	200f      	movs	r0, #15
 80008e4:	f000 f808 	bl	80008f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008e8:	f7ff fedc 	bl	80006a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008ec:	2300      	movs	r3, #0
}
 80008ee:	4618      	mov	r0, r3
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	40022000 	.word	0x40022000

080008f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000900:	4b12      	ldr	r3, [pc, #72]	; (800094c <HAL_InitTick+0x54>)
 8000902:	681a      	ldr	r2, [r3, #0]
 8000904:	4b12      	ldr	r3, [pc, #72]	; (8000950 <HAL_InitTick+0x58>)
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	4619      	mov	r1, r3
 800090a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800090e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000912:	fbb2 f3f3 	udiv	r3, r2, r3
 8000916:	4618      	mov	r0, r3
 8000918:	f000 f95f 	bl	8000bda <HAL_SYSTICK_Config>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000922:	2301      	movs	r3, #1
 8000924:	e00e      	b.n	8000944 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	2b0f      	cmp	r3, #15
 800092a:	d80a      	bhi.n	8000942 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800092c:	2200      	movs	r2, #0
 800092e:	6879      	ldr	r1, [r7, #4]
 8000930:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000934:	f000 f927 	bl	8000b86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000938:	4a06      	ldr	r2, [pc, #24]	; (8000954 <HAL_InitTick+0x5c>)
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800093e:	2300      	movs	r3, #0
 8000940:	e000      	b.n	8000944 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000942:	2301      	movs	r3, #1
}
 8000944:	4618      	mov	r0, r3
 8000946:	3708      	adds	r7, #8
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	20000000 	.word	0x20000000
 8000950:	20000008 	.word	0x20000008
 8000954:	20000004 	.word	0x20000004

08000958 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800095c:	4b05      	ldr	r3, [pc, #20]	; (8000974 <HAL_IncTick+0x1c>)
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	461a      	mov	r2, r3
 8000962:	4b05      	ldr	r3, [pc, #20]	; (8000978 <HAL_IncTick+0x20>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	4413      	add	r3, r2
 8000968:	4a03      	ldr	r2, [pc, #12]	; (8000978 <HAL_IncTick+0x20>)
 800096a:	6013      	str	r3, [r2, #0]
}
 800096c:	bf00      	nop
 800096e:	46bd      	mov	sp, r7
 8000970:	bc80      	pop	{r7}
 8000972:	4770      	bx	lr
 8000974:	20000008 	.word	0x20000008
 8000978:	200002b8 	.word	0x200002b8

0800097c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  return uwTick;
 8000980:	4b02      	ldr	r3, [pc, #8]	; (800098c <HAL_GetTick+0x10>)
 8000982:	681b      	ldr	r3, [r3, #0]
}
 8000984:	4618      	mov	r0, r3
 8000986:	46bd      	mov	sp, r7
 8000988:	bc80      	pop	{r7}
 800098a:	4770      	bx	lr
 800098c:	200002b8 	.word	0x200002b8

08000990 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000998:	f7ff fff0 	bl	800097c <HAL_GetTick>
 800099c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80009a8:	d005      	beq.n	80009b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009aa:	4b0a      	ldr	r3, [pc, #40]	; (80009d4 <HAL_Delay+0x44>)
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	461a      	mov	r2, r3
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	4413      	add	r3, r2
 80009b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80009b6:	bf00      	nop
 80009b8:	f7ff ffe0 	bl	800097c <HAL_GetTick>
 80009bc:	4602      	mov	r2, r0
 80009be:	68bb      	ldr	r3, [r7, #8]
 80009c0:	1ad3      	subs	r3, r2, r3
 80009c2:	68fa      	ldr	r2, [r7, #12]
 80009c4:	429a      	cmp	r2, r3
 80009c6:	d8f7      	bhi.n	80009b8 <HAL_Delay+0x28>
  {
  }
}
 80009c8:	bf00      	nop
 80009ca:	bf00      	nop
 80009cc:	3710      	adds	r7, #16
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	20000008 	.word	0x20000008

080009d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009d8:	b480      	push	{r7}
 80009da:	b085      	sub	sp, #20
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	f003 0307 	and.w	r3, r3, #7
 80009e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009e8:	4b0c      	ldr	r3, [pc, #48]	; (8000a1c <__NVIC_SetPriorityGrouping+0x44>)
 80009ea:	68db      	ldr	r3, [r3, #12]
 80009ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009ee:	68ba      	ldr	r2, [r7, #8]
 80009f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009f4:	4013      	ands	r3, r2
 80009f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009fc:	68bb      	ldr	r3, [r7, #8]
 80009fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a0a:	4a04      	ldr	r2, [pc, #16]	; (8000a1c <__NVIC_SetPriorityGrouping+0x44>)
 8000a0c:	68bb      	ldr	r3, [r7, #8]
 8000a0e:	60d3      	str	r3, [r2, #12]
}
 8000a10:	bf00      	nop
 8000a12:	3714      	adds	r7, #20
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bc80      	pop	{r7}
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop
 8000a1c:	e000ed00 	.word	0xe000ed00

08000a20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a24:	4b04      	ldr	r3, [pc, #16]	; (8000a38 <__NVIC_GetPriorityGrouping+0x18>)
 8000a26:	68db      	ldr	r3, [r3, #12]
 8000a28:	0a1b      	lsrs	r3, r3, #8
 8000a2a:	f003 0307 	and.w	r3, r3, #7
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bc80      	pop	{r7}
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	e000ed00 	.word	0xe000ed00

08000a3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b083      	sub	sp, #12
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	4603      	mov	r3, r0
 8000a44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	db0b      	blt.n	8000a66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a4e:	79fb      	ldrb	r3, [r7, #7]
 8000a50:	f003 021f 	and.w	r2, r3, #31
 8000a54:	4906      	ldr	r1, [pc, #24]	; (8000a70 <__NVIC_EnableIRQ+0x34>)
 8000a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a5a:	095b      	lsrs	r3, r3, #5
 8000a5c:	2001      	movs	r0, #1
 8000a5e:	fa00 f202 	lsl.w	r2, r0, r2
 8000a62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a66:	bf00      	nop
 8000a68:	370c      	adds	r7, #12
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bc80      	pop	{r7}
 8000a6e:	4770      	bx	lr
 8000a70:	e000e100 	.word	0xe000e100

08000a74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b083      	sub	sp, #12
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	6039      	str	r1, [r7, #0]
 8000a7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	db0a      	blt.n	8000a9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	b2da      	uxtb	r2, r3
 8000a8c:	490c      	ldr	r1, [pc, #48]	; (8000ac0 <__NVIC_SetPriority+0x4c>)
 8000a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a92:	0112      	lsls	r2, r2, #4
 8000a94:	b2d2      	uxtb	r2, r2
 8000a96:	440b      	add	r3, r1
 8000a98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a9c:	e00a      	b.n	8000ab4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	b2da      	uxtb	r2, r3
 8000aa2:	4908      	ldr	r1, [pc, #32]	; (8000ac4 <__NVIC_SetPriority+0x50>)
 8000aa4:	79fb      	ldrb	r3, [r7, #7]
 8000aa6:	f003 030f 	and.w	r3, r3, #15
 8000aaa:	3b04      	subs	r3, #4
 8000aac:	0112      	lsls	r2, r2, #4
 8000aae:	b2d2      	uxtb	r2, r2
 8000ab0:	440b      	add	r3, r1
 8000ab2:	761a      	strb	r2, [r3, #24]
}
 8000ab4:	bf00      	nop
 8000ab6:	370c      	adds	r7, #12
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bc80      	pop	{r7}
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop
 8000ac0:	e000e100 	.word	0xe000e100
 8000ac4:	e000ed00 	.word	0xe000ed00

08000ac8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b089      	sub	sp, #36	; 0x24
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	60f8      	str	r0, [r7, #12]
 8000ad0:	60b9      	str	r1, [r7, #8]
 8000ad2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	f003 0307 	and.w	r3, r3, #7
 8000ada:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000adc:	69fb      	ldr	r3, [r7, #28]
 8000ade:	f1c3 0307 	rsb	r3, r3, #7
 8000ae2:	2b04      	cmp	r3, #4
 8000ae4:	bf28      	it	cs
 8000ae6:	2304      	movcs	r3, #4
 8000ae8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aea:	69fb      	ldr	r3, [r7, #28]
 8000aec:	3304      	adds	r3, #4
 8000aee:	2b06      	cmp	r3, #6
 8000af0:	d902      	bls.n	8000af8 <NVIC_EncodePriority+0x30>
 8000af2:	69fb      	ldr	r3, [r7, #28]
 8000af4:	3b03      	subs	r3, #3
 8000af6:	e000      	b.n	8000afa <NVIC_EncodePriority+0x32>
 8000af8:	2300      	movs	r3, #0
 8000afa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000afc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b00:	69bb      	ldr	r3, [r7, #24]
 8000b02:	fa02 f303 	lsl.w	r3, r2, r3
 8000b06:	43da      	mvns	r2, r3
 8000b08:	68bb      	ldr	r3, [r7, #8]
 8000b0a:	401a      	ands	r2, r3
 8000b0c:	697b      	ldr	r3, [r7, #20]
 8000b0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b10:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	fa01 f303 	lsl.w	r3, r1, r3
 8000b1a:	43d9      	mvns	r1, r3
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b20:	4313      	orrs	r3, r2
         );
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	3724      	adds	r7, #36	; 0x24
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bc80      	pop	{r7}
 8000b2a:	4770      	bx	lr

08000b2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	3b01      	subs	r3, #1
 8000b38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b3c:	d301      	bcc.n	8000b42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b3e:	2301      	movs	r3, #1
 8000b40:	e00f      	b.n	8000b62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b42:	4a0a      	ldr	r2, [pc, #40]	; (8000b6c <SysTick_Config+0x40>)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	3b01      	subs	r3, #1
 8000b48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b4a:	210f      	movs	r1, #15
 8000b4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b50:	f7ff ff90 	bl	8000a74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b54:	4b05      	ldr	r3, [pc, #20]	; (8000b6c <SysTick_Config+0x40>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b5a:	4b04      	ldr	r3, [pc, #16]	; (8000b6c <SysTick_Config+0x40>)
 8000b5c:	2207      	movs	r2, #7
 8000b5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b60:	2300      	movs	r3, #0
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	e000e010 	.word	0xe000e010

08000b70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b78:	6878      	ldr	r0, [r7, #4]
 8000b7a:	f7ff ff2d 	bl	80009d8 <__NVIC_SetPriorityGrouping>
}
 8000b7e:	bf00      	nop
 8000b80:	3708      	adds	r7, #8
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}

08000b86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b86:	b580      	push	{r7, lr}
 8000b88:	b086      	sub	sp, #24
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	60b9      	str	r1, [r7, #8]
 8000b90:	607a      	str	r2, [r7, #4]
 8000b92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b94:	2300      	movs	r3, #0
 8000b96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b98:	f7ff ff42 	bl	8000a20 <__NVIC_GetPriorityGrouping>
 8000b9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b9e:	687a      	ldr	r2, [r7, #4]
 8000ba0:	68b9      	ldr	r1, [r7, #8]
 8000ba2:	6978      	ldr	r0, [r7, #20]
 8000ba4:	f7ff ff90 	bl	8000ac8 <NVIC_EncodePriority>
 8000ba8:	4602      	mov	r2, r0
 8000baa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bae:	4611      	mov	r1, r2
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f7ff ff5f 	bl	8000a74 <__NVIC_SetPriority>
}
 8000bb6:	bf00      	nop
 8000bb8:	3718      	adds	r7, #24
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}

08000bbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bbe:	b580      	push	{r7, lr}
 8000bc0:	b082      	sub	sp, #8
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f7ff ff35 	bl	8000a3c <__NVIC_EnableIRQ>
}
 8000bd2:	bf00      	nop
 8000bd4:	3708      	adds	r7, #8
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}

08000bda <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bda:	b580      	push	{r7, lr}
 8000bdc:	b082      	sub	sp, #8
 8000bde:	af00      	add	r7, sp, #0
 8000be0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000be2:	6878      	ldr	r0, [r7, #4]
 8000be4:	f7ff ffa2 	bl	8000b2c <SysTick_Config>
 8000be8:	4603      	mov	r3, r0
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	3708      	adds	r7, #8
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
	...

08000bf4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b08b      	sub	sp, #44	; 0x2c
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
 8000bfc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000c02:	2300      	movs	r3, #0
 8000c04:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c06:	e148      	b.n	8000e9a <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000c08:	2201      	movs	r2, #1
 8000c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c10:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	69fa      	ldr	r2, [r7, #28]
 8000c18:	4013      	ands	r3, r2
 8000c1a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000c1c:	69ba      	ldr	r2, [r7, #24]
 8000c1e:	69fb      	ldr	r3, [r7, #28]
 8000c20:	429a      	cmp	r2, r3
 8000c22:	f040 8137 	bne.w	8000e94 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	4aa3      	ldr	r2, [pc, #652]	; (8000eb8 <HAL_GPIO_Init+0x2c4>)
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d05e      	beq.n	8000cee <HAL_GPIO_Init+0xfa>
 8000c30:	4aa1      	ldr	r2, [pc, #644]	; (8000eb8 <HAL_GPIO_Init+0x2c4>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d875      	bhi.n	8000d22 <HAL_GPIO_Init+0x12e>
 8000c36:	4aa1      	ldr	r2, [pc, #644]	; (8000ebc <HAL_GPIO_Init+0x2c8>)
 8000c38:	4293      	cmp	r3, r2
 8000c3a:	d058      	beq.n	8000cee <HAL_GPIO_Init+0xfa>
 8000c3c:	4a9f      	ldr	r2, [pc, #636]	; (8000ebc <HAL_GPIO_Init+0x2c8>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d86f      	bhi.n	8000d22 <HAL_GPIO_Init+0x12e>
 8000c42:	4a9f      	ldr	r2, [pc, #636]	; (8000ec0 <HAL_GPIO_Init+0x2cc>)
 8000c44:	4293      	cmp	r3, r2
 8000c46:	d052      	beq.n	8000cee <HAL_GPIO_Init+0xfa>
 8000c48:	4a9d      	ldr	r2, [pc, #628]	; (8000ec0 <HAL_GPIO_Init+0x2cc>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d869      	bhi.n	8000d22 <HAL_GPIO_Init+0x12e>
 8000c4e:	4a9d      	ldr	r2, [pc, #628]	; (8000ec4 <HAL_GPIO_Init+0x2d0>)
 8000c50:	4293      	cmp	r3, r2
 8000c52:	d04c      	beq.n	8000cee <HAL_GPIO_Init+0xfa>
 8000c54:	4a9b      	ldr	r2, [pc, #620]	; (8000ec4 <HAL_GPIO_Init+0x2d0>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d863      	bhi.n	8000d22 <HAL_GPIO_Init+0x12e>
 8000c5a:	4a9b      	ldr	r2, [pc, #620]	; (8000ec8 <HAL_GPIO_Init+0x2d4>)
 8000c5c:	4293      	cmp	r3, r2
 8000c5e:	d046      	beq.n	8000cee <HAL_GPIO_Init+0xfa>
 8000c60:	4a99      	ldr	r2, [pc, #612]	; (8000ec8 <HAL_GPIO_Init+0x2d4>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d85d      	bhi.n	8000d22 <HAL_GPIO_Init+0x12e>
 8000c66:	2b12      	cmp	r3, #18
 8000c68:	d82a      	bhi.n	8000cc0 <HAL_GPIO_Init+0xcc>
 8000c6a:	2b12      	cmp	r3, #18
 8000c6c:	d859      	bhi.n	8000d22 <HAL_GPIO_Init+0x12e>
 8000c6e:	a201      	add	r2, pc, #4	; (adr r2, 8000c74 <HAL_GPIO_Init+0x80>)
 8000c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c74:	08000cef 	.word	0x08000cef
 8000c78:	08000cc9 	.word	0x08000cc9
 8000c7c:	08000cdb 	.word	0x08000cdb
 8000c80:	08000d1d 	.word	0x08000d1d
 8000c84:	08000d23 	.word	0x08000d23
 8000c88:	08000d23 	.word	0x08000d23
 8000c8c:	08000d23 	.word	0x08000d23
 8000c90:	08000d23 	.word	0x08000d23
 8000c94:	08000d23 	.word	0x08000d23
 8000c98:	08000d23 	.word	0x08000d23
 8000c9c:	08000d23 	.word	0x08000d23
 8000ca0:	08000d23 	.word	0x08000d23
 8000ca4:	08000d23 	.word	0x08000d23
 8000ca8:	08000d23 	.word	0x08000d23
 8000cac:	08000d23 	.word	0x08000d23
 8000cb0:	08000d23 	.word	0x08000d23
 8000cb4:	08000d23 	.word	0x08000d23
 8000cb8:	08000cd1 	.word	0x08000cd1
 8000cbc:	08000ce5 	.word	0x08000ce5
 8000cc0:	4a82      	ldr	r2, [pc, #520]	; (8000ecc <HAL_GPIO_Init+0x2d8>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d013      	beq.n	8000cee <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000cc6:	e02c      	b.n	8000d22 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	68db      	ldr	r3, [r3, #12]
 8000ccc:	623b      	str	r3, [r7, #32]
          break;
 8000cce:	e029      	b.n	8000d24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	68db      	ldr	r3, [r3, #12]
 8000cd4:	3304      	adds	r3, #4
 8000cd6:	623b      	str	r3, [r7, #32]
          break;
 8000cd8:	e024      	b.n	8000d24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	68db      	ldr	r3, [r3, #12]
 8000cde:	3308      	adds	r3, #8
 8000ce0:	623b      	str	r3, [r7, #32]
          break;
 8000ce2:	e01f      	b.n	8000d24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	68db      	ldr	r3, [r3, #12]
 8000ce8:	330c      	adds	r3, #12
 8000cea:	623b      	str	r3, [r7, #32]
          break;
 8000cec:	e01a      	b.n	8000d24 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	689b      	ldr	r3, [r3, #8]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d102      	bne.n	8000cfc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000cf6:	2304      	movs	r3, #4
 8000cf8:	623b      	str	r3, [r7, #32]
          break;
 8000cfa:	e013      	b.n	8000d24 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	689b      	ldr	r3, [r3, #8]
 8000d00:	2b01      	cmp	r3, #1
 8000d02:	d105      	bne.n	8000d10 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d04:	2308      	movs	r3, #8
 8000d06:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	69fa      	ldr	r2, [r7, #28]
 8000d0c:	611a      	str	r2, [r3, #16]
          break;
 8000d0e:	e009      	b.n	8000d24 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d10:	2308      	movs	r3, #8
 8000d12:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	69fa      	ldr	r2, [r7, #28]
 8000d18:	615a      	str	r2, [r3, #20]
          break;
 8000d1a:	e003      	b.n	8000d24 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	623b      	str	r3, [r7, #32]
          break;
 8000d20:	e000      	b.n	8000d24 <HAL_GPIO_Init+0x130>
          break;
 8000d22:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d24:	69bb      	ldr	r3, [r7, #24]
 8000d26:	2bff      	cmp	r3, #255	; 0xff
 8000d28:	d801      	bhi.n	8000d2e <HAL_GPIO_Init+0x13a>
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	e001      	b.n	8000d32 <HAL_GPIO_Init+0x13e>
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	3304      	adds	r3, #4
 8000d32:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d34:	69bb      	ldr	r3, [r7, #24]
 8000d36:	2bff      	cmp	r3, #255	; 0xff
 8000d38:	d802      	bhi.n	8000d40 <HAL_GPIO_Init+0x14c>
 8000d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d3c:	009b      	lsls	r3, r3, #2
 8000d3e:	e002      	b.n	8000d46 <HAL_GPIO_Init+0x152>
 8000d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d42:	3b08      	subs	r3, #8
 8000d44:	009b      	lsls	r3, r3, #2
 8000d46:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	210f      	movs	r1, #15
 8000d4e:	693b      	ldr	r3, [r7, #16]
 8000d50:	fa01 f303 	lsl.w	r3, r1, r3
 8000d54:	43db      	mvns	r3, r3
 8000d56:	401a      	ands	r2, r3
 8000d58:	6a39      	ldr	r1, [r7, #32]
 8000d5a:	693b      	ldr	r3, [r7, #16]
 8000d5c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d60:	431a      	orrs	r2, r3
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	f000 8090 	beq.w	8000e94 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d74:	4b56      	ldr	r3, [pc, #344]	; (8000ed0 <HAL_GPIO_Init+0x2dc>)
 8000d76:	699b      	ldr	r3, [r3, #24]
 8000d78:	4a55      	ldr	r2, [pc, #340]	; (8000ed0 <HAL_GPIO_Init+0x2dc>)
 8000d7a:	f043 0301 	orr.w	r3, r3, #1
 8000d7e:	6193      	str	r3, [r2, #24]
 8000d80:	4b53      	ldr	r3, [pc, #332]	; (8000ed0 <HAL_GPIO_Init+0x2dc>)
 8000d82:	699b      	ldr	r3, [r3, #24]
 8000d84:	f003 0301 	and.w	r3, r3, #1
 8000d88:	60bb      	str	r3, [r7, #8]
 8000d8a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d8c:	4a51      	ldr	r2, [pc, #324]	; (8000ed4 <HAL_GPIO_Init+0x2e0>)
 8000d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d90:	089b      	lsrs	r3, r3, #2
 8000d92:	3302      	adds	r3, #2
 8000d94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d98:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d9c:	f003 0303 	and.w	r3, r3, #3
 8000da0:	009b      	lsls	r3, r3, #2
 8000da2:	220f      	movs	r2, #15
 8000da4:	fa02 f303 	lsl.w	r3, r2, r3
 8000da8:	43db      	mvns	r3, r3
 8000daa:	68fa      	ldr	r2, [r7, #12]
 8000dac:	4013      	ands	r3, r2
 8000dae:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	4a49      	ldr	r2, [pc, #292]	; (8000ed8 <HAL_GPIO_Init+0x2e4>)
 8000db4:	4293      	cmp	r3, r2
 8000db6:	d00d      	beq.n	8000dd4 <HAL_GPIO_Init+0x1e0>
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	4a48      	ldr	r2, [pc, #288]	; (8000edc <HAL_GPIO_Init+0x2e8>)
 8000dbc:	4293      	cmp	r3, r2
 8000dbe:	d007      	beq.n	8000dd0 <HAL_GPIO_Init+0x1dc>
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	4a47      	ldr	r2, [pc, #284]	; (8000ee0 <HAL_GPIO_Init+0x2ec>)
 8000dc4:	4293      	cmp	r3, r2
 8000dc6:	d101      	bne.n	8000dcc <HAL_GPIO_Init+0x1d8>
 8000dc8:	2302      	movs	r3, #2
 8000dca:	e004      	b.n	8000dd6 <HAL_GPIO_Init+0x1e2>
 8000dcc:	2303      	movs	r3, #3
 8000dce:	e002      	b.n	8000dd6 <HAL_GPIO_Init+0x1e2>
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	e000      	b.n	8000dd6 <HAL_GPIO_Init+0x1e2>
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000dd8:	f002 0203 	and.w	r2, r2, #3
 8000ddc:	0092      	lsls	r2, r2, #2
 8000dde:	4093      	lsls	r3, r2
 8000de0:	68fa      	ldr	r2, [r7, #12]
 8000de2:	4313      	orrs	r3, r2
 8000de4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000de6:	493b      	ldr	r1, [pc, #236]	; (8000ed4 <HAL_GPIO_Init+0x2e0>)
 8000de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dea:	089b      	lsrs	r3, r3, #2
 8000dec:	3302      	adds	r3, #2
 8000dee:	68fa      	ldr	r2, [r7, #12]
 8000df0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d006      	beq.n	8000e0e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000e00:	4b38      	ldr	r3, [pc, #224]	; (8000ee4 <HAL_GPIO_Init+0x2f0>)
 8000e02:	681a      	ldr	r2, [r3, #0]
 8000e04:	4937      	ldr	r1, [pc, #220]	; (8000ee4 <HAL_GPIO_Init+0x2f0>)
 8000e06:	69bb      	ldr	r3, [r7, #24]
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	600b      	str	r3, [r1, #0]
 8000e0c:	e006      	b.n	8000e1c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e0e:	4b35      	ldr	r3, [pc, #212]	; (8000ee4 <HAL_GPIO_Init+0x2f0>)
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	69bb      	ldr	r3, [r7, #24]
 8000e14:	43db      	mvns	r3, r3
 8000e16:	4933      	ldr	r1, [pc, #204]	; (8000ee4 <HAL_GPIO_Init+0x2f0>)
 8000e18:	4013      	ands	r3, r2
 8000e1a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d006      	beq.n	8000e36 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000e28:	4b2e      	ldr	r3, [pc, #184]	; (8000ee4 <HAL_GPIO_Init+0x2f0>)
 8000e2a:	685a      	ldr	r2, [r3, #4]
 8000e2c:	492d      	ldr	r1, [pc, #180]	; (8000ee4 <HAL_GPIO_Init+0x2f0>)
 8000e2e:	69bb      	ldr	r3, [r7, #24]
 8000e30:	4313      	orrs	r3, r2
 8000e32:	604b      	str	r3, [r1, #4]
 8000e34:	e006      	b.n	8000e44 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e36:	4b2b      	ldr	r3, [pc, #172]	; (8000ee4 <HAL_GPIO_Init+0x2f0>)
 8000e38:	685a      	ldr	r2, [r3, #4]
 8000e3a:	69bb      	ldr	r3, [r7, #24]
 8000e3c:	43db      	mvns	r3, r3
 8000e3e:	4929      	ldr	r1, [pc, #164]	; (8000ee4 <HAL_GPIO_Init+0x2f0>)
 8000e40:	4013      	ands	r3, r2
 8000e42:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d006      	beq.n	8000e5e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e50:	4b24      	ldr	r3, [pc, #144]	; (8000ee4 <HAL_GPIO_Init+0x2f0>)
 8000e52:	689a      	ldr	r2, [r3, #8]
 8000e54:	4923      	ldr	r1, [pc, #140]	; (8000ee4 <HAL_GPIO_Init+0x2f0>)
 8000e56:	69bb      	ldr	r3, [r7, #24]
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	608b      	str	r3, [r1, #8]
 8000e5c:	e006      	b.n	8000e6c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e5e:	4b21      	ldr	r3, [pc, #132]	; (8000ee4 <HAL_GPIO_Init+0x2f0>)
 8000e60:	689a      	ldr	r2, [r3, #8]
 8000e62:	69bb      	ldr	r3, [r7, #24]
 8000e64:	43db      	mvns	r3, r3
 8000e66:	491f      	ldr	r1, [pc, #124]	; (8000ee4 <HAL_GPIO_Init+0x2f0>)
 8000e68:	4013      	ands	r3, r2
 8000e6a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d006      	beq.n	8000e86 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e78:	4b1a      	ldr	r3, [pc, #104]	; (8000ee4 <HAL_GPIO_Init+0x2f0>)
 8000e7a:	68da      	ldr	r2, [r3, #12]
 8000e7c:	4919      	ldr	r1, [pc, #100]	; (8000ee4 <HAL_GPIO_Init+0x2f0>)
 8000e7e:	69bb      	ldr	r3, [r7, #24]
 8000e80:	4313      	orrs	r3, r2
 8000e82:	60cb      	str	r3, [r1, #12]
 8000e84:	e006      	b.n	8000e94 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e86:	4b17      	ldr	r3, [pc, #92]	; (8000ee4 <HAL_GPIO_Init+0x2f0>)
 8000e88:	68da      	ldr	r2, [r3, #12]
 8000e8a:	69bb      	ldr	r3, [r7, #24]
 8000e8c:	43db      	mvns	r3, r3
 8000e8e:	4915      	ldr	r1, [pc, #84]	; (8000ee4 <HAL_GPIO_Init+0x2f0>)
 8000e90:	4013      	ands	r3, r2
 8000e92:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e96:	3301      	adds	r3, #1
 8000e98:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	681a      	ldr	r2, [r3, #0]
 8000e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ea0:	fa22 f303 	lsr.w	r3, r2, r3
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	f47f aeaf 	bne.w	8000c08 <HAL_GPIO_Init+0x14>
  }
}
 8000eaa:	bf00      	nop
 8000eac:	bf00      	nop
 8000eae:	372c      	adds	r7, #44	; 0x2c
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bc80      	pop	{r7}
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	10320000 	.word	0x10320000
 8000ebc:	10310000 	.word	0x10310000
 8000ec0:	10220000 	.word	0x10220000
 8000ec4:	10210000 	.word	0x10210000
 8000ec8:	10120000 	.word	0x10120000
 8000ecc:	10110000 	.word	0x10110000
 8000ed0:	40021000 	.word	0x40021000
 8000ed4:	40010000 	.word	0x40010000
 8000ed8:	40010800 	.word	0x40010800
 8000edc:	40010c00 	.word	0x40010c00
 8000ee0:	40011000 	.word	0x40011000
 8000ee4:	40010400 	.word	0x40010400

08000ee8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
 8000ef0:	460b      	mov	r3, r1
 8000ef2:	807b      	strh	r3, [r7, #2]
 8000ef4:	4613      	mov	r3, r2
 8000ef6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ef8:	787b      	ldrb	r3, [r7, #1]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d003      	beq.n	8000f06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000efe:	887a      	ldrh	r2, [r7, #2]
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000f04:	e003      	b.n	8000f0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f06:	887b      	ldrh	r3, [r7, #2]
 8000f08:	041a      	lsls	r2, r3, #16
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	611a      	str	r2, [r3, #16]
}
 8000f0e:	bf00      	nop
 8000f10:	370c      	adds	r7, #12
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bc80      	pop	{r7}
 8000f16:	4770      	bx	lr

08000f18 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000f18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f1a:	b08b      	sub	sp, #44	; 0x2c
 8000f1c:	af06      	add	r7, sp, #24
 8000f1e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d101      	bne.n	8000f2a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000f26:	2301      	movs	r3, #1
 8000f28:	e0fd      	b.n	8001126 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d106      	bne.n	8000f44 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2200      	movs	r2, #0
 8000f3a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000f3e:	6878      	ldr	r0, [r7, #4]
 8000f40:	f007 faa6 	bl	8008490 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2203      	movs	r2, #3
 8000f48:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4618      	mov	r0, r3
 8000f52:	f003 fc41 	bl	80047d8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	603b      	str	r3, [r7, #0]
 8000f5c:	687e      	ldr	r6, [r7, #4]
 8000f5e:	466d      	mov	r5, sp
 8000f60:	f106 0410 	add.w	r4, r6, #16
 8000f64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f66:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f68:	6823      	ldr	r3, [r4, #0]
 8000f6a:	602b      	str	r3, [r5, #0]
 8000f6c:	1d33      	adds	r3, r6, #4
 8000f6e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f70:	6838      	ldr	r0, [r7, #0]
 8000f72:	f003 fc0b 	bl	800478c <USB_CoreInit>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d005      	beq.n	8000f88 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2202      	movs	r2, #2
 8000f80:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000f84:	2301      	movs	r3, #1
 8000f86:	e0ce      	b.n	8001126 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f003 fc3c 	bl	800480c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f94:	2300      	movs	r3, #0
 8000f96:	73fb      	strb	r3, [r7, #15]
 8000f98:	e04c      	b.n	8001034 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000f9a:	7bfb      	ldrb	r3, [r7, #15]
 8000f9c:	6879      	ldr	r1, [r7, #4]
 8000f9e:	1c5a      	adds	r2, r3, #1
 8000fa0:	4613      	mov	r3, r2
 8000fa2:	009b      	lsls	r3, r3, #2
 8000fa4:	4413      	add	r3, r2
 8000fa6:	00db      	lsls	r3, r3, #3
 8000fa8:	440b      	add	r3, r1
 8000faa:	3301      	adds	r3, #1
 8000fac:	2201      	movs	r2, #1
 8000fae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000fb0:	7bfb      	ldrb	r3, [r7, #15]
 8000fb2:	6879      	ldr	r1, [r7, #4]
 8000fb4:	1c5a      	adds	r2, r3, #1
 8000fb6:	4613      	mov	r3, r2
 8000fb8:	009b      	lsls	r3, r3, #2
 8000fba:	4413      	add	r3, r2
 8000fbc:	00db      	lsls	r3, r3, #3
 8000fbe:	440b      	add	r3, r1
 8000fc0:	7bfa      	ldrb	r2, [r7, #15]
 8000fc2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000fc4:	7bfa      	ldrb	r2, [r7, #15]
 8000fc6:	7bfb      	ldrb	r3, [r7, #15]
 8000fc8:	b298      	uxth	r0, r3
 8000fca:	6879      	ldr	r1, [r7, #4]
 8000fcc:	4613      	mov	r3, r2
 8000fce:	009b      	lsls	r3, r3, #2
 8000fd0:	4413      	add	r3, r2
 8000fd2:	00db      	lsls	r3, r3, #3
 8000fd4:	440b      	add	r3, r1
 8000fd6:	3336      	adds	r3, #54	; 0x36
 8000fd8:	4602      	mov	r2, r0
 8000fda:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000fdc:	7bfb      	ldrb	r3, [r7, #15]
 8000fde:	6879      	ldr	r1, [r7, #4]
 8000fe0:	1c5a      	adds	r2, r3, #1
 8000fe2:	4613      	mov	r3, r2
 8000fe4:	009b      	lsls	r3, r3, #2
 8000fe6:	4413      	add	r3, r2
 8000fe8:	00db      	lsls	r3, r3, #3
 8000fea:	440b      	add	r3, r1
 8000fec:	3303      	adds	r3, #3
 8000fee:	2200      	movs	r2, #0
 8000ff0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000ff2:	7bfa      	ldrb	r2, [r7, #15]
 8000ff4:	6879      	ldr	r1, [r7, #4]
 8000ff6:	4613      	mov	r3, r2
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	4413      	add	r3, r2
 8000ffc:	00db      	lsls	r3, r3, #3
 8000ffe:	440b      	add	r3, r1
 8001000:	3338      	adds	r3, #56	; 0x38
 8001002:	2200      	movs	r2, #0
 8001004:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001006:	7bfa      	ldrb	r2, [r7, #15]
 8001008:	6879      	ldr	r1, [r7, #4]
 800100a:	4613      	mov	r3, r2
 800100c:	009b      	lsls	r3, r3, #2
 800100e:	4413      	add	r3, r2
 8001010:	00db      	lsls	r3, r3, #3
 8001012:	440b      	add	r3, r1
 8001014:	333c      	adds	r3, #60	; 0x3c
 8001016:	2200      	movs	r2, #0
 8001018:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800101a:	7bfa      	ldrb	r2, [r7, #15]
 800101c:	6879      	ldr	r1, [r7, #4]
 800101e:	4613      	mov	r3, r2
 8001020:	009b      	lsls	r3, r3, #2
 8001022:	4413      	add	r3, r2
 8001024:	00db      	lsls	r3, r3, #3
 8001026:	440b      	add	r3, r1
 8001028:	3340      	adds	r3, #64	; 0x40
 800102a:	2200      	movs	r2, #0
 800102c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800102e:	7bfb      	ldrb	r3, [r7, #15]
 8001030:	3301      	adds	r3, #1
 8001032:	73fb      	strb	r3, [r7, #15]
 8001034:	7bfa      	ldrb	r2, [r7, #15]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	429a      	cmp	r2, r3
 800103c:	d3ad      	bcc.n	8000f9a <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800103e:	2300      	movs	r3, #0
 8001040:	73fb      	strb	r3, [r7, #15]
 8001042:	e044      	b.n	80010ce <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001044:	7bfa      	ldrb	r2, [r7, #15]
 8001046:	6879      	ldr	r1, [r7, #4]
 8001048:	4613      	mov	r3, r2
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	4413      	add	r3, r2
 800104e:	00db      	lsls	r3, r3, #3
 8001050:	440b      	add	r3, r1
 8001052:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001056:	2200      	movs	r2, #0
 8001058:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800105a:	7bfa      	ldrb	r2, [r7, #15]
 800105c:	6879      	ldr	r1, [r7, #4]
 800105e:	4613      	mov	r3, r2
 8001060:	009b      	lsls	r3, r3, #2
 8001062:	4413      	add	r3, r2
 8001064:	00db      	lsls	r3, r3, #3
 8001066:	440b      	add	r3, r1
 8001068:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800106c:	7bfa      	ldrb	r2, [r7, #15]
 800106e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001070:	7bfa      	ldrb	r2, [r7, #15]
 8001072:	6879      	ldr	r1, [r7, #4]
 8001074:	4613      	mov	r3, r2
 8001076:	009b      	lsls	r3, r3, #2
 8001078:	4413      	add	r3, r2
 800107a:	00db      	lsls	r3, r3, #3
 800107c:	440b      	add	r3, r1
 800107e:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001082:	2200      	movs	r2, #0
 8001084:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001086:	7bfa      	ldrb	r2, [r7, #15]
 8001088:	6879      	ldr	r1, [r7, #4]
 800108a:	4613      	mov	r3, r2
 800108c:	009b      	lsls	r3, r3, #2
 800108e:	4413      	add	r3, r2
 8001090:	00db      	lsls	r3, r3, #3
 8001092:	440b      	add	r3, r1
 8001094:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800109c:	7bfa      	ldrb	r2, [r7, #15]
 800109e:	6879      	ldr	r1, [r7, #4]
 80010a0:	4613      	mov	r3, r2
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	4413      	add	r3, r2
 80010a6:	00db      	lsls	r3, r3, #3
 80010a8:	440b      	add	r3, r1
 80010aa:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80010ae:	2200      	movs	r2, #0
 80010b0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80010b2:	7bfa      	ldrb	r2, [r7, #15]
 80010b4:	6879      	ldr	r1, [r7, #4]
 80010b6:	4613      	mov	r3, r2
 80010b8:	009b      	lsls	r3, r3, #2
 80010ba:	4413      	add	r3, r2
 80010bc:	00db      	lsls	r3, r3, #3
 80010be:	440b      	add	r3, r1
 80010c0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010c8:	7bfb      	ldrb	r3, [r7, #15]
 80010ca:	3301      	adds	r3, #1
 80010cc:	73fb      	strb	r3, [r7, #15]
 80010ce:	7bfa      	ldrb	r2, [r7, #15]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	429a      	cmp	r2, r3
 80010d6:	d3b5      	bcc.n	8001044 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	603b      	str	r3, [r7, #0]
 80010de:	687e      	ldr	r6, [r7, #4]
 80010e0:	466d      	mov	r5, sp
 80010e2:	f106 0410 	add.w	r4, r6, #16
 80010e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010ea:	6823      	ldr	r3, [r4, #0]
 80010ec:	602b      	str	r3, [r5, #0]
 80010ee:	1d33      	adds	r3, r6, #4
 80010f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010f2:	6838      	ldr	r0, [r7, #0]
 80010f4:	f003 fb96 	bl	8004824 <USB_DevInit>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d005      	beq.n	800110a <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2202      	movs	r2, #2
 8001102:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001106:	2301      	movs	r3, #1
 8001108:	e00d      	b.n	8001126 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2200      	movs	r2, #0
 800110e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2201      	movs	r2, #1
 8001116:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4618      	mov	r0, r3
 8001120:	f005 fd07 	bl	8006b32 <USB_DevDisconnect>

  return HAL_OK;
 8001124:	2300      	movs	r3, #0
}
 8001126:	4618      	mov	r0, r3
 8001128:	3714      	adds	r7, #20
 800112a:	46bd      	mov	sp, r7
 800112c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800112e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800112e:	b580      	push	{r7, lr}
 8001130:	b082      	sub	sp, #8
 8001132:	af00      	add	r7, sp, #0
 8001134:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800113c:	2b01      	cmp	r3, #1
 800113e:	d101      	bne.n	8001144 <HAL_PCD_Start+0x16>
 8001140:	2302      	movs	r3, #2
 8001142:	e016      	b.n	8001172 <HAL_PCD_Start+0x44>
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2201      	movs	r2, #1
 8001148:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4618      	mov	r0, r3
 8001152:	f003 fb2b 	bl	80047ac <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001156:	2101      	movs	r1, #1
 8001158:	6878      	ldr	r0, [r7, #4]
 800115a:	f007 fbf8 	bl	800894e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4618      	mov	r0, r3
 8001164:	f005 fcdb 	bl	8006b1e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2200      	movs	r2, #0
 800116c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001170:	2300      	movs	r3, #0
}
 8001172:	4618      	mov	r0, r3
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}

0800117a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800117a:	b580      	push	{r7, lr}
 800117c:	b088      	sub	sp, #32
 800117e:	af00      	add	r7, sp, #0
 8001180:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4618      	mov	r0, r3
 8001188:	f005 fcdd 	bl	8006b46 <USB_ReadInterrupts>
 800118c:	4603      	mov	r3, r0
 800118e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001192:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001196:	d102      	bne.n	800119e <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001198:	6878      	ldr	r0, [r7, #4]
 800119a:	f000 fb4a 	bl	8001832 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4618      	mov	r0, r3
 80011a4:	f005 fccf 	bl	8006b46 <USB_ReadInterrupts>
 80011a8:	4603      	mov	r3, r0
 80011aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011b2:	d112      	bne.n	80011da <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80011bc:	b29a      	uxth	r2, r3
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80011c6:	b292      	uxth	r2, r2
 80011c8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80011cc:	6878      	ldr	r0, [r7, #4]
 80011ce:	f007 f9e2 	bl	8008596 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80011d2:	2100      	movs	r1, #0
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f000 f925 	bl	8001424 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4618      	mov	r0, r3
 80011e0:	f005 fcb1 	bl	8006b46 <USB_ReadInterrupts>
 80011e4:	4603      	mov	r3, r0
 80011e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80011ee:	d10b      	bne.n	8001208 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80011f8:	b29a      	uxth	r2, r3
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001202:	b292      	uxth	r2, r2
 8001204:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4618      	mov	r0, r3
 800120e:	f005 fc9a 	bl	8006b46 <USB_ReadInterrupts>
 8001212:	4603      	mov	r3, r0
 8001214:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001218:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800121c:	d10b      	bne.n	8001236 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001226:	b29a      	uxth	r2, r3
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001230:	b292      	uxth	r2, r2
 8001232:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4618      	mov	r0, r3
 800123c:	f005 fc83 	bl	8006b46 <USB_ReadInterrupts>
 8001240:	4603      	mov	r3, r0
 8001242:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001246:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800124a:	d126      	bne.n	800129a <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001254:	b29a      	uxth	r2, r3
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f022 0204 	bic.w	r2, r2, #4
 800125e:	b292      	uxth	r2, r2
 8001260:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800126c:	b29a      	uxth	r2, r3
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f022 0208 	bic.w	r2, r2, #8
 8001276:	b292      	uxth	r2, r2
 8001278:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800127c:	6878      	ldr	r0, [r7, #4]
 800127e:	f007 f9c3 	bl	8008608 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800128a:	b29a      	uxth	r2, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001294:	b292      	uxth	r2, r2
 8001296:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4618      	mov	r0, r3
 80012a0:	f005 fc51 	bl	8006b46 <USB_ReadInterrupts>
 80012a4:	4603      	mov	r3, r0
 80012a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80012aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80012ae:	f040 8084 	bne.w	80013ba <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 80012b2:	2300      	movs	r3, #0
 80012b4:	77fb      	strb	r3, [r7, #31]
 80012b6:	e011      	b.n	80012dc <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	461a      	mov	r2, r3
 80012be:	7ffb      	ldrb	r3, [r7, #31]
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	441a      	add	r2, r3
 80012c4:	7ffb      	ldrb	r3, [r7, #31]
 80012c6:	8812      	ldrh	r2, [r2, #0]
 80012c8:	b292      	uxth	r2, r2
 80012ca:	005b      	lsls	r3, r3, #1
 80012cc:	f107 0120 	add.w	r1, r7, #32
 80012d0:	440b      	add	r3, r1
 80012d2:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 80012d6:	7ffb      	ldrb	r3, [r7, #31]
 80012d8:	3301      	adds	r3, #1
 80012da:	77fb      	strb	r3, [r7, #31]
 80012dc:	7ffb      	ldrb	r3, [r7, #31]
 80012de:	2b07      	cmp	r3, #7
 80012e0:	d9ea      	bls.n	80012b8 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80012ea:	b29a      	uxth	r2, r3
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f042 0201 	orr.w	r2, r2, #1
 80012f4:	b292      	uxth	r2, r2
 80012f6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001302:	b29a      	uxth	r2, r3
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f022 0201 	bic.w	r2, r2, #1
 800130c:	b292      	uxth	r2, r2
 800130e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001312:	bf00      	nop
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800131c:	b29b      	uxth	r3, r3
 800131e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001322:	2b00      	cmp	r3, #0
 8001324:	d0f6      	beq.n	8001314 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800132e:	b29a      	uxth	r2, r3
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001338:	b292      	uxth	r2, r2
 800133a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 800133e:	2300      	movs	r3, #0
 8001340:	77fb      	strb	r3, [r7, #31]
 8001342:	e010      	b.n	8001366 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001344:	7ffb      	ldrb	r3, [r7, #31]
 8001346:	687a      	ldr	r2, [r7, #4]
 8001348:	6812      	ldr	r2, [r2, #0]
 800134a:	4611      	mov	r1, r2
 800134c:	7ffa      	ldrb	r2, [r7, #31]
 800134e:	0092      	lsls	r2, r2, #2
 8001350:	440a      	add	r2, r1
 8001352:	005b      	lsls	r3, r3, #1
 8001354:	f107 0120 	add.w	r1, r7, #32
 8001358:	440b      	add	r3, r1
 800135a:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800135e:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001360:	7ffb      	ldrb	r3, [r7, #31]
 8001362:	3301      	adds	r3, #1
 8001364:	77fb      	strb	r3, [r7, #31]
 8001366:	7ffb      	ldrb	r3, [r7, #31]
 8001368:	2b07      	cmp	r3, #7
 800136a:	d9eb      	bls.n	8001344 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001374:	b29a      	uxth	r2, r3
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f042 0208 	orr.w	r2, r2, #8
 800137e:	b292      	uxth	r2, r2
 8001380:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800138c:	b29a      	uxth	r2, r3
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001396:	b292      	uxth	r2, r2
 8001398:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80013a4:	b29a      	uxth	r2, r3
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f042 0204 	orr.w	r2, r2, #4
 80013ae:	b292      	uxth	r2, r2
 80013b0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80013b4:	6878      	ldr	r0, [r7, #4]
 80013b6:	f007 f90d 	bl	80085d4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4618      	mov	r0, r3
 80013c0:	f005 fbc1 	bl	8006b46 <USB_ReadInterrupts>
 80013c4:	4603      	mov	r3, r0
 80013c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80013ce:	d10e      	bne.n	80013ee <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80013d8:	b29a      	uxth	r2, r3
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80013e2:	b292      	uxth	r2, r2
 80013e4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80013e8:	6878      	ldr	r0, [r7, #4]
 80013ea:	f007 f8c6 	bl	800857a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4618      	mov	r0, r3
 80013f4:	f005 fba7 	bl	8006b46 <USB_ReadInterrupts>
 80013f8:	4603      	mov	r3, r0
 80013fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001402:	d10b      	bne.n	800141c <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800140c:	b29a      	uxth	r2, r3
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001416:	b292      	uxth	r2, r2
 8001418:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800141c:	bf00      	nop
 800141e:	3720      	adds	r7, #32
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}

08001424 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	460b      	mov	r3, r1
 800142e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001436:	2b01      	cmp	r3, #1
 8001438:	d101      	bne.n	800143e <HAL_PCD_SetAddress+0x1a>
 800143a:	2302      	movs	r3, #2
 800143c:	e013      	b.n	8001466 <HAL_PCD_SetAddress+0x42>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2201      	movs	r2, #1
 8001442:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	78fa      	ldrb	r2, [r7, #3]
 800144a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	78fa      	ldrb	r2, [r7, #3]
 8001454:	4611      	mov	r1, r2
 8001456:	4618      	mov	r0, r3
 8001458:	f005 fb4e 	bl	8006af8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2200      	movs	r2, #0
 8001460:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001464:	2300      	movs	r3, #0
}
 8001466:	4618      	mov	r0, r3
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}

0800146e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800146e:	b580      	push	{r7, lr}
 8001470:	b084      	sub	sp, #16
 8001472:	af00      	add	r7, sp, #0
 8001474:	6078      	str	r0, [r7, #4]
 8001476:	4608      	mov	r0, r1
 8001478:	4611      	mov	r1, r2
 800147a:	461a      	mov	r2, r3
 800147c:	4603      	mov	r3, r0
 800147e:	70fb      	strb	r3, [r7, #3]
 8001480:	460b      	mov	r3, r1
 8001482:	803b      	strh	r3, [r7, #0]
 8001484:	4613      	mov	r3, r2
 8001486:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001488:	2300      	movs	r3, #0
 800148a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800148c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001490:	2b00      	cmp	r3, #0
 8001492:	da0e      	bge.n	80014b2 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001494:	78fb      	ldrb	r3, [r7, #3]
 8001496:	f003 0307 	and.w	r3, r3, #7
 800149a:	1c5a      	adds	r2, r3, #1
 800149c:	4613      	mov	r3, r2
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	4413      	add	r3, r2
 80014a2:	00db      	lsls	r3, r3, #3
 80014a4:	687a      	ldr	r2, [r7, #4]
 80014a6:	4413      	add	r3, r2
 80014a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	2201      	movs	r2, #1
 80014ae:	705a      	strb	r2, [r3, #1]
 80014b0:	e00e      	b.n	80014d0 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80014b2:	78fb      	ldrb	r3, [r7, #3]
 80014b4:	f003 0207 	and.w	r2, r3, #7
 80014b8:	4613      	mov	r3, r2
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	4413      	add	r3, r2
 80014be:	00db      	lsls	r3, r3, #3
 80014c0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80014c4:	687a      	ldr	r2, [r7, #4]
 80014c6:	4413      	add	r3, r2
 80014c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	2200      	movs	r2, #0
 80014ce:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80014d0:	78fb      	ldrb	r3, [r7, #3]
 80014d2:	f003 0307 	and.w	r3, r3, #7
 80014d6:	b2da      	uxtb	r2, r3
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80014dc:	883a      	ldrh	r2, [r7, #0]
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	78ba      	ldrb	r2, [r7, #2]
 80014e6:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	785b      	ldrb	r3, [r3, #1]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d004      	beq.n	80014fa <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	b29a      	uxth	r2, r3
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80014fa:	78bb      	ldrb	r3, [r7, #2]
 80014fc:	2b02      	cmp	r3, #2
 80014fe:	d102      	bne.n	8001506 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	2200      	movs	r2, #0
 8001504:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800150c:	2b01      	cmp	r3, #1
 800150e:	d101      	bne.n	8001514 <HAL_PCD_EP_Open+0xa6>
 8001510:	2302      	movs	r3, #2
 8001512:	e00e      	b.n	8001532 <HAL_PCD_EP_Open+0xc4>
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2201      	movs	r2, #1
 8001518:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	68f9      	ldr	r1, [r7, #12]
 8001522:	4618      	mov	r0, r3
 8001524:	f003 f99e 	bl	8004864 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2200      	movs	r2, #0
 800152c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001530:	7afb      	ldrb	r3, [r7, #11]
}
 8001532:	4618      	mov	r0, r3
 8001534:	3710      	adds	r7, #16
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}

0800153a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800153a:	b580      	push	{r7, lr}
 800153c:	b084      	sub	sp, #16
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]
 8001542:	460b      	mov	r3, r1
 8001544:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001546:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800154a:	2b00      	cmp	r3, #0
 800154c:	da0e      	bge.n	800156c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800154e:	78fb      	ldrb	r3, [r7, #3]
 8001550:	f003 0307 	and.w	r3, r3, #7
 8001554:	1c5a      	adds	r2, r3, #1
 8001556:	4613      	mov	r3, r2
 8001558:	009b      	lsls	r3, r3, #2
 800155a:	4413      	add	r3, r2
 800155c:	00db      	lsls	r3, r3, #3
 800155e:	687a      	ldr	r2, [r7, #4]
 8001560:	4413      	add	r3, r2
 8001562:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	2201      	movs	r2, #1
 8001568:	705a      	strb	r2, [r3, #1]
 800156a:	e00e      	b.n	800158a <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800156c:	78fb      	ldrb	r3, [r7, #3]
 800156e:	f003 0207 	and.w	r2, r3, #7
 8001572:	4613      	mov	r3, r2
 8001574:	009b      	lsls	r3, r3, #2
 8001576:	4413      	add	r3, r2
 8001578:	00db      	lsls	r3, r3, #3
 800157a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800157e:	687a      	ldr	r2, [r7, #4]
 8001580:	4413      	add	r3, r2
 8001582:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	2200      	movs	r2, #0
 8001588:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800158a:	78fb      	ldrb	r3, [r7, #3]
 800158c:	f003 0307 	and.w	r3, r3, #7
 8001590:	b2da      	uxtb	r2, r3
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800159c:	2b01      	cmp	r3, #1
 800159e:	d101      	bne.n	80015a4 <HAL_PCD_EP_Close+0x6a>
 80015a0:	2302      	movs	r3, #2
 80015a2:	e00e      	b.n	80015c2 <HAL_PCD_EP_Close+0x88>
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2201      	movs	r2, #1
 80015a8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	68f9      	ldr	r1, [r7, #12]
 80015b2:	4618      	mov	r0, r3
 80015b4:	f003 fcc0 	bl	8004f38 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2200      	movs	r2, #0
 80015bc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80015c0:	2300      	movs	r3, #0
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3710      	adds	r7, #16
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}

080015ca <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80015ca:	b580      	push	{r7, lr}
 80015cc:	b086      	sub	sp, #24
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	60f8      	str	r0, [r7, #12]
 80015d2:	607a      	str	r2, [r7, #4]
 80015d4:	603b      	str	r3, [r7, #0]
 80015d6:	460b      	mov	r3, r1
 80015d8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80015da:	7afb      	ldrb	r3, [r7, #11]
 80015dc:	f003 0207 	and.w	r2, r3, #7
 80015e0:	4613      	mov	r3, r2
 80015e2:	009b      	lsls	r3, r3, #2
 80015e4:	4413      	add	r3, r2
 80015e6:	00db      	lsls	r3, r3, #3
 80015e8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80015ec:	68fa      	ldr	r2, [r7, #12]
 80015ee:	4413      	add	r3, r2
 80015f0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	687a      	ldr	r2, [r7, #4]
 80015f6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	683a      	ldr	r2, [r7, #0]
 80015fc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	2200      	movs	r2, #0
 8001602:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	2200      	movs	r2, #0
 8001608:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800160a:	7afb      	ldrb	r3, [r7, #11]
 800160c:	f003 0307 	and.w	r3, r3, #7
 8001610:	b2da      	uxtb	r2, r3
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001616:	7afb      	ldrb	r3, [r7, #11]
 8001618:	f003 0307 	and.w	r3, r3, #7
 800161c:	2b00      	cmp	r3, #0
 800161e:	d106      	bne.n	800162e <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	6979      	ldr	r1, [r7, #20]
 8001626:	4618      	mov	r0, r3
 8001628:	f003 fe72 	bl	8005310 <USB_EPStartXfer>
 800162c:	e005      	b.n	800163a <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	6979      	ldr	r1, [r7, #20]
 8001634:	4618      	mov	r0, r3
 8001636:	f003 fe6b 	bl	8005310 <USB_EPStartXfer>
  }

  return HAL_OK;
 800163a:	2300      	movs	r3, #0
}
 800163c:	4618      	mov	r0, r3
 800163e:	3718      	adds	r7, #24
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}

08001644 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b086      	sub	sp, #24
 8001648:	af00      	add	r7, sp, #0
 800164a:	60f8      	str	r0, [r7, #12]
 800164c:	607a      	str	r2, [r7, #4]
 800164e:	603b      	str	r3, [r7, #0]
 8001650:	460b      	mov	r3, r1
 8001652:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001654:	7afb      	ldrb	r3, [r7, #11]
 8001656:	f003 0307 	and.w	r3, r3, #7
 800165a:	1c5a      	adds	r2, r3, #1
 800165c:	4613      	mov	r3, r2
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	4413      	add	r3, r2
 8001662:	00db      	lsls	r3, r3, #3
 8001664:	68fa      	ldr	r2, [r7, #12]
 8001666:	4413      	add	r3, r2
 8001668:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	687a      	ldr	r2, [r7, #4]
 800166e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	683a      	ldr	r2, [r7, #0]
 8001674:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	2201      	movs	r2, #1
 800167a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	683a      	ldr	r2, [r7, #0]
 8001682:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	2200      	movs	r2, #0
 8001688:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	2201      	movs	r2, #1
 800168e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001690:	7afb      	ldrb	r3, [r7, #11]
 8001692:	f003 0307 	and.w	r3, r3, #7
 8001696:	b2da      	uxtb	r2, r3
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800169c:	7afb      	ldrb	r3, [r7, #11]
 800169e:	f003 0307 	and.w	r3, r3, #7
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d106      	bne.n	80016b4 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	6979      	ldr	r1, [r7, #20]
 80016ac:	4618      	mov	r0, r3
 80016ae:	f003 fe2f 	bl	8005310 <USB_EPStartXfer>
 80016b2:	e005      	b.n	80016c0 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	6979      	ldr	r1, [r7, #20]
 80016ba:	4618      	mov	r0, r3
 80016bc:	f003 fe28 	bl	8005310 <USB_EPStartXfer>
  }

  return HAL_OK;
 80016c0:	2300      	movs	r3, #0
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3718      	adds	r7, #24
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}

080016ca <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80016ca:	b580      	push	{r7, lr}
 80016cc:	b084      	sub	sp, #16
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	6078      	str	r0, [r7, #4]
 80016d2:	460b      	mov	r3, r1
 80016d4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80016d6:	78fb      	ldrb	r3, [r7, #3]
 80016d8:	f003 0207 	and.w	r2, r3, #7
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	429a      	cmp	r2, r3
 80016e2:	d901      	bls.n	80016e8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
 80016e6:	e04c      	b.n	8001782 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80016e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	da0e      	bge.n	800170e <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80016f0:	78fb      	ldrb	r3, [r7, #3]
 80016f2:	f003 0307 	and.w	r3, r3, #7
 80016f6:	1c5a      	adds	r2, r3, #1
 80016f8:	4613      	mov	r3, r2
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	4413      	add	r3, r2
 80016fe:	00db      	lsls	r3, r3, #3
 8001700:	687a      	ldr	r2, [r7, #4]
 8001702:	4413      	add	r3, r2
 8001704:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	2201      	movs	r2, #1
 800170a:	705a      	strb	r2, [r3, #1]
 800170c:	e00c      	b.n	8001728 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800170e:	78fa      	ldrb	r2, [r7, #3]
 8001710:	4613      	mov	r3, r2
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	4413      	add	r3, r2
 8001716:	00db      	lsls	r3, r3, #3
 8001718:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800171c:	687a      	ldr	r2, [r7, #4]
 800171e:	4413      	add	r3, r2
 8001720:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	2200      	movs	r2, #0
 8001726:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	2201      	movs	r2, #1
 800172c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800172e:	78fb      	ldrb	r3, [r7, #3]
 8001730:	f003 0307 	and.w	r3, r3, #7
 8001734:	b2da      	uxtb	r2, r3
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001740:	2b01      	cmp	r3, #1
 8001742:	d101      	bne.n	8001748 <HAL_PCD_EP_SetStall+0x7e>
 8001744:	2302      	movs	r3, #2
 8001746:	e01c      	b.n	8001782 <HAL_PCD_EP_SetStall+0xb8>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2201      	movs	r2, #1
 800174c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	68f9      	ldr	r1, [r7, #12]
 8001756:	4618      	mov	r0, r3
 8001758:	f005 f8d1 	bl	80068fe <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800175c:	78fb      	ldrb	r3, [r7, #3]
 800175e:	f003 0307 	and.w	r3, r3, #7
 8001762:	2b00      	cmp	r3, #0
 8001764:	d108      	bne.n	8001778 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001770:	4619      	mov	r1, r3
 8001772:	4610      	mov	r0, r2
 8001774:	f005 f9f6 	bl	8006b64 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2200      	movs	r2, #0
 800177c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001780:	2300      	movs	r3, #0
}
 8001782:	4618      	mov	r0, r3
 8001784:	3710      	adds	r7, #16
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}

0800178a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800178a:	b580      	push	{r7, lr}
 800178c:	b084      	sub	sp, #16
 800178e:	af00      	add	r7, sp, #0
 8001790:	6078      	str	r0, [r7, #4]
 8001792:	460b      	mov	r3, r1
 8001794:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001796:	78fb      	ldrb	r3, [r7, #3]
 8001798:	f003 020f 	and.w	r2, r3, #15
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d901      	bls.n	80017a8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	e040      	b.n	800182a <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80017a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	da0e      	bge.n	80017ce <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80017b0:	78fb      	ldrb	r3, [r7, #3]
 80017b2:	f003 0307 	and.w	r3, r3, #7
 80017b6:	1c5a      	adds	r2, r3, #1
 80017b8:	4613      	mov	r3, r2
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	4413      	add	r3, r2
 80017be:	00db      	lsls	r3, r3, #3
 80017c0:	687a      	ldr	r2, [r7, #4]
 80017c2:	4413      	add	r3, r2
 80017c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	2201      	movs	r2, #1
 80017ca:	705a      	strb	r2, [r3, #1]
 80017cc:	e00e      	b.n	80017ec <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80017ce:	78fb      	ldrb	r3, [r7, #3]
 80017d0:	f003 0207 	and.w	r2, r3, #7
 80017d4:	4613      	mov	r3, r2
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	4413      	add	r3, r2
 80017da:	00db      	lsls	r3, r3, #3
 80017dc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80017e0:	687a      	ldr	r2, [r7, #4]
 80017e2:	4413      	add	r3, r2
 80017e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	2200      	movs	r2, #0
 80017ea:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	2200      	movs	r2, #0
 80017f0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80017f2:	78fb      	ldrb	r3, [r7, #3]
 80017f4:	f003 0307 	and.w	r3, r3, #7
 80017f8:	b2da      	uxtb	r2, r3
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001804:	2b01      	cmp	r3, #1
 8001806:	d101      	bne.n	800180c <HAL_PCD_EP_ClrStall+0x82>
 8001808:	2302      	movs	r3, #2
 800180a:	e00e      	b.n	800182a <HAL_PCD_EP_ClrStall+0xa0>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2201      	movs	r2, #1
 8001810:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	68f9      	ldr	r1, [r7, #12]
 800181a:	4618      	mov	r0, r3
 800181c:	f005 f8bf 	bl	800699e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2200      	movs	r2, #0
 8001824:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001828:	2300      	movs	r3, #0
}
 800182a:	4618      	mov	r0, r3
 800182c:	3710      	adds	r7, #16
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}

08001832 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001832:	b580      	push	{r7, lr}
 8001834:	b08e      	sub	sp, #56	; 0x38
 8001836:	af00      	add	r7, sp, #0
 8001838:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800183a:	e2ec      	b.n	8001e16 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001844:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001846:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001848:	b2db      	uxtb	r3, r3
 800184a:	f003 030f 	and.w	r3, r3, #15
 800184e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001852:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001856:	2b00      	cmp	r3, #0
 8001858:	f040 8161 	bne.w	8001b1e <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800185c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800185e:	f003 0310 	and.w	r3, r3, #16
 8001862:	2b00      	cmp	r3, #0
 8001864:	d152      	bne.n	800190c <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	881b      	ldrh	r3, [r3, #0]
 800186c:	b29b      	uxth	r3, r3
 800186e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001872:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001876:	81fb      	strh	r3, [r7, #14]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	89fb      	ldrh	r3, [r7, #14]
 800187e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001882:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001886:	b29b      	uxth	r3, r3
 8001888:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	3328      	adds	r3, #40	; 0x28
 800188e:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001898:	b29b      	uxth	r3, r3
 800189a:	461a      	mov	r2, r3
 800189c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	00db      	lsls	r3, r3, #3
 80018a2:	4413      	add	r3, r2
 80018a4:	3302      	adds	r3, #2
 80018a6:	005b      	lsls	r3, r3, #1
 80018a8:	687a      	ldr	r2, [r7, #4]
 80018aa:	6812      	ldr	r2, [r2, #0]
 80018ac:	4413      	add	r3, r2
 80018ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80018b2:	881b      	ldrh	r3, [r3, #0]
 80018b4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80018b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ba:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80018bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018be:	695a      	ldr	r2, [r3, #20]
 80018c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c2:	69db      	ldr	r3, [r3, #28]
 80018c4:	441a      	add	r2, r3
 80018c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c8:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80018ca:	2100      	movs	r1, #0
 80018cc:	6878      	ldr	r0, [r7, #4]
 80018ce:	f006 fe3a 	bl	8008546 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	2b00      	cmp	r3, #0
 80018dc:	f000 829b 	beq.w	8001e16 <PCD_EP_ISR_Handler+0x5e4>
 80018e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e2:	699b      	ldr	r3, [r3, #24]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	f040 8296 	bne.w	8001e16 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80018f6:	b2da      	uxtb	r2, r3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	b292      	uxth	r2, r2
 80018fe:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2200      	movs	r2, #0
 8001906:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800190a:	e284      	b.n	8001e16 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001912:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	881b      	ldrh	r3, [r3, #0]
 800191a:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800191c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800191e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001922:	2b00      	cmp	r3, #0
 8001924:	d034      	beq.n	8001990 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800192e:	b29b      	uxth	r3, r3
 8001930:	461a      	mov	r2, r3
 8001932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	00db      	lsls	r3, r3, #3
 8001938:	4413      	add	r3, r2
 800193a:	3306      	adds	r3, #6
 800193c:	005b      	lsls	r3, r3, #1
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	6812      	ldr	r2, [r2, #0]
 8001942:	4413      	add	r3, r2
 8001944:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001948:	881b      	ldrh	r3, [r3, #0]
 800194a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800194e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001950:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6818      	ldr	r0, [r3, #0]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800195c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001962:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001964:	b29b      	uxth	r3, r3
 8001966:	f005 f94d 	bl	8006c04 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	881b      	ldrh	r3, [r3, #0]
 8001970:	b29a      	uxth	r2, r3
 8001972:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001976:	4013      	ands	r3, r2
 8001978:	823b      	strh	r3, [r7, #16]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	8a3a      	ldrh	r2, [r7, #16]
 8001980:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001984:	b292      	uxth	r2, r2
 8001986:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	f006 fdaf 	bl	80084ec <HAL_PCD_SetupStageCallback>
 800198e:	e242      	b.n	8001e16 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001990:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001994:	2b00      	cmp	r3, #0
 8001996:	f280 823e 	bge.w	8001e16 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	881b      	ldrh	r3, [r3, #0]
 80019a0:	b29a      	uxth	r2, r3
 80019a2:	f640 738f 	movw	r3, #3983	; 0xf8f
 80019a6:	4013      	ands	r3, r2
 80019a8:	83bb      	strh	r3, [r7, #28]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	8bba      	ldrh	r2, [r7, #28]
 80019b0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80019b4:	b292      	uxth	r2, r2
 80019b6:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80019c0:	b29b      	uxth	r3, r3
 80019c2:	461a      	mov	r2, r3
 80019c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	00db      	lsls	r3, r3, #3
 80019ca:	4413      	add	r3, r2
 80019cc:	3306      	adds	r3, #6
 80019ce:	005b      	lsls	r3, r3, #1
 80019d0:	687a      	ldr	r2, [r7, #4]
 80019d2:	6812      	ldr	r2, [r2, #0]
 80019d4:	4413      	add	r3, r2
 80019d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80019da:	881b      	ldrh	r3, [r3, #0]
 80019dc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80019e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e2:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80019e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e6:	69db      	ldr	r3, [r3, #28]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d019      	beq.n	8001a20 <PCD_EP_ISR_Handler+0x1ee>
 80019ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ee:	695b      	ldr	r3, [r3, #20]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d015      	beq.n	8001a20 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6818      	ldr	r0, [r3, #0]
 80019f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fa:	6959      	ldr	r1, [r3, #20]
 80019fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fe:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a02:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001a04:	b29b      	uxth	r3, r3
 8001a06:	f005 f8fd 	bl	8006c04 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a0c:	695a      	ldr	r2, [r3, #20]
 8001a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a10:	69db      	ldr	r3, [r3, #28]
 8001a12:	441a      	add	r2, r3
 8001a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a16:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001a18:	2100      	movs	r1, #0
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f006 fd78 	bl	8008510 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	881b      	ldrh	r3, [r3, #0]
 8001a26:	b29b      	uxth	r3, r3
 8001a28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	f040 81f2 	bne.w	8001e16 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	61bb      	str	r3, [r7, #24]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a40:	b29b      	uxth	r3, r3
 8001a42:	461a      	mov	r2, r3
 8001a44:	69bb      	ldr	r3, [r7, #24]
 8001a46:	4413      	add	r3, r2
 8001a48:	61bb      	str	r3, [r7, #24]
 8001a4a:	69bb      	ldr	r3, [r7, #24]
 8001a4c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001a50:	617b      	str	r3, [r7, #20]
 8001a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a54:	691b      	ldr	r3, [r3, #16]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d112      	bne.n	8001a80 <PCD_EP_ISR_Handler+0x24e>
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	881b      	ldrh	r3, [r3, #0]
 8001a5e:	b29b      	uxth	r3, r3
 8001a60:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001a64:	b29a      	uxth	r2, r3
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	801a      	strh	r2, [r3, #0]
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	881b      	ldrh	r3, [r3, #0]
 8001a6e:	b29b      	uxth	r3, r3
 8001a70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001a74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001a78:	b29a      	uxth	r2, r3
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	801a      	strh	r2, [r3, #0]
 8001a7e:	e02f      	b.n	8001ae0 <PCD_EP_ISR_Handler+0x2ae>
 8001a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a82:	691b      	ldr	r3, [r3, #16]
 8001a84:	2b3e      	cmp	r3, #62	; 0x3e
 8001a86:	d813      	bhi.n	8001ab0 <PCD_EP_ISR_Handler+0x27e>
 8001a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8a:	691b      	ldr	r3, [r3, #16]
 8001a8c:	085b      	lsrs	r3, r3, #1
 8001a8e:	633b      	str	r3, [r7, #48]	; 0x30
 8001a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a92:	691b      	ldr	r3, [r3, #16]
 8001a94:	f003 0301 	and.w	r3, r3, #1
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d002      	beq.n	8001aa2 <PCD_EP_ISR_Handler+0x270>
 8001a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	633b      	str	r3, [r7, #48]	; 0x30
 8001aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001aa4:	b29b      	uxth	r3, r3
 8001aa6:	029b      	lsls	r3, r3, #10
 8001aa8:	b29a      	uxth	r2, r3
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	801a      	strh	r2, [r3, #0]
 8001aae:	e017      	b.n	8001ae0 <PCD_EP_ISR_Handler+0x2ae>
 8001ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab2:	691b      	ldr	r3, [r3, #16]
 8001ab4:	095b      	lsrs	r3, r3, #5
 8001ab6:	633b      	str	r3, [r7, #48]	; 0x30
 8001ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aba:	691b      	ldr	r3, [r3, #16]
 8001abc:	f003 031f 	and.w	r3, r3, #31
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d102      	bne.n	8001aca <PCD_EP_ISR_Handler+0x298>
 8001ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ac6:	3b01      	subs	r3, #1
 8001ac8:	633b      	str	r3, [r7, #48]	; 0x30
 8001aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001acc:	b29b      	uxth	r3, r3
 8001ace:	029b      	lsls	r3, r3, #10
 8001ad0:	b29b      	uxth	r3, r3
 8001ad2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ad6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ada:	b29a      	uxth	r2, r3
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	881b      	ldrh	r3, [r3, #0]
 8001ae6:	b29b      	uxth	r3, r3
 8001ae8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001aec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001af0:	827b      	strh	r3, [r7, #18]
 8001af2:	8a7b      	ldrh	r3, [r7, #18]
 8001af4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001af8:	827b      	strh	r3, [r7, #18]
 8001afa:	8a7b      	ldrh	r3, [r7, #18]
 8001afc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001b00:	827b      	strh	r3, [r7, #18]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	8a7b      	ldrh	r3, [r7, #18]
 8001b08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001b0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001b10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b18:	b29b      	uxth	r3, r3
 8001b1a:	8013      	strh	r3, [r2, #0]
 8001b1c:	e17b      	b.n	8001e16 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	461a      	mov	r2, r3
 8001b24:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	4413      	add	r3, r2
 8001b2c:	881b      	ldrh	r3, [r3, #0]
 8001b2e:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001b30:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	f280 80ea 	bge.w	8001d0e <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	461a      	mov	r2, r3
 8001b40:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	4413      	add	r3, r2
 8001b48:	881b      	ldrh	r3, [r3, #0]
 8001b4a:	b29a      	uxth	r2, r3
 8001b4c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001b50:	4013      	ands	r3, r2
 8001b52:	853b      	strh	r3, [r7, #40]	; 0x28
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	461a      	mov	r2, r3
 8001b5a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	4413      	add	r3, r2
 8001b62:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001b64:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001b68:	b292      	uxth	r2, r2
 8001b6a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001b6c:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001b70:	4613      	mov	r3, r2
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	4413      	add	r3, r2
 8001b76:	00db      	lsls	r3, r3, #3
 8001b78:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	4413      	add	r3, r2
 8001b80:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b84:	7b1b      	ldrb	r3, [r3, #12]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d122      	bne.n	8001bd0 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b92:	b29b      	uxth	r3, r3
 8001b94:	461a      	mov	r2, r3
 8001b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	00db      	lsls	r3, r3, #3
 8001b9c:	4413      	add	r3, r2
 8001b9e:	3306      	adds	r3, #6
 8001ba0:	005b      	lsls	r3, r3, #1
 8001ba2:	687a      	ldr	r2, [r7, #4]
 8001ba4:	6812      	ldr	r2, [r2, #0]
 8001ba6:	4413      	add	r3, r2
 8001ba8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001bac:	881b      	ldrh	r3, [r3, #0]
 8001bae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001bb2:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8001bb4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	f000 8087 	beq.w	8001cca <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6818      	ldr	r0, [r3, #0]
 8001bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc2:	6959      	ldr	r1, [r3, #20]
 8001bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc6:	88da      	ldrh	r2, [r3, #6]
 8001bc8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001bca:	f005 f81b 	bl	8006c04 <USB_ReadPMA>
 8001bce:	e07c      	b.n	8001cca <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd2:	78db      	ldrb	r3, [r3, #3]
 8001bd4:	2b02      	cmp	r3, #2
 8001bd6:	d108      	bne.n	8001bea <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001bd8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001bda:	461a      	mov	r2, r3
 8001bdc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f000 f927 	bl	8001e32 <HAL_PCD_EP_DB_Receive>
 8001be4:	4603      	mov	r3, r0
 8001be6:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001be8:	e06f      	b.n	8001cca <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	461a      	mov	r2, r3
 8001bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	4413      	add	r3, r2
 8001bf8:	881b      	ldrh	r3, [r3, #0]
 8001bfa:	b29b      	uxth	r3, r3
 8001bfc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001c00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c04:	847b      	strh	r3, [r7, #34]	; 0x22
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	441a      	add	r2, r3
 8001c14:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001c16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001c1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001c1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c22:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001c26:	b29b      	uxth	r3, r3
 8001c28:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	461a      	mov	r2, r3
 8001c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	4413      	add	r3, r2
 8001c38:	881b      	ldrh	r3, [r3, #0]
 8001c3a:	b29b      	uxth	r3, r3
 8001c3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d021      	beq.n	8001c88 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c4c:	b29b      	uxth	r3, r3
 8001c4e:	461a      	mov	r2, r3
 8001c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	00db      	lsls	r3, r3, #3
 8001c56:	4413      	add	r3, r2
 8001c58:	3302      	adds	r3, #2
 8001c5a:	005b      	lsls	r3, r3, #1
 8001c5c:	687a      	ldr	r2, [r7, #4]
 8001c5e:	6812      	ldr	r2, [r2, #0]
 8001c60:	4413      	add	r3, r2
 8001c62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c66:	881b      	ldrh	r3, [r3, #0]
 8001c68:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c6c:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001c6e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d02a      	beq.n	8001cca <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6818      	ldr	r0, [r3, #0]
 8001c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7a:	6959      	ldr	r1, [r3, #20]
 8001c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7e:	891a      	ldrh	r2, [r3, #8]
 8001c80:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001c82:	f004 ffbf 	bl	8006c04 <USB_ReadPMA>
 8001c86:	e020      	b.n	8001cca <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c90:	b29b      	uxth	r3, r3
 8001c92:	461a      	mov	r2, r3
 8001c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	00db      	lsls	r3, r3, #3
 8001c9a:	4413      	add	r3, r2
 8001c9c:	3306      	adds	r3, #6
 8001c9e:	005b      	lsls	r3, r3, #1
 8001ca0:	687a      	ldr	r2, [r7, #4]
 8001ca2:	6812      	ldr	r2, [r2, #0]
 8001ca4:	4413      	add	r3, r2
 8001ca6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001caa:	881b      	ldrh	r3, [r3, #0]
 8001cac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001cb0:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001cb2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d008      	beq.n	8001cca <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6818      	ldr	r0, [r3, #0]
 8001cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cbe:	6959      	ldr	r1, [r3, #20]
 8001cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc2:	895a      	ldrh	r2, [r3, #10]
 8001cc4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001cc6:	f004 ff9d 	bl	8006c04 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ccc:	69da      	ldr	r2, [r3, #28]
 8001cce:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001cd0:	441a      	add	r2, r3
 8001cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd8:	695a      	ldr	r2, [r3, #20]
 8001cda:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001cdc:	441a      	add	r2, r3
 8001cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce0:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce4:	699b      	ldr	r3, [r3, #24]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d004      	beq.n	8001cf4 <PCD_EP_ISR_Handler+0x4c2>
 8001cea:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cee:	691b      	ldr	r3, [r3, #16]
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d206      	bcs.n	8001d02 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f006 fc08 	bl	8008510 <HAL_PCD_DataOutStageCallback>
 8001d00:	e005      	b.n	8001d0e <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f003 fb01 	bl	8005310 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001d0e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001d10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d07e      	beq.n	8001e16 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8001d18:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001d1c:	1c5a      	adds	r2, r3, #1
 8001d1e:	4613      	mov	r3, r2
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	4413      	add	r3, r2
 8001d24:	00db      	lsls	r3, r3, #3
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	4413      	add	r3, r2
 8001d2a:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	461a      	mov	r2, r3
 8001d32:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	4413      	add	r3, r2
 8001d3a:	881b      	ldrh	r3, [r3, #0]
 8001d3c:	b29b      	uxth	r3, r3
 8001d3e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001d42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d46:	843b      	strh	r3, [r7, #32]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	441a      	add	r2, r3
 8001d56:	8c3b      	ldrh	r3, [r7, #32]
 8001d58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d60:	b29b      	uxth	r3, r3
 8001d62:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8001d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d66:	78db      	ldrb	r3, [r3, #3]
 8001d68:	2b03      	cmp	r3, #3
 8001d6a:	d00c      	beq.n	8001d86 <PCD_EP_ISR_Handler+0x554>
 8001d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6e:	78db      	ldrb	r3, [r3, #3]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d008      	beq.n	8001d86 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d76:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d146      	bne.n	8001e0a <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001d7c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001d7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d141      	bne.n	8001e0a <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d8e:	b29b      	uxth	r3, r3
 8001d90:	461a      	mov	r2, r3
 8001d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	00db      	lsls	r3, r3, #3
 8001d98:	4413      	add	r3, r2
 8001d9a:	3302      	adds	r3, #2
 8001d9c:	005b      	lsls	r3, r3, #1
 8001d9e:	687a      	ldr	r2, [r7, #4]
 8001da0:	6812      	ldr	r2, [r2, #0]
 8001da2:	4413      	add	r3, r2
 8001da4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001da8:	881b      	ldrh	r3, [r3, #0]
 8001daa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001dae:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8001db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db2:	699a      	ldr	r2, [r3, #24]
 8001db4:	8bfb      	ldrh	r3, [r7, #30]
 8001db6:	429a      	cmp	r2, r3
 8001db8:	d906      	bls.n	8001dc8 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8001dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dbc:	699a      	ldr	r2, [r3, #24]
 8001dbe:	8bfb      	ldrh	r3, [r7, #30]
 8001dc0:	1ad2      	subs	r2, r2, r3
 8001dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc4:	619a      	str	r2, [r3, #24]
 8001dc6:	e002      	b.n	8001dce <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8001dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dca:	2200      	movs	r2, #0
 8001dcc:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8001dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd0:	699b      	ldr	r3, [r3, #24]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d106      	bne.n	8001de4 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	4619      	mov	r1, r3
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f006 fbb2 	bl	8008546 <HAL_PCD_DataInStageCallback>
 8001de2:	e018      	b.n	8001e16 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8001de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de6:	695a      	ldr	r2, [r3, #20]
 8001de8:	8bfb      	ldrh	r3, [r7, #30]
 8001dea:	441a      	add	r2, r3
 8001dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dee:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8001df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df2:	69da      	ldr	r2, [r3, #28]
 8001df4:	8bfb      	ldrh	r3, [r7, #30]
 8001df6:	441a      	add	r2, r3
 8001df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfa:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e02:	4618      	mov	r0, r3
 8001e04:	f003 fa84 	bl	8005310 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8001e08:	e005      	b.n	8001e16 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001e0a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	f000 f91b 	bl	800204c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e1e:	b29b      	uxth	r3, r3
 8001e20:	b21b      	sxth	r3, r3
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	f6ff ad0a 	blt.w	800183c <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001e28:	2300      	movs	r3, #0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3738      	adds	r7, #56	; 0x38
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001e32:	b580      	push	{r7, lr}
 8001e34:	b088      	sub	sp, #32
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	60f8      	str	r0, [r7, #12]
 8001e3a:	60b9      	str	r1, [r7, #8]
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001e40:	88fb      	ldrh	r3, [r7, #6]
 8001e42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d07e      	beq.n	8001f48 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e52:	b29b      	uxth	r3, r3
 8001e54:	461a      	mov	r2, r3
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	00db      	lsls	r3, r3, #3
 8001e5c:	4413      	add	r3, r2
 8001e5e:	3302      	adds	r3, #2
 8001e60:	005b      	lsls	r3, r3, #1
 8001e62:	68fa      	ldr	r2, [r7, #12]
 8001e64:	6812      	ldr	r2, [r2, #0]
 8001e66:	4413      	add	r3, r2
 8001e68:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e6c:	881b      	ldrh	r3, [r3, #0]
 8001e6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e72:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	699a      	ldr	r2, [r3, #24]
 8001e78:	8b7b      	ldrh	r3, [r7, #26]
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	d306      	bcc.n	8001e8c <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	699a      	ldr	r2, [r3, #24]
 8001e82:	8b7b      	ldrh	r3, [r7, #26]
 8001e84:	1ad2      	subs	r2, r2, r3
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	619a      	str	r2, [r3, #24]
 8001e8a:	e002      	b.n	8001e92 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	699b      	ldr	r3, [r3, #24]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d123      	bne.n	8001ee2 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	4413      	add	r3, r2
 8001ea8:	881b      	ldrh	r3, [r3, #0]
 8001eaa:	b29b      	uxth	r3, r3
 8001eac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001eb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001eb4:	833b      	strh	r3, [r7, #24]
 8001eb6:	8b3b      	ldrh	r3, [r7, #24]
 8001eb8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001ebc:	833b      	strh	r3, [r7, #24]
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	441a      	add	r2, r3
 8001ecc:	8b3b      	ldrh	r3, [r7, #24]
 8001ece:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001ed2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001ed6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001eda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ede:	b29b      	uxth	r3, r3
 8001ee0:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001ee2:	88fb      	ldrh	r3, [r7, #6]
 8001ee4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d01f      	beq.n	8001f2c <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	4413      	add	r3, r2
 8001efa:	881b      	ldrh	r3, [r3, #0]
 8001efc:	b29b      	uxth	r3, r3
 8001efe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001f02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f06:	82fb      	strh	r3, [r7, #22]
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	441a      	add	r2, r3
 8001f16:	8afb      	ldrh	r3, [r7, #22]
 8001f18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001f1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001f20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f24:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001f28:	b29b      	uxth	r3, r3
 8001f2a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001f2c:	8b7b      	ldrh	r3, [r7, #26]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	f000 8087 	beq.w	8002042 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	6818      	ldr	r0, [r3, #0]
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	6959      	ldr	r1, [r3, #20]
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	891a      	ldrh	r2, [r3, #8]
 8001f40:	8b7b      	ldrh	r3, [r7, #26]
 8001f42:	f004 fe5f 	bl	8006c04 <USB_ReadPMA>
 8001f46:	e07c      	b.n	8002042 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f50:	b29b      	uxth	r3, r3
 8001f52:	461a      	mov	r2, r3
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	00db      	lsls	r3, r3, #3
 8001f5a:	4413      	add	r3, r2
 8001f5c:	3306      	adds	r3, #6
 8001f5e:	005b      	lsls	r3, r3, #1
 8001f60:	68fa      	ldr	r2, [r7, #12]
 8001f62:	6812      	ldr	r2, [r2, #0]
 8001f64:	4413      	add	r3, r2
 8001f66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f6a:	881b      	ldrh	r3, [r3, #0]
 8001f6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f70:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	699a      	ldr	r2, [r3, #24]
 8001f76:	8b7b      	ldrh	r3, [r7, #26]
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d306      	bcc.n	8001f8a <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	699a      	ldr	r2, [r3, #24]
 8001f80:	8b7b      	ldrh	r3, [r7, #26]
 8001f82:	1ad2      	subs	r2, r2, r3
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	619a      	str	r2, [r3, #24]
 8001f88:	e002      	b.n	8001f90 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	699b      	ldr	r3, [r3, #24]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d123      	bne.n	8001fe0 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	4413      	add	r3, r2
 8001fa6:	881b      	ldrh	r3, [r3, #0]
 8001fa8:	b29b      	uxth	r3, r3
 8001faa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001fae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fb2:	83fb      	strh	r3, [r7, #30]
 8001fb4:	8bfb      	ldrh	r3, [r7, #30]
 8001fb6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001fba:	83fb      	strh	r3, [r7, #30]
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	441a      	add	r2, r3
 8001fca:	8bfb      	ldrh	r3, [r7, #30]
 8001fcc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001fd0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001fd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fdc:	b29b      	uxth	r3, r3
 8001fde:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001fe0:	88fb      	ldrh	r3, [r7, #6]
 8001fe2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d11f      	bne.n	800202a <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	461a      	mov	r2, r3
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	4413      	add	r3, r2
 8001ff8:	881b      	ldrh	r3, [r3, #0]
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002000:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002004:	83bb      	strh	r3, [r7, #28]
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	461a      	mov	r2, r3
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	441a      	add	r2, r3
 8002014:	8bbb      	ldrh	r3, [r7, #28]
 8002016:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800201a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800201e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002022:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002026:	b29b      	uxth	r3, r3
 8002028:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800202a:	8b7b      	ldrh	r3, [r7, #26]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d008      	beq.n	8002042 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	6818      	ldr	r0, [r3, #0]
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	6959      	ldr	r1, [r3, #20]
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	895a      	ldrh	r2, [r3, #10]
 800203c:	8b7b      	ldrh	r3, [r7, #26]
 800203e:	f004 fde1 	bl	8006c04 <USB_ReadPMA>
    }
  }

  return count;
 8002042:	8b7b      	ldrh	r3, [r7, #26]
}
 8002044:	4618      	mov	r0, r3
 8002046:	3720      	adds	r7, #32
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}

0800204c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b0a2      	sub	sp, #136	; 0x88
 8002050:	af00      	add	r7, sp, #0
 8002052:	60f8      	str	r0, [r7, #12]
 8002054:	60b9      	str	r1, [r7, #8]
 8002056:	4613      	mov	r3, r2
 8002058:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800205a:	88fb      	ldrh	r3, [r7, #6]
 800205c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002060:	2b00      	cmp	r3, #0
 8002062:	f000 81c7 	beq.w	80023f4 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800206e:	b29b      	uxth	r3, r3
 8002070:	461a      	mov	r2, r3
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	00db      	lsls	r3, r3, #3
 8002078:	4413      	add	r3, r2
 800207a:	3302      	adds	r3, #2
 800207c:	005b      	lsls	r3, r3, #1
 800207e:	68fa      	ldr	r2, [r7, #12]
 8002080:	6812      	ldr	r2, [r2, #0]
 8002082:	4413      	add	r3, r2
 8002084:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002088:	881b      	ldrh	r3, [r3, #0]
 800208a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800208e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	699a      	ldr	r2, [r3, #24]
 8002096:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800209a:	429a      	cmp	r2, r3
 800209c:	d907      	bls.n	80020ae <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	699a      	ldr	r2, [r3, #24]
 80020a2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80020a6:	1ad2      	subs	r2, r2, r3
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	619a      	str	r2, [r3, #24]
 80020ac:	e002      	b.n	80020b4 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	2200      	movs	r2, #0
 80020b2:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	699b      	ldr	r3, [r3, #24]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	f040 80b9 	bne.w	8002230 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	785b      	ldrb	r3, [r3, #1]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d126      	bne.n	8002114 <HAL_PCD_EP_DB_Transmit+0xc8>
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020d4:	b29b      	uxth	r3, r3
 80020d6:	461a      	mov	r2, r3
 80020d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020da:	4413      	add	r3, r2
 80020dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	011a      	lsls	r2, r3, #4
 80020e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020e6:	4413      	add	r3, r2
 80020e8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80020ec:	627b      	str	r3, [r7, #36]	; 0x24
 80020ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f0:	881b      	ldrh	r3, [r3, #0]
 80020f2:	b29b      	uxth	r3, r3
 80020f4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80020f8:	b29a      	uxth	r2, r3
 80020fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fc:	801a      	strh	r2, [r3, #0]
 80020fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002100:	881b      	ldrh	r3, [r3, #0]
 8002102:	b29b      	uxth	r3, r3
 8002104:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002108:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800210c:	b29a      	uxth	r2, r3
 800210e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002110:	801a      	strh	r2, [r3, #0]
 8002112:	e01a      	b.n	800214a <HAL_PCD_EP_DB_Transmit+0xfe>
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	785b      	ldrb	r3, [r3, #1]
 8002118:	2b01      	cmp	r3, #1
 800211a:	d116      	bne.n	800214a <HAL_PCD_EP_DB_Transmit+0xfe>
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	633b      	str	r3, [r7, #48]	; 0x30
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800212a:	b29b      	uxth	r3, r3
 800212c:	461a      	mov	r2, r3
 800212e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002130:	4413      	add	r3, r2
 8002132:	633b      	str	r3, [r7, #48]	; 0x30
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	011a      	lsls	r2, r3, #4
 800213a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800213c:	4413      	add	r3, r2
 800213e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002142:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002146:	2200      	movs	r2, #0
 8002148:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	623b      	str	r3, [r7, #32]
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	785b      	ldrb	r3, [r3, #1]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d126      	bne.n	80021a6 <HAL_PCD_EP_DB_Transmit+0x15a>
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	61bb      	str	r3, [r7, #24]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002166:	b29b      	uxth	r3, r3
 8002168:	461a      	mov	r2, r3
 800216a:	69bb      	ldr	r3, [r7, #24]
 800216c:	4413      	add	r3, r2
 800216e:	61bb      	str	r3, [r7, #24]
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	011a      	lsls	r2, r3, #4
 8002176:	69bb      	ldr	r3, [r7, #24]
 8002178:	4413      	add	r3, r2
 800217a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800217e:	617b      	str	r3, [r7, #20]
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	881b      	ldrh	r3, [r3, #0]
 8002184:	b29b      	uxth	r3, r3
 8002186:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800218a:	b29a      	uxth	r2, r3
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	801a      	strh	r2, [r3, #0]
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	881b      	ldrh	r3, [r3, #0]
 8002194:	b29b      	uxth	r3, r3
 8002196:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800219a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800219e:	b29a      	uxth	r2, r3
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	801a      	strh	r2, [r3, #0]
 80021a4:	e017      	b.n	80021d6 <HAL_PCD_EP_DB_Transmit+0x18a>
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	785b      	ldrb	r3, [r3, #1]
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d113      	bne.n	80021d6 <HAL_PCD_EP_DB_Transmit+0x18a>
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021b6:	b29b      	uxth	r3, r3
 80021b8:	461a      	mov	r2, r3
 80021ba:	6a3b      	ldr	r3, [r7, #32]
 80021bc:	4413      	add	r3, r2
 80021be:	623b      	str	r3, [r7, #32]
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	011a      	lsls	r2, r3, #4
 80021c6:	6a3b      	ldr	r3, [r7, #32]
 80021c8:	4413      	add	r3, r2
 80021ca:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80021ce:	61fb      	str	r3, [r7, #28]
 80021d0:	69fb      	ldr	r3, [r7, #28]
 80021d2:	2200      	movs	r2, #0
 80021d4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	4619      	mov	r1, r3
 80021dc:	68f8      	ldr	r0, [r7, #12]
 80021de:	f006 f9b2 	bl	8008546 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80021e2:	88fb      	ldrh	r3, [r7, #6]
 80021e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	f000 82d4 	beq.w	8002796 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	461a      	mov	r2, r3
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	4413      	add	r3, r2
 80021fc:	881b      	ldrh	r3, [r3, #0]
 80021fe:	b29b      	uxth	r3, r3
 8002200:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002204:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002208:	827b      	strh	r3, [r7, #18]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	461a      	mov	r2, r3
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	441a      	add	r2, r3
 8002218:	8a7b      	ldrh	r3, [r7, #18]
 800221a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800221e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002222:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002226:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800222a:	b29b      	uxth	r3, r3
 800222c:	8013      	strh	r3, [r2, #0]
 800222e:	e2b2      	b.n	8002796 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002230:	88fb      	ldrh	r3, [r7, #6]
 8002232:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d021      	beq.n	800227e <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	461a      	mov	r2, r3
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	4413      	add	r3, r2
 8002248:	881b      	ldrh	r3, [r3, #0]
 800224a:	b29b      	uxth	r3, r3
 800224c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002250:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002254:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	461a      	mov	r2, r3
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	441a      	add	r2, r3
 8002266:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800226a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800226e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002272:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002276:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800227a:	b29b      	uxth	r3, r3
 800227c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002284:	2b01      	cmp	r3, #1
 8002286:	f040 8286 	bne.w	8002796 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	695a      	ldr	r2, [r3, #20]
 800228e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002292:	441a      	add	r2, r3
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	69da      	ldr	r2, [r3, #28]
 800229c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80022a0:	441a      	add	r2, r3
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	6a1a      	ldr	r2, [r3, #32]
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	691b      	ldr	r3, [r3, #16]
 80022ae:	429a      	cmp	r2, r3
 80022b0:	d309      	bcc.n	80022c6 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	691b      	ldr	r3, [r3, #16]
 80022b6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	6a1a      	ldr	r2, [r3, #32]
 80022bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022be:	1ad2      	subs	r2, r2, r3
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	621a      	str	r2, [r3, #32]
 80022c4:	e015      	b.n	80022f2 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	6a1b      	ldr	r3, [r3, #32]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d107      	bne.n	80022de <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 80022ce:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80022d2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	2200      	movs	r2, #0
 80022d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80022dc:	e009      	b.n	80022f2 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	2200      	movs	r2, #0
 80022e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	6a1b      	ldr	r3, [r3, #32]
 80022ea:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	2200      	movs	r2, #0
 80022f0:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	785b      	ldrb	r3, [r3, #1]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d155      	bne.n	80023a6 <HAL_PCD_EP_DB_Transmit+0x35a>
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002308:	b29b      	uxth	r3, r3
 800230a:	461a      	mov	r2, r3
 800230c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800230e:	4413      	add	r3, r2
 8002310:	63bb      	str	r3, [r7, #56]	; 0x38
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	011a      	lsls	r2, r3, #4
 8002318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800231a:	4413      	add	r3, r2
 800231c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002320:	637b      	str	r3, [r7, #52]	; 0x34
 8002322:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002324:	2b00      	cmp	r3, #0
 8002326:	d112      	bne.n	800234e <HAL_PCD_EP_DB_Transmit+0x302>
 8002328:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800232a:	881b      	ldrh	r3, [r3, #0]
 800232c:	b29b      	uxth	r3, r3
 800232e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002332:	b29a      	uxth	r2, r3
 8002334:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002336:	801a      	strh	r2, [r3, #0]
 8002338:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800233a:	881b      	ldrh	r3, [r3, #0]
 800233c:	b29b      	uxth	r3, r3
 800233e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002342:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002346:	b29a      	uxth	r2, r3
 8002348:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800234a:	801a      	strh	r2, [r3, #0]
 800234c:	e047      	b.n	80023de <HAL_PCD_EP_DB_Transmit+0x392>
 800234e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002350:	2b3e      	cmp	r3, #62	; 0x3e
 8002352:	d811      	bhi.n	8002378 <HAL_PCD_EP_DB_Transmit+0x32c>
 8002354:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002356:	085b      	lsrs	r3, r3, #1
 8002358:	64bb      	str	r3, [r7, #72]	; 0x48
 800235a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800235c:	f003 0301 	and.w	r3, r3, #1
 8002360:	2b00      	cmp	r3, #0
 8002362:	d002      	beq.n	800236a <HAL_PCD_EP_DB_Transmit+0x31e>
 8002364:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002366:	3301      	adds	r3, #1
 8002368:	64bb      	str	r3, [r7, #72]	; 0x48
 800236a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800236c:	b29b      	uxth	r3, r3
 800236e:	029b      	lsls	r3, r3, #10
 8002370:	b29a      	uxth	r2, r3
 8002372:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002374:	801a      	strh	r2, [r3, #0]
 8002376:	e032      	b.n	80023de <HAL_PCD_EP_DB_Transmit+0x392>
 8002378:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800237a:	095b      	lsrs	r3, r3, #5
 800237c:	64bb      	str	r3, [r7, #72]	; 0x48
 800237e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002380:	f003 031f 	and.w	r3, r3, #31
 8002384:	2b00      	cmp	r3, #0
 8002386:	d102      	bne.n	800238e <HAL_PCD_EP_DB_Transmit+0x342>
 8002388:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800238a:	3b01      	subs	r3, #1
 800238c:	64bb      	str	r3, [r7, #72]	; 0x48
 800238e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002390:	b29b      	uxth	r3, r3
 8002392:	029b      	lsls	r3, r3, #10
 8002394:	b29b      	uxth	r3, r3
 8002396:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800239a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800239e:	b29a      	uxth	r2, r3
 80023a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023a2:	801a      	strh	r2, [r3, #0]
 80023a4:	e01b      	b.n	80023de <HAL_PCD_EP_DB_Transmit+0x392>
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	785b      	ldrb	r3, [r3, #1]
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d117      	bne.n	80023de <HAL_PCD_EP_DB_Transmit+0x392>
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	643b      	str	r3, [r7, #64]	; 0x40
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023bc:	b29b      	uxth	r3, r3
 80023be:	461a      	mov	r2, r3
 80023c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023c2:	4413      	add	r3, r2
 80023c4:	643b      	str	r3, [r7, #64]	; 0x40
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	011a      	lsls	r2, r3, #4
 80023cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023ce:	4413      	add	r3, r2
 80023d0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80023d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023d8:	b29a      	uxth	r2, r3
 80023da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023dc:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	6818      	ldr	r0, [r3, #0]
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	6959      	ldr	r1, [r3, #20]
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	891a      	ldrh	r2, [r3, #8]
 80023ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	f004 fbc4 	bl	8006b7a <USB_WritePMA>
 80023f2:	e1d0      	b.n	8002796 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023fc:	b29b      	uxth	r3, r3
 80023fe:	461a      	mov	r2, r3
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	00db      	lsls	r3, r3, #3
 8002406:	4413      	add	r3, r2
 8002408:	3306      	adds	r3, #6
 800240a:	005b      	lsls	r3, r3, #1
 800240c:	68fa      	ldr	r2, [r7, #12]
 800240e:	6812      	ldr	r2, [r2, #0]
 8002410:	4413      	add	r3, r2
 8002412:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002416:	881b      	ldrh	r3, [r3, #0]
 8002418:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800241c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	699a      	ldr	r2, [r3, #24]
 8002424:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002428:	429a      	cmp	r2, r3
 800242a:	d307      	bcc.n	800243c <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	699a      	ldr	r2, [r3, #24]
 8002430:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002434:	1ad2      	subs	r2, r2, r3
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	619a      	str	r2, [r3, #24]
 800243a:	e002      	b.n	8002442 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	2200      	movs	r2, #0
 8002440:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	699b      	ldr	r3, [r3, #24]
 8002446:	2b00      	cmp	r3, #0
 8002448:	f040 80c4 	bne.w	80025d4 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	785b      	ldrb	r3, [r3, #1]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d126      	bne.n	80024a2 <HAL_PCD_EP_DB_Transmit+0x456>
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	66fb      	str	r3, [r7, #108]	; 0x6c
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002462:	b29b      	uxth	r3, r3
 8002464:	461a      	mov	r2, r3
 8002466:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002468:	4413      	add	r3, r2
 800246a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	011a      	lsls	r2, r3, #4
 8002472:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002474:	4413      	add	r3, r2
 8002476:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800247a:	66bb      	str	r3, [r7, #104]	; 0x68
 800247c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800247e:	881b      	ldrh	r3, [r3, #0]
 8002480:	b29b      	uxth	r3, r3
 8002482:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002486:	b29a      	uxth	r2, r3
 8002488:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800248a:	801a      	strh	r2, [r3, #0]
 800248c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800248e:	881b      	ldrh	r3, [r3, #0]
 8002490:	b29b      	uxth	r3, r3
 8002492:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002496:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800249a:	b29a      	uxth	r2, r3
 800249c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800249e:	801a      	strh	r2, [r3, #0]
 80024a0:	e01a      	b.n	80024d8 <HAL_PCD_EP_DB_Transmit+0x48c>
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	785b      	ldrb	r3, [r3, #1]
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d116      	bne.n	80024d8 <HAL_PCD_EP_DB_Transmit+0x48c>
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	677b      	str	r3, [r7, #116]	; 0x74
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024b8:	b29b      	uxth	r3, r3
 80024ba:	461a      	mov	r2, r3
 80024bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024be:	4413      	add	r3, r2
 80024c0:	677b      	str	r3, [r7, #116]	; 0x74
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	011a      	lsls	r2, r3, #4
 80024c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024ca:	4413      	add	r3, r2
 80024cc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80024d0:	673b      	str	r3, [r7, #112]	; 0x70
 80024d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80024d4:	2200      	movs	r2, #0
 80024d6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	67bb      	str	r3, [r7, #120]	; 0x78
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	785b      	ldrb	r3, [r3, #1]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d12f      	bne.n	8002546 <HAL_PCD_EP_DB_Transmit+0x4fa>
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024f6:	b29b      	uxth	r3, r3
 80024f8:	461a      	mov	r2, r3
 80024fa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80024fe:	4413      	add	r3, r2
 8002500:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	011a      	lsls	r2, r3, #4
 800250a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800250e:	4413      	add	r3, r2
 8002510:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002514:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002518:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800251c:	881b      	ldrh	r3, [r3, #0]
 800251e:	b29b      	uxth	r3, r3
 8002520:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002524:	b29a      	uxth	r2, r3
 8002526:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800252a:	801a      	strh	r2, [r3, #0]
 800252c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002530:	881b      	ldrh	r3, [r3, #0]
 8002532:	b29b      	uxth	r3, r3
 8002534:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002538:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800253c:	b29a      	uxth	r2, r3
 800253e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002542:	801a      	strh	r2, [r3, #0]
 8002544:	e017      	b.n	8002576 <HAL_PCD_EP_DB_Transmit+0x52a>
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	785b      	ldrb	r3, [r3, #1]
 800254a:	2b01      	cmp	r3, #1
 800254c:	d113      	bne.n	8002576 <HAL_PCD_EP_DB_Transmit+0x52a>
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002556:	b29b      	uxth	r3, r3
 8002558:	461a      	mov	r2, r3
 800255a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800255c:	4413      	add	r3, r2
 800255e:	67bb      	str	r3, [r7, #120]	; 0x78
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	011a      	lsls	r2, r3, #4
 8002566:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002568:	4413      	add	r3, r2
 800256a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800256e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002570:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002572:	2200      	movs	r2, #0
 8002574:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	4619      	mov	r1, r3
 800257c:	68f8      	ldr	r0, [r7, #12]
 800257e:	f005 ffe2 	bl	8008546 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002582:	88fb      	ldrh	r3, [r7, #6]
 8002584:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002588:	2b00      	cmp	r3, #0
 800258a:	f040 8104 	bne.w	8002796 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	461a      	mov	r2, r3
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	4413      	add	r3, r2
 800259c:	881b      	ldrh	r3, [r3, #0]
 800259e:	b29b      	uxth	r3, r3
 80025a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025a8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	461a      	mov	r2, r3
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	781b      	ldrb	r3, [r3, #0]
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	441a      	add	r2, r3
 80025ba:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80025be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80025c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80025c6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80025ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025ce:	b29b      	uxth	r3, r3
 80025d0:	8013      	strh	r3, [r2, #0]
 80025d2:	e0e0      	b.n	8002796 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80025d4:	88fb      	ldrh	r3, [r7, #6]
 80025d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d121      	bne.n	8002622 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	461a      	mov	r2, r3
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	4413      	add	r3, r2
 80025ec:	881b      	ldrh	r3, [r3, #0]
 80025ee:	b29b      	uxth	r3, r3
 80025f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025f8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	461a      	mov	r2, r3
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	441a      	add	r2, r3
 800260a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800260e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002612:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002616:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800261a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800261e:	b29b      	uxth	r3, r3
 8002620:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002628:	2b01      	cmp	r3, #1
 800262a:	f040 80b4 	bne.w	8002796 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	695a      	ldr	r2, [r3, #20]
 8002632:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002636:	441a      	add	r2, r3
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	69da      	ldr	r2, [r3, #28]
 8002640:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002644:	441a      	add	r2, r3
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	6a1a      	ldr	r2, [r3, #32]
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	691b      	ldr	r3, [r3, #16]
 8002652:	429a      	cmp	r2, r3
 8002654:	d309      	bcc.n	800266a <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	691b      	ldr	r3, [r3, #16]
 800265a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	6a1a      	ldr	r2, [r3, #32]
 8002660:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002662:	1ad2      	subs	r2, r2, r3
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	621a      	str	r2, [r3, #32]
 8002668:	e015      	b.n	8002696 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	6a1b      	ldr	r3, [r3, #32]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d107      	bne.n	8002682 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8002672:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002676:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	2200      	movs	r2, #0
 800267c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002680:	e009      	b.n	8002696 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	6a1b      	ldr	r3, [r3, #32]
 8002686:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	2200      	movs	r2, #0
 800268c:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	2200      	movs	r2, #0
 8002692:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	667b      	str	r3, [r7, #100]	; 0x64
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	785b      	ldrb	r3, [r3, #1]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d155      	bne.n	8002750 <HAL_PCD_EP_DB_Transmit+0x704>
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026b2:	b29b      	uxth	r3, r3
 80026b4:	461a      	mov	r2, r3
 80026b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026b8:	4413      	add	r3, r2
 80026ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	011a      	lsls	r2, r3, #4
 80026c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026c4:	4413      	add	r3, r2
 80026c6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80026ca:	65bb      	str	r3, [r7, #88]	; 0x58
 80026cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d112      	bne.n	80026f8 <HAL_PCD_EP_DB_Transmit+0x6ac>
 80026d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80026d4:	881b      	ldrh	r3, [r3, #0]
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80026dc:	b29a      	uxth	r2, r3
 80026de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80026e0:	801a      	strh	r2, [r3, #0]
 80026e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80026e4:	881b      	ldrh	r3, [r3, #0]
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026f0:	b29a      	uxth	r2, r3
 80026f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80026f4:	801a      	strh	r2, [r3, #0]
 80026f6:	e044      	b.n	8002782 <HAL_PCD_EP_DB_Transmit+0x736>
 80026f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026fa:	2b3e      	cmp	r3, #62	; 0x3e
 80026fc:	d811      	bhi.n	8002722 <HAL_PCD_EP_DB_Transmit+0x6d6>
 80026fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002700:	085b      	lsrs	r3, r3, #1
 8002702:	657b      	str	r3, [r7, #84]	; 0x54
 8002704:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002706:	f003 0301 	and.w	r3, r3, #1
 800270a:	2b00      	cmp	r3, #0
 800270c:	d002      	beq.n	8002714 <HAL_PCD_EP_DB_Transmit+0x6c8>
 800270e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002710:	3301      	adds	r3, #1
 8002712:	657b      	str	r3, [r7, #84]	; 0x54
 8002714:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002716:	b29b      	uxth	r3, r3
 8002718:	029b      	lsls	r3, r3, #10
 800271a:	b29a      	uxth	r2, r3
 800271c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800271e:	801a      	strh	r2, [r3, #0]
 8002720:	e02f      	b.n	8002782 <HAL_PCD_EP_DB_Transmit+0x736>
 8002722:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002724:	095b      	lsrs	r3, r3, #5
 8002726:	657b      	str	r3, [r7, #84]	; 0x54
 8002728:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800272a:	f003 031f 	and.w	r3, r3, #31
 800272e:	2b00      	cmp	r3, #0
 8002730:	d102      	bne.n	8002738 <HAL_PCD_EP_DB_Transmit+0x6ec>
 8002732:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002734:	3b01      	subs	r3, #1
 8002736:	657b      	str	r3, [r7, #84]	; 0x54
 8002738:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800273a:	b29b      	uxth	r3, r3
 800273c:	029b      	lsls	r3, r3, #10
 800273e:	b29b      	uxth	r3, r3
 8002740:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002744:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002748:	b29a      	uxth	r2, r3
 800274a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800274c:	801a      	strh	r2, [r3, #0]
 800274e:	e018      	b.n	8002782 <HAL_PCD_EP_DB_Transmit+0x736>
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	785b      	ldrb	r3, [r3, #1]
 8002754:	2b01      	cmp	r3, #1
 8002756:	d114      	bne.n	8002782 <HAL_PCD_EP_DB_Transmit+0x736>
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002760:	b29b      	uxth	r3, r3
 8002762:	461a      	mov	r2, r3
 8002764:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002766:	4413      	add	r3, r2
 8002768:	667b      	str	r3, [r7, #100]	; 0x64
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	011a      	lsls	r2, r3, #4
 8002770:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002772:	4413      	add	r3, r2
 8002774:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002778:	663b      	str	r3, [r7, #96]	; 0x60
 800277a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800277c:	b29a      	uxth	r2, r3
 800277e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002780:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	6818      	ldr	r0, [r3, #0]
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	6959      	ldr	r1, [r3, #20]
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	895a      	ldrh	r2, [r3, #10]
 800278e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002790:	b29b      	uxth	r3, r3
 8002792:	f004 f9f2 	bl	8006b7a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	461a      	mov	r2, r3
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	4413      	add	r3, r2
 80027a4:	881b      	ldrh	r3, [r3, #0]
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80027b0:	823b      	strh	r3, [r7, #16]
 80027b2:	8a3b      	ldrh	r3, [r7, #16]
 80027b4:	f083 0310 	eor.w	r3, r3, #16
 80027b8:	823b      	strh	r3, [r7, #16]
 80027ba:	8a3b      	ldrh	r3, [r7, #16]
 80027bc:	f083 0320 	eor.w	r3, r3, #32
 80027c0:	823b      	strh	r3, [r7, #16]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	461a      	mov	r2, r3
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	441a      	add	r2, r3
 80027d0:	8a3b      	ldrh	r3, [r7, #16]
 80027d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80027d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80027da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027e2:	b29b      	uxth	r3, r3
 80027e4:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80027e6:	2300      	movs	r3, #0
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	3788      	adds	r7, #136	; 0x88
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b087      	sub	sp, #28
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	60f8      	str	r0, [r7, #12]
 80027f8:	607b      	str	r3, [r7, #4]
 80027fa:	460b      	mov	r3, r1
 80027fc:	817b      	strh	r3, [r7, #10]
 80027fe:	4613      	mov	r3, r2
 8002800:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002802:	897b      	ldrh	r3, [r7, #10]
 8002804:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002808:	b29b      	uxth	r3, r3
 800280a:	2b00      	cmp	r3, #0
 800280c:	d00b      	beq.n	8002826 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800280e:	897b      	ldrh	r3, [r7, #10]
 8002810:	f003 0307 	and.w	r3, r3, #7
 8002814:	1c5a      	adds	r2, r3, #1
 8002816:	4613      	mov	r3, r2
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	4413      	add	r3, r2
 800281c:	00db      	lsls	r3, r3, #3
 800281e:	68fa      	ldr	r2, [r7, #12]
 8002820:	4413      	add	r3, r2
 8002822:	617b      	str	r3, [r7, #20]
 8002824:	e009      	b.n	800283a <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002826:	897a      	ldrh	r2, [r7, #10]
 8002828:	4613      	mov	r3, r2
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	4413      	add	r3, r2
 800282e:	00db      	lsls	r3, r3, #3
 8002830:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002834:	68fa      	ldr	r2, [r7, #12]
 8002836:	4413      	add	r3, r2
 8002838:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800283a:	893b      	ldrh	r3, [r7, #8]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d107      	bne.n	8002850 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	2200      	movs	r2, #0
 8002844:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	b29a      	uxth	r2, r3
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	80da      	strh	r2, [r3, #6]
 800284e:	e00b      	b.n	8002868 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	2201      	movs	r2, #1
 8002854:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	b29a      	uxth	r2, r3
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	0c1b      	lsrs	r3, r3, #16
 8002862:	b29a      	uxth	r2, r3
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002868:	2300      	movs	r3, #0
}
 800286a:	4618      	mov	r0, r3
 800286c:	371c      	adds	r7, #28
 800286e:	46bd      	mov	sp, r7
 8002870:	bc80      	pop	{r7}
 8002872:	4770      	bx	lr

08002874 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b086      	sub	sp, #24
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d101      	bne.n	8002886 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e26c      	b.n	8002d60 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0301 	and.w	r3, r3, #1
 800288e:	2b00      	cmp	r3, #0
 8002890:	f000 8087 	beq.w	80029a2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002894:	4b92      	ldr	r3, [pc, #584]	; (8002ae0 <HAL_RCC_OscConfig+0x26c>)
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	f003 030c 	and.w	r3, r3, #12
 800289c:	2b04      	cmp	r3, #4
 800289e:	d00c      	beq.n	80028ba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80028a0:	4b8f      	ldr	r3, [pc, #572]	; (8002ae0 <HAL_RCC_OscConfig+0x26c>)
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f003 030c 	and.w	r3, r3, #12
 80028a8:	2b08      	cmp	r3, #8
 80028aa:	d112      	bne.n	80028d2 <HAL_RCC_OscConfig+0x5e>
 80028ac:	4b8c      	ldr	r3, [pc, #560]	; (8002ae0 <HAL_RCC_OscConfig+0x26c>)
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028b8:	d10b      	bne.n	80028d2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028ba:	4b89      	ldr	r3, [pc, #548]	; (8002ae0 <HAL_RCC_OscConfig+0x26c>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d06c      	beq.n	80029a0 <HAL_RCC_OscConfig+0x12c>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d168      	bne.n	80029a0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e246      	b.n	8002d60 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028da:	d106      	bne.n	80028ea <HAL_RCC_OscConfig+0x76>
 80028dc:	4b80      	ldr	r3, [pc, #512]	; (8002ae0 <HAL_RCC_OscConfig+0x26c>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a7f      	ldr	r2, [pc, #508]	; (8002ae0 <HAL_RCC_OscConfig+0x26c>)
 80028e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028e6:	6013      	str	r3, [r2, #0]
 80028e8:	e02e      	b.n	8002948 <HAL_RCC_OscConfig+0xd4>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d10c      	bne.n	800290c <HAL_RCC_OscConfig+0x98>
 80028f2:	4b7b      	ldr	r3, [pc, #492]	; (8002ae0 <HAL_RCC_OscConfig+0x26c>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a7a      	ldr	r2, [pc, #488]	; (8002ae0 <HAL_RCC_OscConfig+0x26c>)
 80028f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028fc:	6013      	str	r3, [r2, #0]
 80028fe:	4b78      	ldr	r3, [pc, #480]	; (8002ae0 <HAL_RCC_OscConfig+0x26c>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a77      	ldr	r2, [pc, #476]	; (8002ae0 <HAL_RCC_OscConfig+0x26c>)
 8002904:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002908:	6013      	str	r3, [r2, #0]
 800290a:	e01d      	b.n	8002948 <HAL_RCC_OscConfig+0xd4>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002914:	d10c      	bne.n	8002930 <HAL_RCC_OscConfig+0xbc>
 8002916:	4b72      	ldr	r3, [pc, #456]	; (8002ae0 <HAL_RCC_OscConfig+0x26c>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a71      	ldr	r2, [pc, #452]	; (8002ae0 <HAL_RCC_OscConfig+0x26c>)
 800291c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002920:	6013      	str	r3, [r2, #0]
 8002922:	4b6f      	ldr	r3, [pc, #444]	; (8002ae0 <HAL_RCC_OscConfig+0x26c>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a6e      	ldr	r2, [pc, #440]	; (8002ae0 <HAL_RCC_OscConfig+0x26c>)
 8002928:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800292c:	6013      	str	r3, [r2, #0]
 800292e:	e00b      	b.n	8002948 <HAL_RCC_OscConfig+0xd4>
 8002930:	4b6b      	ldr	r3, [pc, #428]	; (8002ae0 <HAL_RCC_OscConfig+0x26c>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a6a      	ldr	r2, [pc, #424]	; (8002ae0 <HAL_RCC_OscConfig+0x26c>)
 8002936:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800293a:	6013      	str	r3, [r2, #0]
 800293c:	4b68      	ldr	r3, [pc, #416]	; (8002ae0 <HAL_RCC_OscConfig+0x26c>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a67      	ldr	r2, [pc, #412]	; (8002ae0 <HAL_RCC_OscConfig+0x26c>)
 8002942:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002946:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d013      	beq.n	8002978 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002950:	f7fe f814 	bl	800097c <HAL_GetTick>
 8002954:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002956:	e008      	b.n	800296a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002958:	f7fe f810 	bl	800097c <HAL_GetTick>
 800295c:	4602      	mov	r2, r0
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	2b64      	cmp	r3, #100	; 0x64
 8002964:	d901      	bls.n	800296a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	e1fa      	b.n	8002d60 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800296a:	4b5d      	ldr	r3, [pc, #372]	; (8002ae0 <HAL_RCC_OscConfig+0x26c>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d0f0      	beq.n	8002958 <HAL_RCC_OscConfig+0xe4>
 8002976:	e014      	b.n	80029a2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002978:	f7fe f800 	bl	800097c <HAL_GetTick>
 800297c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800297e:	e008      	b.n	8002992 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002980:	f7fd fffc 	bl	800097c <HAL_GetTick>
 8002984:	4602      	mov	r2, r0
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	2b64      	cmp	r3, #100	; 0x64
 800298c:	d901      	bls.n	8002992 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e1e6      	b.n	8002d60 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002992:	4b53      	ldr	r3, [pc, #332]	; (8002ae0 <HAL_RCC_OscConfig+0x26c>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d1f0      	bne.n	8002980 <HAL_RCC_OscConfig+0x10c>
 800299e:	e000      	b.n	80029a2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0302 	and.w	r3, r3, #2
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d063      	beq.n	8002a76 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80029ae:	4b4c      	ldr	r3, [pc, #304]	; (8002ae0 <HAL_RCC_OscConfig+0x26c>)
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	f003 030c 	and.w	r3, r3, #12
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d00b      	beq.n	80029d2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80029ba:	4b49      	ldr	r3, [pc, #292]	; (8002ae0 <HAL_RCC_OscConfig+0x26c>)
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	f003 030c 	and.w	r3, r3, #12
 80029c2:	2b08      	cmp	r3, #8
 80029c4:	d11c      	bne.n	8002a00 <HAL_RCC_OscConfig+0x18c>
 80029c6:	4b46      	ldr	r3, [pc, #280]	; (8002ae0 <HAL_RCC_OscConfig+0x26c>)
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d116      	bne.n	8002a00 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029d2:	4b43      	ldr	r3, [pc, #268]	; (8002ae0 <HAL_RCC_OscConfig+0x26c>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0302 	and.w	r3, r3, #2
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d005      	beq.n	80029ea <HAL_RCC_OscConfig+0x176>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	691b      	ldr	r3, [r3, #16]
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d001      	beq.n	80029ea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e1ba      	b.n	8002d60 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029ea:	4b3d      	ldr	r3, [pc, #244]	; (8002ae0 <HAL_RCC_OscConfig+0x26c>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	695b      	ldr	r3, [r3, #20]
 80029f6:	00db      	lsls	r3, r3, #3
 80029f8:	4939      	ldr	r1, [pc, #228]	; (8002ae0 <HAL_RCC_OscConfig+0x26c>)
 80029fa:	4313      	orrs	r3, r2
 80029fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029fe:	e03a      	b.n	8002a76 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	691b      	ldr	r3, [r3, #16]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d020      	beq.n	8002a4a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a08:	4b36      	ldr	r3, [pc, #216]	; (8002ae4 <HAL_RCC_OscConfig+0x270>)
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a0e:	f7fd ffb5 	bl	800097c <HAL_GetTick>
 8002a12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a14:	e008      	b.n	8002a28 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a16:	f7fd ffb1 	bl	800097c <HAL_GetTick>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	1ad3      	subs	r3, r2, r3
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d901      	bls.n	8002a28 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002a24:	2303      	movs	r3, #3
 8002a26:	e19b      	b.n	8002d60 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a28:	4b2d      	ldr	r3, [pc, #180]	; (8002ae0 <HAL_RCC_OscConfig+0x26c>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0302 	and.w	r3, r3, #2
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d0f0      	beq.n	8002a16 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a34:	4b2a      	ldr	r3, [pc, #168]	; (8002ae0 <HAL_RCC_OscConfig+0x26c>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	695b      	ldr	r3, [r3, #20]
 8002a40:	00db      	lsls	r3, r3, #3
 8002a42:	4927      	ldr	r1, [pc, #156]	; (8002ae0 <HAL_RCC_OscConfig+0x26c>)
 8002a44:	4313      	orrs	r3, r2
 8002a46:	600b      	str	r3, [r1, #0]
 8002a48:	e015      	b.n	8002a76 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a4a:	4b26      	ldr	r3, [pc, #152]	; (8002ae4 <HAL_RCC_OscConfig+0x270>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a50:	f7fd ff94 	bl	800097c <HAL_GetTick>
 8002a54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a56:	e008      	b.n	8002a6a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a58:	f7fd ff90 	bl	800097c <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	d901      	bls.n	8002a6a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	e17a      	b.n	8002d60 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a6a:	4b1d      	ldr	r3, [pc, #116]	; (8002ae0 <HAL_RCC_OscConfig+0x26c>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0302 	and.w	r3, r3, #2
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d1f0      	bne.n	8002a58 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0308 	and.w	r3, r3, #8
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d03a      	beq.n	8002af8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	699b      	ldr	r3, [r3, #24]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d019      	beq.n	8002abe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a8a:	4b17      	ldr	r3, [pc, #92]	; (8002ae8 <HAL_RCC_OscConfig+0x274>)
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a90:	f7fd ff74 	bl	800097c <HAL_GetTick>
 8002a94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a96:	e008      	b.n	8002aaa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a98:	f7fd ff70 	bl	800097c <HAL_GetTick>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	2b02      	cmp	r3, #2
 8002aa4:	d901      	bls.n	8002aaa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	e15a      	b.n	8002d60 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002aaa:	4b0d      	ldr	r3, [pc, #52]	; (8002ae0 <HAL_RCC_OscConfig+0x26c>)
 8002aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aae:	f003 0302 	and.w	r3, r3, #2
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d0f0      	beq.n	8002a98 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002ab6:	2001      	movs	r0, #1
 8002ab8:	f000 faa6 	bl	8003008 <RCC_Delay>
 8002abc:	e01c      	b.n	8002af8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002abe:	4b0a      	ldr	r3, [pc, #40]	; (8002ae8 <HAL_RCC_OscConfig+0x274>)
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ac4:	f7fd ff5a 	bl	800097c <HAL_GetTick>
 8002ac8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002aca:	e00f      	b.n	8002aec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002acc:	f7fd ff56 	bl	800097c <HAL_GetTick>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	d908      	bls.n	8002aec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002ada:	2303      	movs	r3, #3
 8002adc:	e140      	b.n	8002d60 <HAL_RCC_OscConfig+0x4ec>
 8002ade:	bf00      	nop
 8002ae0:	40021000 	.word	0x40021000
 8002ae4:	42420000 	.word	0x42420000
 8002ae8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002aec:	4b9e      	ldr	r3, [pc, #632]	; (8002d68 <HAL_RCC_OscConfig+0x4f4>)
 8002aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af0:	f003 0302 	and.w	r3, r3, #2
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d1e9      	bne.n	8002acc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 0304 	and.w	r3, r3, #4
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	f000 80a6 	beq.w	8002c52 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b06:	2300      	movs	r3, #0
 8002b08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b0a:	4b97      	ldr	r3, [pc, #604]	; (8002d68 <HAL_RCC_OscConfig+0x4f4>)
 8002b0c:	69db      	ldr	r3, [r3, #28]
 8002b0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d10d      	bne.n	8002b32 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b16:	4b94      	ldr	r3, [pc, #592]	; (8002d68 <HAL_RCC_OscConfig+0x4f4>)
 8002b18:	69db      	ldr	r3, [r3, #28]
 8002b1a:	4a93      	ldr	r2, [pc, #588]	; (8002d68 <HAL_RCC_OscConfig+0x4f4>)
 8002b1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b20:	61d3      	str	r3, [r2, #28]
 8002b22:	4b91      	ldr	r3, [pc, #580]	; (8002d68 <HAL_RCC_OscConfig+0x4f4>)
 8002b24:	69db      	ldr	r3, [r3, #28]
 8002b26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b2a:	60bb      	str	r3, [r7, #8]
 8002b2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b32:	4b8e      	ldr	r3, [pc, #568]	; (8002d6c <HAL_RCC_OscConfig+0x4f8>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d118      	bne.n	8002b70 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b3e:	4b8b      	ldr	r3, [pc, #556]	; (8002d6c <HAL_RCC_OscConfig+0x4f8>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a8a      	ldr	r2, [pc, #552]	; (8002d6c <HAL_RCC_OscConfig+0x4f8>)
 8002b44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b4a:	f7fd ff17 	bl	800097c <HAL_GetTick>
 8002b4e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b50:	e008      	b.n	8002b64 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b52:	f7fd ff13 	bl	800097c <HAL_GetTick>
 8002b56:	4602      	mov	r2, r0
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	1ad3      	subs	r3, r2, r3
 8002b5c:	2b64      	cmp	r3, #100	; 0x64
 8002b5e:	d901      	bls.n	8002b64 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002b60:	2303      	movs	r3, #3
 8002b62:	e0fd      	b.n	8002d60 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b64:	4b81      	ldr	r3, [pc, #516]	; (8002d6c <HAL_RCC_OscConfig+0x4f8>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d0f0      	beq.n	8002b52 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d106      	bne.n	8002b86 <HAL_RCC_OscConfig+0x312>
 8002b78:	4b7b      	ldr	r3, [pc, #492]	; (8002d68 <HAL_RCC_OscConfig+0x4f4>)
 8002b7a:	6a1b      	ldr	r3, [r3, #32]
 8002b7c:	4a7a      	ldr	r2, [pc, #488]	; (8002d68 <HAL_RCC_OscConfig+0x4f4>)
 8002b7e:	f043 0301 	orr.w	r3, r3, #1
 8002b82:	6213      	str	r3, [r2, #32]
 8002b84:	e02d      	b.n	8002be2 <HAL_RCC_OscConfig+0x36e>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	68db      	ldr	r3, [r3, #12]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d10c      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x334>
 8002b8e:	4b76      	ldr	r3, [pc, #472]	; (8002d68 <HAL_RCC_OscConfig+0x4f4>)
 8002b90:	6a1b      	ldr	r3, [r3, #32]
 8002b92:	4a75      	ldr	r2, [pc, #468]	; (8002d68 <HAL_RCC_OscConfig+0x4f4>)
 8002b94:	f023 0301 	bic.w	r3, r3, #1
 8002b98:	6213      	str	r3, [r2, #32]
 8002b9a:	4b73      	ldr	r3, [pc, #460]	; (8002d68 <HAL_RCC_OscConfig+0x4f4>)
 8002b9c:	6a1b      	ldr	r3, [r3, #32]
 8002b9e:	4a72      	ldr	r2, [pc, #456]	; (8002d68 <HAL_RCC_OscConfig+0x4f4>)
 8002ba0:	f023 0304 	bic.w	r3, r3, #4
 8002ba4:	6213      	str	r3, [r2, #32]
 8002ba6:	e01c      	b.n	8002be2 <HAL_RCC_OscConfig+0x36e>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	2b05      	cmp	r3, #5
 8002bae:	d10c      	bne.n	8002bca <HAL_RCC_OscConfig+0x356>
 8002bb0:	4b6d      	ldr	r3, [pc, #436]	; (8002d68 <HAL_RCC_OscConfig+0x4f4>)
 8002bb2:	6a1b      	ldr	r3, [r3, #32]
 8002bb4:	4a6c      	ldr	r2, [pc, #432]	; (8002d68 <HAL_RCC_OscConfig+0x4f4>)
 8002bb6:	f043 0304 	orr.w	r3, r3, #4
 8002bba:	6213      	str	r3, [r2, #32]
 8002bbc:	4b6a      	ldr	r3, [pc, #424]	; (8002d68 <HAL_RCC_OscConfig+0x4f4>)
 8002bbe:	6a1b      	ldr	r3, [r3, #32]
 8002bc0:	4a69      	ldr	r2, [pc, #420]	; (8002d68 <HAL_RCC_OscConfig+0x4f4>)
 8002bc2:	f043 0301 	orr.w	r3, r3, #1
 8002bc6:	6213      	str	r3, [r2, #32]
 8002bc8:	e00b      	b.n	8002be2 <HAL_RCC_OscConfig+0x36e>
 8002bca:	4b67      	ldr	r3, [pc, #412]	; (8002d68 <HAL_RCC_OscConfig+0x4f4>)
 8002bcc:	6a1b      	ldr	r3, [r3, #32]
 8002bce:	4a66      	ldr	r2, [pc, #408]	; (8002d68 <HAL_RCC_OscConfig+0x4f4>)
 8002bd0:	f023 0301 	bic.w	r3, r3, #1
 8002bd4:	6213      	str	r3, [r2, #32]
 8002bd6:	4b64      	ldr	r3, [pc, #400]	; (8002d68 <HAL_RCC_OscConfig+0x4f4>)
 8002bd8:	6a1b      	ldr	r3, [r3, #32]
 8002bda:	4a63      	ldr	r2, [pc, #396]	; (8002d68 <HAL_RCC_OscConfig+0x4f4>)
 8002bdc:	f023 0304 	bic.w	r3, r3, #4
 8002be0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	68db      	ldr	r3, [r3, #12]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d015      	beq.n	8002c16 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bea:	f7fd fec7 	bl	800097c <HAL_GetTick>
 8002bee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bf0:	e00a      	b.n	8002c08 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bf2:	f7fd fec3 	bl	800097c <HAL_GetTick>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	1ad3      	subs	r3, r2, r3
 8002bfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d901      	bls.n	8002c08 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002c04:	2303      	movs	r3, #3
 8002c06:	e0ab      	b.n	8002d60 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c08:	4b57      	ldr	r3, [pc, #348]	; (8002d68 <HAL_RCC_OscConfig+0x4f4>)
 8002c0a:	6a1b      	ldr	r3, [r3, #32]
 8002c0c:	f003 0302 	and.w	r3, r3, #2
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d0ee      	beq.n	8002bf2 <HAL_RCC_OscConfig+0x37e>
 8002c14:	e014      	b.n	8002c40 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c16:	f7fd feb1 	bl	800097c <HAL_GetTick>
 8002c1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c1c:	e00a      	b.n	8002c34 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c1e:	f7fd fead 	bl	800097c <HAL_GetTick>
 8002c22:	4602      	mov	r2, r0
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d901      	bls.n	8002c34 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002c30:	2303      	movs	r3, #3
 8002c32:	e095      	b.n	8002d60 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c34:	4b4c      	ldr	r3, [pc, #304]	; (8002d68 <HAL_RCC_OscConfig+0x4f4>)
 8002c36:	6a1b      	ldr	r3, [r3, #32]
 8002c38:	f003 0302 	and.w	r3, r3, #2
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d1ee      	bne.n	8002c1e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002c40:	7dfb      	ldrb	r3, [r7, #23]
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d105      	bne.n	8002c52 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c46:	4b48      	ldr	r3, [pc, #288]	; (8002d68 <HAL_RCC_OscConfig+0x4f4>)
 8002c48:	69db      	ldr	r3, [r3, #28]
 8002c4a:	4a47      	ldr	r2, [pc, #284]	; (8002d68 <HAL_RCC_OscConfig+0x4f4>)
 8002c4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c50:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	69db      	ldr	r3, [r3, #28]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	f000 8081 	beq.w	8002d5e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c5c:	4b42      	ldr	r3, [pc, #264]	; (8002d68 <HAL_RCC_OscConfig+0x4f4>)
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f003 030c 	and.w	r3, r3, #12
 8002c64:	2b08      	cmp	r3, #8
 8002c66:	d061      	beq.n	8002d2c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	69db      	ldr	r3, [r3, #28]
 8002c6c:	2b02      	cmp	r3, #2
 8002c6e:	d146      	bne.n	8002cfe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c70:	4b3f      	ldr	r3, [pc, #252]	; (8002d70 <HAL_RCC_OscConfig+0x4fc>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c76:	f7fd fe81 	bl	800097c <HAL_GetTick>
 8002c7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c7c:	e008      	b.n	8002c90 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c7e:	f7fd fe7d 	bl	800097c <HAL_GetTick>
 8002c82:	4602      	mov	r2, r0
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	1ad3      	subs	r3, r2, r3
 8002c88:	2b02      	cmp	r3, #2
 8002c8a:	d901      	bls.n	8002c90 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	e067      	b.n	8002d60 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c90:	4b35      	ldr	r3, [pc, #212]	; (8002d68 <HAL_RCC_OscConfig+0x4f4>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d1f0      	bne.n	8002c7e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6a1b      	ldr	r3, [r3, #32]
 8002ca0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ca4:	d108      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002ca6:	4b30      	ldr	r3, [pc, #192]	; (8002d68 <HAL_RCC_OscConfig+0x4f4>)
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	492d      	ldr	r1, [pc, #180]	; (8002d68 <HAL_RCC_OscConfig+0x4f4>)
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cb8:	4b2b      	ldr	r3, [pc, #172]	; (8002d68 <HAL_RCC_OscConfig+0x4f4>)
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6a19      	ldr	r1, [r3, #32]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc8:	430b      	orrs	r3, r1
 8002cca:	4927      	ldr	r1, [pc, #156]	; (8002d68 <HAL_RCC_OscConfig+0x4f4>)
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cd0:	4b27      	ldr	r3, [pc, #156]	; (8002d70 <HAL_RCC_OscConfig+0x4fc>)
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cd6:	f7fd fe51 	bl	800097c <HAL_GetTick>
 8002cda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002cdc:	e008      	b.n	8002cf0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cde:	f7fd fe4d 	bl	800097c <HAL_GetTick>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	2b02      	cmp	r3, #2
 8002cea:	d901      	bls.n	8002cf0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002cec:	2303      	movs	r3, #3
 8002cee:	e037      	b.n	8002d60 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002cf0:	4b1d      	ldr	r3, [pc, #116]	; (8002d68 <HAL_RCC_OscConfig+0x4f4>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d0f0      	beq.n	8002cde <HAL_RCC_OscConfig+0x46a>
 8002cfc:	e02f      	b.n	8002d5e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cfe:	4b1c      	ldr	r3, [pc, #112]	; (8002d70 <HAL_RCC_OscConfig+0x4fc>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d04:	f7fd fe3a 	bl	800097c <HAL_GetTick>
 8002d08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d0a:	e008      	b.n	8002d1e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d0c:	f7fd fe36 	bl	800097c <HAL_GetTick>
 8002d10:	4602      	mov	r2, r0
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	d901      	bls.n	8002d1e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e020      	b.n	8002d60 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d1e:	4b12      	ldr	r3, [pc, #72]	; (8002d68 <HAL_RCC_OscConfig+0x4f4>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d1f0      	bne.n	8002d0c <HAL_RCC_OscConfig+0x498>
 8002d2a:	e018      	b.n	8002d5e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	69db      	ldr	r3, [r3, #28]
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d101      	bne.n	8002d38 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e013      	b.n	8002d60 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002d38:	4b0b      	ldr	r3, [pc, #44]	; (8002d68 <HAL_RCC_OscConfig+0x4f4>)
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6a1b      	ldr	r3, [r3, #32]
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d106      	bne.n	8002d5a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d001      	beq.n	8002d5e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e000      	b.n	8002d60 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002d5e:	2300      	movs	r3, #0
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3718      	adds	r7, #24
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	40021000 	.word	0x40021000
 8002d6c:	40007000 	.word	0x40007000
 8002d70:	42420060 	.word	0x42420060

08002d74 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b084      	sub	sp, #16
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d101      	bne.n	8002d88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e0d0      	b.n	8002f2a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d88:	4b6a      	ldr	r3, [pc, #424]	; (8002f34 <HAL_RCC_ClockConfig+0x1c0>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0307 	and.w	r3, r3, #7
 8002d90:	683a      	ldr	r2, [r7, #0]
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d910      	bls.n	8002db8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d96:	4b67      	ldr	r3, [pc, #412]	; (8002f34 <HAL_RCC_ClockConfig+0x1c0>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f023 0207 	bic.w	r2, r3, #7
 8002d9e:	4965      	ldr	r1, [pc, #404]	; (8002f34 <HAL_RCC_ClockConfig+0x1c0>)
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002da6:	4b63      	ldr	r3, [pc, #396]	; (8002f34 <HAL_RCC_ClockConfig+0x1c0>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 0307 	and.w	r3, r3, #7
 8002dae:	683a      	ldr	r2, [r7, #0]
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d001      	beq.n	8002db8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e0b8      	b.n	8002f2a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0302 	and.w	r3, r3, #2
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d020      	beq.n	8002e06 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 0304 	and.w	r3, r3, #4
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d005      	beq.n	8002ddc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002dd0:	4b59      	ldr	r3, [pc, #356]	; (8002f38 <HAL_RCC_ClockConfig+0x1c4>)
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	4a58      	ldr	r2, [pc, #352]	; (8002f38 <HAL_RCC_ClockConfig+0x1c4>)
 8002dd6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002dda:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 0308 	and.w	r3, r3, #8
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d005      	beq.n	8002df4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002de8:	4b53      	ldr	r3, [pc, #332]	; (8002f38 <HAL_RCC_ClockConfig+0x1c4>)
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	4a52      	ldr	r2, [pc, #328]	; (8002f38 <HAL_RCC_ClockConfig+0x1c4>)
 8002dee:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002df2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002df4:	4b50      	ldr	r3, [pc, #320]	; (8002f38 <HAL_RCC_ClockConfig+0x1c4>)
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	494d      	ldr	r1, [pc, #308]	; (8002f38 <HAL_RCC_ClockConfig+0x1c4>)
 8002e02:	4313      	orrs	r3, r2
 8002e04:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0301 	and.w	r3, r3, #1
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d040      	beq.n	8002e94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d107      	bne.n	8002e2a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e1a:	4b47      	ldr	r3, [pc, #284]	; (8002f38 <HAL_RCC_ClockConfig+0x1c4>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d115      	bne.n	8002e52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e07f      	b.n	8002f2a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	2b02      	cmp	r3, #2
 8002e30:	d107      	bne.n	8002e42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e32:	4b41      	ldr	r3, [pc, #260]	; (8002f38 <HAL_RCC_ClockConfig+0x1c4>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d109      	bne.n	8002e52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e073      	b.n	8002f2a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e42:	4b3d      	ldr	r3, [pc, #244]	; (8002f38 <HAL_RCC_ClockConfig+0x1c4>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 0302 	and.w	r3, r3, #2
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d101      	bne.n	8002e52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e06b      	b.n	8002f2a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e52:	4b39      	ldr	r3, [pc, #228]	; (8002f38 <HAL_RCC_ClockConfig+0x1c4>)
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	f023 0203 	bic.w	r2, r3, #3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	4936      	ldr	r1, [pc, #216]	; (8002f38 <HAL_RCC_ClockConfig+0x1c4>)
 8002e60:	4313      	orrs	r3, r2
 8002e62:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e64:	f7fd fd8a 	bl	800097c <HAL_GetTick>
 8002e68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e6a:	e00a      	b.n	8002e82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e6c:	f7fd fd86 	bl	800097c <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d901      	bls.n	8002e82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e053      	b.n	8002f2a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e82:	4b2d      	ldr	r3, [pc, #180]	; (8002f38 <HAL_RCC_ClockConfig+0x1c4>)
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	f003 020c 	and.w	r2, r3, #12
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d1eb      	bne.n	8002e6c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e94:	4b27      	ldr	r3, [pc, #156]	; (8002f34 <HAL_RCC_ClockConfig+0x1c0>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0307 	and.w	r3, r3, #7
 8002e9c:	683a      	ldr	r2, [r7, #0]
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d210      	bcs.n	8002ec4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ea2:	4b24      	ldr	r3, [pc, #144]	; (8002f34 <HAL_RCC_ClockConfig+0x1c0>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f023 0207 	bic.w	r2, r3, #7
 8002eaa:	4922      	ldr	r1, [pc, #136]	; (8002f34 <HAL_RCC_ClockConfig+0x1c0>)
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eb2:	4b20      	ldr	r3, [pc, #128]	; (8002f34 <HAL_RCC_ClockConfig+0x1c0>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0307 	and.w	r3, r3, #7
 8002eba:	683a      	ldr	r2, [r7, #0]
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d001      	beq.n	8002ec4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e032      	b.n	8002f2a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 0304 	and.w	r3, r3, #4
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d008      	beq.n	8002ee2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ed0:	4b19      	ldr	r3, [pc, #100]	; (8002f38 <HAL_RCC_ClockConfig+0x1c4>)
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	4916      	ldr	r1, [pc, #88]	; (8002f38 <HAL_RCC_ClockConfig+0x1c4>)
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0308 	and.w	r3, r3, #8
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d009      	beq.n	8002f02 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002eee:	4b12      	ldr	r3, [pc, #72]	; (8002f38 <HAL_RCC_ClockConfig+0x1c4>)
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	691b      	ldr	r3, [r3, #16]
 8002efa:	00db      	lsls	r3, r3, #3
 8002efc:	490e      	ldr	r1, [pc, #56]	; (8002f38 <HAL_RCC_ClockConfig+0x1c4>)
 8002efe:	4313      	orrs	r3, r2
 8002f00:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002f02:	f000 f821 	bl	8002f48 <HAL_RCC_GetSysClockFreq>
 8002f06:	4602      	mov	r2, r0
 8002f08:	4b0b      	ldr	r3, [pc, #44]	; (8002f38 <HAL_RCC_ClockConfig+0x1c4>)
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	091b      	lsrs	r3, r3, #4
 8002f0e:	f003 030f 	and.w	r3, r3, #15
 8002f12:	490a      	ldr	r1, [pc, #40]	; (8002f3c <HAL_RCC_ClockConfig+0x1c8>)
 8002f14:	5ccb      	ldrb	r3, [r1, r3]
 8002f16:	fa22 f303 	lsr.w	r3, r2, r3
 8002f1a:	4a09      	ldr	r2, [pc, #36]	; (8002f40 <HAL_RCC_ClockConfig+0x1cc>)
 8002f1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002f1e:	4b09      	ldr	r3, [pc, #36]	; (8002f44 <HAL_RCC_ClockConfig+0x1d0>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4618      	mov	r0, r3
 8002f24:	f7fd fce8 	bl	80008f8 <HAL_InitTick>

  return HAL_OK;
 8002f28:	2300      	movs	r3, #0
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3710      	adds	r7, #16
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	40022000 	.word	0x40022000
 8002f38:	40021000 	.word	0x40021000
 8002f3c:	08008a9c 	.word	0x08008a9c
 8002f40:	20000000 	.word	0x20000000
 8002f44:	20000004 	.word	0x20000004

08002f48 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f48:	b490      	push	{r4, r7}
 8002f4a:	b08a      	sub	sp, #40	; 0x28
 8002f4c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002f4e:	4b2a      	ldr	r3, [pc, #168]	; (8002ff8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002f50:	1d3c      	adds	r4, r7, #4
 8002f52:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f54:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002f58:	f240 2301 	movw	r3, #513	; 0x201
 8002f5c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	61fb      	str	r3, [r7, #28]
 8002f62:	2300      	movs	r3, #0
 8002f64:	61bb      	str	r3, [r7, #24]
 8002f66:	2300      	movs	r3, #0
 8002f68:	627b      	str	r3, [r7, #36]	; 0x24
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002f72:	4b22      	ldr	r3, [pc, #136]	; (8002ffc <HAL_RCC_GetSysClockFreq+0xb4>)
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f78:	69fb      	ldr	r3, [r7, #28]
 8002f7a:	f003 030c 	and.w	r3, r3, #12
 8002f7e:	2b04      	cmp	r3, #4
 8002f80:	d002      	beq.n	8002f88 <HAL_RCC_GetSysClockFreq+0x40>
 8002f82:	2b08      	cmp	r3, #8
 8002f84:	d003      	beq.n	8002f8e <HAL_RCC_GetSysClockFreq+0x46>
 8002f86:	e02d      	b.n	8002fe4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f88:	4b1d      	ldr	r3, [pc, #116]	; (8003000 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f8a:	623b      	str	r3, [r7, #32]
      break;
 8002f8c:	e02d      	b.n	8002fea <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	0c9b      	lsrs	r3, r3, #18
 8002f92:	f003 030f 	and.w	r3, r3, #15
 8002f96:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002f9a:	4413      	add	r3, r2
 8002f9c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002fa0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002fa2:	69fb      	ldr	r3, [r7, #28]
 8002fa4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d013      	beq.n	8002fd4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002fac:	4b13      	ldr	r3, [pc, #76]	; (8002ffc <HAL_RCC_GetSysClockFreq+0xb4>)
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	0c5b      	lsrs	r3, r3, #17
 8002fb2:	f003 0301 	and.w	r3, r3, #1
 8002fb6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002fba:	4413      	add	r3, r2
 8002fbc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002fc0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	4a0e      	ldr	r2, [pc, #56]	; (8003000 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002fc6:	fb02 f203 	mul.w	r2, r2, r3
 8002fca:	69bb      	ldr	r3, [r7, #24]
 8002fcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fd0:	627b      	str	r3, [r7, #36]	; 0x24
 8002fd2:	e004      	b.n	8002fde <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	4a0b      	ldr	r2, [pc, #44]	; (8003004 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002fd8:	fb02 f303 	mul.w	r3, r2, r3
 8002fdc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe0:	623b      	str	r3, [r7, #32]
      break;
 8002fe2:	e002      	b.n	8002fea <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002fe4:	4b06      	ldr	r3, [pc, #24]	; (8003000 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002fe6:	623b      	str	r3, [r7, #32]
      break;
 8002fe8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002fea:	6a3b      	ldr	r3, [r7, #32]
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3728      	adds	r7, #40	; 0x28
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bc90      	pop	{r4, r7}
 8002ff4:	4770      	bx	lr
 8002ff6:	bf00      	nop
 8002ff8:	08008a2c 	.word	0x08008a2c
 8002ffc:	40021000 	.word	0x40021000
 8003000:	007a1200 	.word	0x007a1200
 8003004:	003d0900 	.word	0x003d0900

08003008 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003008:	b480      	push	{r7}
 800300a:	b085      	sub	sp, #20
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003010:	4b0a      	ldr	r3, [pc, #40]	; (800303c <RCC_Delay+0x34>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a0a      	ldr	r2, [pc, #40]	; (8003040 <RCC_Delay+0x38>)
 8003016:	fba2 2303 	umull	r2, r3, r2, r3
 800301a:	0a5b      	lsrs	r3, r3, #9
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	fb02 f303 	mul.w	r3, r2, r3
 8003022:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003024:	bf00      	nop
  }
  while (Delay --);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	1e5a      	subs	r2, r3, #1
 800302a:	60fa      	str	r2, [r7, #12]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d1f9      	bne.n	8003024 <RCC_Delay+0x1c>
}
 8003030:	bf00      	nop
 8003032:	bf00      	nop
 8003034:	3714      	adds	r7, #20
 8003036:	46bd      	mov	sp, r7
 8003038:	bc80      	pop	{r7}
 800303a:	4770      	bx	lr
 800303c:	20000000 	.word	0x20000000
 8003040:	10624dd3 	.word	0x10624dd3

08003044 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b086      	sub	sp, #24
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800304c:	2300      	movs	r3, #0
 800304e:	613b      	str	r3, [r7, #16]
 8003050:	2300      	movs	r3, #0
 8003052:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 0301 	and.w	r3, r3, #1
 800305c:	2b00      	cmp	r3, #0
 800305e:	d07d      	beq.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003060:	2300      	movs	r3, #0
 8003062:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003064:	4b4f      	ldr	r3, [pc, #316]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003066:	69db      	ldr	r3, [r3, #28]
 8003068:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800306c:	2b00      	cmp	r3, #0
 800306e:	d10d      	bne.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003070:	4b4c      	ldr	r3, [pc, #304]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003072:	69db      	ldr	r3, [r3, #28]
 8003074:	4a4b      	ldr	r2, [pc, #300]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003076:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800307a:	61d3      	str	r3, [r2, #28]
 800307c:	4b49      	ldr	r3, [pc, #292]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800307e:	69db      	ldr	r3, [r3, #28]
 8003080:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003084:	60bb      	str	r3, [r7, #8]
 8003086:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003088:	2301      	movs	r3, #1
 800308a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800308c:	4b46      	ldr	r3, [pc, #280]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003094:	2b00      	cmp	r3, #0
 8003096:	d118      	bne.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003098:	4b43      	ldr	r3, [pc, #268]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a42      	ldr	r2, [pc, #264]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800309e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030a2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030a4:	f7fd fc6a 	bl	800097c <HAL_GetTick>
 80030a8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030aa:	e008      	b.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030ac:	f7fd fc66 	bl	800097c <HAL_GetTick>
 80030b0:	4602      	mov	r2, r0
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	2b64      	cmp	r3, #100	; 0x64
 80030b8:	d901      	bls.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80030ba:	2303      	movs	r3, #3
 80030bc:	e06d      	b.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030be:	4b3a      	ldr	r3, [pc, #232]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d0f0      	beq.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80030ca:	4b36      	ldr	r3, [pc, #216]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030cc:	6a1b      	ldr	r3, [r3, #32]
 80030ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030d2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d02e      	beq.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030e2:	68fa      	ldr	r2, [r7, #12]
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d027      	beq.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80030e8:	4b2e      	ldr	r3, [pc, #184]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030ea:	6a1b      	ldr	r3, [r3, #32]
 80030ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030f0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80030f2:	4b2e      	ldr	r3, [pc, #184]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80030f4:	2201      	movs	r2, #1
 80030f6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80030f8:	4b2c      	ldr	r3, [pc, #176]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80030fa:	2200      	movs	r2, #0
 80030fc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80030fe:	4a29      	ldr	r2, [pc, #164]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f003 0301 	and.w	r3, r3, #1
 800310a:	2b00      	cmp	r3, #0
 800310c:	d014      	beq.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800310e:	f7fd fc35 	bl	800097c <HAL_GetTick>
 8003112:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003114:	e00a      	b.n	800312c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003116:	f7fd fc31 	bl	800097c <HAL_GetTick>
 800311a:	4602      	mov	r2, r0
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	1ad3      	subs	r3, r2, r3
 8003120:	f241 3288 	movw	r2, #5000	; 0x1388
 8003124:	4293      	cmp	r3, r2
 8003126:	d901      	bls.n	800312c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003128:	2303      	movs	r3, #3
 800312a:	e036      	b.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800312c:	4b1d      	ldr	r3, [pc, #116]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800312e:	6a1b      	ldr	r3, [r3, #32]
 8003130:	f003 0302 	and.w	r3, r3, #2
 8003134:	2b00      	cmp	r3, #0
 8003136:	d0ee      	beq.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003138:	4b1a      	ldr	r3, [pc, #104]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800313a:	6a1b      	ldr	r3, [r3, #32]
 800313c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	4917      	ldr	r1, [pc, #92]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003146:	4313      	orrs	r3, r2
 8003148:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800314a:	7dfb      	ldrb	r3, [r7, #23]
 800314c:	2b01      	cmp	r3, #1
 800314e:	d105      	bne.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003150:	4b14      	ldr	r3, [pc, #80]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003152:	69db      	ldr	r3, [r3, #28]
 8003154:	4a13      	ldr	r2, [pc, #76]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003156:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800315a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 0302 	and.w	r3, r3, #2
 8003164:	2b00      	cmp	r3, #0
 8003166:	d008      	beq.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003168:	4b0e      	ldr	r3, [pc, #56]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	490b      	ldr	r1, [pc, #44]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003176:	4313      	orrs	r3, r2
 8003178:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0310 	and.w	r3, r3, #16
 8003182:	2b00      	cmp	r3, #0
 8003184:	d008      	beq.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003186:	4b07      	ldr	r3, [pc, #28]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	68db      	ldr	r3, [r3, #12]
 8003192:	4904      	ldr	r1, [pc, #16]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003194:	4313      	orrs	r3, r2
 8003196:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003198:	2300      	movs	r3, #0
}
 800319a:	4618      	mov	r0, r3
 800319c:	3718      	adds	r7, #24
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	40021000 	.word	0x40021000
 80031a8:	40007000 	.word	0x40007000
 80031ac:	42420440 	.word	0x42420440

080031b0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b082      	sub	sp, #8
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d101      	bne.n	80031c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e076      	b.n	80032b0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d108      	bne.n	80031dc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80031d2:	d009      	beq.n	80031e8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2200      	movs	r2, #0
 80031d8:	61da      	str	r2, [r3, #28]
 80031da:	e005      	b.n	80031e8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2200      	movs	r2, #0
 80031e6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2200      	movs	r2, #0
 80031ec:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d106      	bne.n	8003208 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f7fd fa80 	bl	8000708 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2202      	movs	r2, #2
 800320c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800321e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003230:	431a      	orrs	r2, r3
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	68db      	ldr	r3, [r3, #12]
 8003236:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800323a:	431a      	orrs	r2, r3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	691b      	ldr	r3, [r3, #16]
 8003240:	f003 0302 	and.w	r3, r3, #2
 8003244:	431a      	orrs	r2, r3
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	695b      	ldr	r3, [r3, #20]
 800324a:	f003 0301 	and.w	r3, r3, #1
 800324e:	431a      	orrs	r2, r3
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	699b      	ldr	r3, [r3, #24]
 8003254:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003258:	431a      	orrs	r2, r3
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	69db      	ldr	r3, [r3, #28]
 800325e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003262:	431a      	orrs	r2, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6a1b      	ldr	r3, [r3, #32]
 8003268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800326c:	ea42 0103 	orr.w	r1, r2, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003274:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	430a      	orrs	r2, r1
 800327e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	699b      	ldr	r3, [r3, #24]
 8003284:	0c1a      	lsrs	r2, r3, #16
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f002 0204 	and.w	r2, r2, #4
 800328e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	69da      	ldr	r2, [r3, #28]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800329e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2200      	movs	r2, #0
 80032a4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2201      	movs	r2, #1
 80032aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80032ae:	2300      	movs	r3, #0
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3708      	adds	r7, #8
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}

080032b8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b088      	sub	sp, #32
 80032bc:	af00      	add	r7, sp, #0
 80032be:	60f8      	str	r0, [r7, #12]
 80032c0:	60b9      	str	r1, [r7, #8]
 80032c2:	603b      	str	r3, [r7, #0]
 80032c4:	4613      	mov	r3, r2
 80032c6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80032c8:	2300      	movs	r3, #0
 80032ca:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d101      	bne.n	80032da <HAL_SPI_Transmit+0x22>
 80032d6:	2302      	movs	r3, #2
 80032d8:	e126      	b.n	8003528 <HAL_SPI_Transmit+0x270>
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2201      	movs	r2, #1
 80032de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80032e2:	f7fd fb4b 	bl	800097c <HAL_GetTick>
 80032e6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80032e8:	88fb      	ldrh	r3, [r7, #6]
 80032ea:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d002      	beq.n	80032fe <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80032f8:	2302      	movs	r3, #2
 80032fa:	77fb      	strb	r3, [r7, #31]
    goto error;
 80032fc:	e10b      	b.n	8003516 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d002      	beq.n	800330a <HAL_SPI_Transmit+0x52>
 8003304:	88fb      	ldrh	r3, [r7, #6]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d102      	bne.n	8003310 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800330e:	e102      	b.n	8003516 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2203      	movs	r2, #3
 8003314:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2200      	movs	r2, #0
 800331c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	68ba      	ldr	r2, [r7, #8]
 8003322:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	88fa      	ldrh	r2, [r7, #6]
 8003328:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	88fa      	ldrh	r2, [r7, #6]
 800332e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2200      	movs	r2, #0
 8003334:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2200      	movs	r2, #0
 800333a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2200      	movs	r2, #0
 8003340:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2200      	movs	r2, #0
 8003346:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2200      	movs	r2, #0
 800334c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003356:	d10f      	bne.n	8003378 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003366:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003376:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003382:	2b40      	cmp	r3, #64	; 0x40
 8003384:	d007      	beq.n	8003396 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003394:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	68db      	ldr	r3, [r3, #12]
 800339a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800339e:	d14b      	bne.n	8003438 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d002      	beq.n	80033ae <HAL_SPI_Transmit+0xf6>
 80033a8:	8afb      	ldrh	r3, [r7, #22]
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d13e      	bne.n	800342c <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b2:	881a      	ldrh	r2, [r3, #0]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033be:	1c9a      	adds	r2, r3, #2
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	3b01      	subs	r3, #1
 80033cc:	b29a      	uxth	r2, r3
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80033d2:	e02b      	b.n	800342c <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	f003 0302 	and.w	r3, r3, #2
 80033de:	2b02      	cmp	r3, #2
 80033e0:	d112      	bne.n	8003408 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e6:	881a      	ldrh	r2, [r3, #0]
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f2:	1c9a      	adds	r2, r3, #2
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033fc:	b29b      	uxth	r3, r3
 80033fe:	3b01      	subs	r3, #1
 8003400:	b29a      	uxth	r2, r3
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	86da      	strh	r2, [r3, #54]	; 0x36
 8003406:	e011      	b.n	800342c <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003408:	f7fd fab8 	bl	800097c <HAL_GetTick>
 800340c:	4602      	mov	r2, r0
 800340e:	69bb      	ldr	r3, [r7, #24]
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	683a      	ldr	r2, [r7, #0]
 8003414:	429a      	cmp	r2, r3
 8003416:	d803      	bhi.n	8003420 <HAL_SPI_Transmit+0x168>
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800341e:	d102      	bne.n	8003426 <HAL_SPI_Transmit+0x16e>
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d102      	bne.n	800342c <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	77fb      	strb	r3, [r7, #31]
          goto error;
 800342a:	e074      	b.n	8003516 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003430:	b29b      	uxth	r3, r3
 8003432:	2b00      	cmp	r3, #0
 8003434:	d1ce      	bne.n	80033d4 <HAL_SPI_Transmit+0x11c>
 8003436:	e04c      	b.n	80034d2 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d002      	beq.n	8003446 <HAL_SPI_Transmit+0x18e>
 8003440:	8afb      	ldrh	r3, [r7, #22]
 8003442:	2b01      	cmp	r3, #1
 8003444:	d140      	bne.n	80034c8 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	330c      	adds	r3, #12
 8003450:	7812      	ldrb	r2, [r2, #0]
 8003452:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003458:	1c5a      	adds	r2, r3, #1
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003462:	b29b      	uxth	r3, r3
 8003464:	3b01      	subs	r3, #1
 8003466:	b29a      	uxth	r2, r3
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800346c:	e02c      	b.n	80034c8 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	f003 0302 	and.w	r3, r3, #2
 8003478:	2b02      	cmp	r3, #2
 800347a:	d113      	bne.n	80034a4 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	330c      	adds	r3, #12
 8003486:	7812      	ldrb	r2, [r2, #0]
 8003488:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800348e:	1c5a      	adds	r2, r3, #1
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003498:	b29b      	uxth	r3, r3
 800349a:	3b01      	subs	r3, #1
 800349c:	b29a      	uxth	r2, r3
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	86da      	strh	r2, [r3, #54]	; 0x36
 80034a2:	e011      	b.n	80034c8 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80034a4:	f7fd fa6a 	bl	800097c <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	69bb      	ldr	r3, [r7, #24]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	683a      	ldr	r2, [r7, #0]
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d803      	bhi.n	80034bc <HAL_SPI_Transmit+0x204>
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034ba:	d102      	bne.n	80034c2 <HAL_SPI_Transmit+0x20a>
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d102      	bne.n	80034c8 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80034c6:	e026      	b.n	8003516 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034cc:	b29b      	uxth	r3, r3
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d1cd      	bne.n	800346e <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80034d2:	69ba      	ldr	r2, [r7, #24]
 80034d4:	6839      	ldr	r1, [r7, #0]
 80034d6:	68f8      	ldr	r0, [r7, #12]
 80034d8:	f000 fbb8 	bl	8003c4c <SPI_EndRxTxTransaction>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d002      	beq.n	80034e8 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2220      	movs	r2, #32
 80034e6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d10a      	bne.n	8003506 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80034f0:	2300      	movs	r3, #0
 80034f2:	613b      	str	r3, [r7, #16]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	68db      	ldr	r3, [r3, #12]
 80034fa:	613b      	str	r3, [r7, #16]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	613b      	str	r3, [r7, #16]
 8003504:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800350a:	2b00      	cmp	r3, #0
 800350c:	d002      	beq.n	8003514 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	77fb      	strb	r3, [r7, #31]
 8003512:	e000      	b.n	8003516 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003514:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2201      	movs	r2, #1
 800351a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2200      	movs	r2, #0
 8003522:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003526:	7ffb      	ldrb	r3, [r7, #31]
}
 8003528:	4618      	mov	r0, r3
 800352a:	3720      	adds	r7, #32
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}

08003530 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b088      	sub	sp, #32
 8003534:	af02      	add	r7, sp, #8
 8003536:	60f8      	str	r0, [r7, #12]
 8003538:	60b9      	str	r1, [r7, #8]
 800353a:	603b      	str	r3, [r7, #0]
 800353c:	4613      	mov	r3, r2
 800353e:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003540:	2300      	movs	r3, #0
 8003542:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800354c:	d112      	bne.n	8003574 <HAL_SPI_Receive+0x44>
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d10e      	bne.n	8003574 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2204      	movs	r2, #4
 800355a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800355e:	88fa      	ldrh	r2, [r7, #6]
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	9300      	str	r3, [sp, #0]
 8003564:	4613      	mov	r3, r2
 8003566:	68ba      	ldr	r2, [r7, #8]
 8003568:	68b9      	ldr	r1, [r7, #8]
 800356a:	68f8      	ldr	r0, [r7, #12]
 800356c:	f000 f8f1 	bl	8003752 <HAL_SPI_TransmitReceive>
 8003570:	4603      	mov	r3, r0
 8003572:	e0ea      	b.n	800374a <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800357a:	2b01      	cmp	r3, #1
 800357c:	d101      	bne.n	8003582 <HAL_SPI_Receive+0x52>
 800357e:	2302      	movs	r3, #2
 8003580:	e0e3      	b.n	800374a <HAL_SPI_Receive+0x21a>
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2201      	movs	r2, #1
 8003586:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800358a:	f7fd f9f7 	bl	800097c <HAL_GetTick>
 800358e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003596:	b2db      	uxtb	r3, r3
 8003598:	2b01      	cmp	r3, #1
 800359a:	d002      	beq.n	80035a2 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800359c:	2302      	movs	r3, #2
 800359e:	75fb      	strb	r3, [r7, #23]
    goto error;
 80035a0:	e0ca      	b.n	8003738 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d002      	beq.n	80035ae <HAL_SPI_Receive+0x7e>
 80035a8:	88fb      	ldrh	r3, [r7, #6]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d102      	bne.n	80035b4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80035b2:	e0c1      	b.n	8003738 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2204      	movs	r2, #4
 80035b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2200      	movs	r2, #0
 80035c0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	68ba      	ldr	r2, [r7, #8]
 80035c6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	88fa      	ldrh	r2, [r7, #6]
 80035cc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	88fa      	ldrh	r2, [r7, #6]
 80035d2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2200      	movs	r2, #0
 80035d8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2200      	movs	r2, #0
 80035de:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2200      	movs	r2, #0
 80035e4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2200      	movs	r2, #0
 80035ea:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2200      	movs	r2, #0
 80035f0:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035fa:	d10f      	bne.n	800361c <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800360a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800361a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003626:	2b40      	cmp	r3, #64	; 0x40
 8003628:	d007      	beq.n	800363a <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003638:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	68db      	ldr	r3, [r3, #12]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d162      	bne.n	8003708 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003642:	e02e      	b.n	80036a2 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	f003 0301 	and.w	r3, r3, #1
 800364e:	2b01      	cmp	r3, #1
 8003650:	d115      	bne.n	800367e <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f103 020c 	add.w	r2, r3, #12
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800365e:	7812      	ldrb	r2, [r2, #0]
 8003660:	b2d2      	uxtb	r2, r2
 8003662:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003668:	1c5a      	adds	r2, r3, #1
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003672:	b29b      	uxth	r3, r3
 8003674:	3b01      	subs	r3, #1
 8003676:	b29a      	uxth	r2, r3
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800367c:	e011      	b.n	80036a2 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800367e:	f7fd f97d 	bl	800097c <HAL_GetTick>
 8003682:	4602      	mov	r2, r0
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	1ad3      	subs	r3, r2, r3
 8003688:	683a      	ldr	r2, [r7, #0]
 800368a:	429a      	cmp	r2, r3
 800368c:	d803      	bhi.n	8003696 <HAL_SPI_Receive+0x166>
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003694:	d102      	bne.n	800369c <HAL_SPI_Receive+0x16c>
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d102      	bne.n	80036a2 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800369c:	2303      	movs	r3, #3
 800369e:	75fb      	strb	r3, [r7, #23]
          goto error;
 80036a0:	e04a      	b.n	8003738 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d1cb      	bne.n	8003644 <HAL_SPI_Receive+0x114>
 80036ac:	e031      	b.n	8003712 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	f003 0301 	and.w	r3, r3, #1
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d113      	bne.n	80036e4 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	68da      	ldr	r2, [r3, #12]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036c6:	b292      	uxth	r2, r2
 80036c8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ce:	1c9a      	adds	r2, r3, #2
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036d8:	b29b      	uxth	r3, r3
 80036da:	3b01      	subs	r3, #1
 80036dc:	b29a      	uxth	r2, r3
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80036e2:	e011      	b.n	8003708 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036e4:	f7fd f94a 	bl	800097c <HAL_GetTick>
 80036e8:	4602      	mov	r2, r0
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	683a      	ldr	r2, [r7, #0]
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d803      	bhi.n	80036fc <HAL_SPI_Receive+0x1cc>
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80036fa:	d102      	bne.n	8003702 <HAL_SPI_Receive+0x1d2>
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d102      	bne.n	8003708 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003702:	2303      	movs	r3, #3
 8003704:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003706:	e017      	b.n	8003738 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800370c:	b29b      	uxth	r3, r3
 800370e:	2b00      	cmp	r3, #0
 8003710:	d1cd      	bne.n	80036ae <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003712:	693a      	ldr	r2, [r7, #16]
 8003714:	6839      	ldr	r1, [r7, #0]
 8003716:	68f8      	ldr	r0, [r7, #12]
 8003718:	f000 fa46 	bl	8003ba8 <SPI_EndRxTransaction>
 800371c:	4603      	mov	r3, r0
 800371e:	2b00      	cmp	r3, #0
 8003720:	d002      	beq.n	8003728 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2220      	movs	r2, #32
 8003726:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800372c:	2b00      	cmp	r3, #0
 800372e:	d002      	beq.n	8003736 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	75fb      	strb	r3, [r7, #23]
 8003734:	e000      	b.n	8003738 <HAL_SPI_Receive+0x208>
  }

error :
 8003736:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2201      	movs	r2, #1
 800373c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2200      	movs	r2, #0
 8003744:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003748:	7dfb      	ldrb	r3, [r7, #23]
}
 800374a:	4618      	mov	r0, r3
 800374c:	3718      	adds	r7, #24
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}

08003752 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003752:	b580      	push	{r7, lr}
 8003754:	b08c      	sub	sp, #48	; 0x30
 8003756:	af00      	add	r7, sp, #0
 8003758:	60f8      	str	r0, [r7, #12]
 800375a:	60b9      	str	r1, [r7, #8]
 800375c:	607a      	str	r2, [r7, #4]
 800375e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003760:	2301      	movs	r3, #1
 8003762:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003764:	2300      	movs	r3, #0
 8003766:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003770:	2b01      	cmp	r3, #1
 8003772:	d101      	bne.n	8003778 <HAL_SPI_TransmitReceive+0x26>
 8003774:	2302      	movs	r3, #2
 8003776:	e18a      	b.n	8003a8e <HAL_SPI_TransmitReceive+0x33c>
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2201      	movs	r2, #1
 800377c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003780:	f7fd f8fc 	bl	800097c <HAL_GetTick>
 8003784:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800378c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003796:	887b      	ldrh	r3, [r7, #2]
 8003798:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800379a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d00f      	beq.n	80037c2 <HAL_SPI_TransmitReceive+0x70>
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037a8:	d107      	bne.n	80037ba <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d103      	bne.n	80037ba <HAL_SPI_TransmitReceive+0x68>
 80037b2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80037b6:	2b04      	cmp	r3, #4
 80037b8:	d003      	beq.n	80037c2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80037ba:	2302      	movs	r3, #2
 80037bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80037c0:	e15b      	b.n	8003a7a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d005      	beq.n	80037d4 <HAL_SPI_TransmitReceive+0x82>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d002      	beq.n	80037d4 <HAL_SPI_TransmitReceive+0x82>
 80037ce:	887b      	ldrh	r3, [r7, #2]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d103      	bne.n	80037dc <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80037da:	e14e      	b.n	8003a7a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80037e2:	b2db      	uxtb	r3, r3
 80037e4:	2b04      	cmp	r3, #4
 80037e6:	d003      	beq.n	80037f0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2205      	movs	r2, #5
 80037ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2200      	movs	r2, #0
 80037f4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	687a      	ldr	r2, [r7, #4]
 80037fa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	887a      	ldrh	r2, [r7, #2]
 8003800:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	887a      	ldrh	r2, [r7, #2]
 8003806:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	68ba      	ldr	r2, [r7, #8]
 800380c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	887a      	ldrh	r2, [r7, #2]
 8003812:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	887a      	ldrh	r2, [r7, #2]
 8003818:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2200      	movs	r2, #0
 800381e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2200      	movs	r2, #0
 8003824:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003830:	2b40      	cmp	r3, #64	; 0x40
 8003832:	d007      	beq.n	8003844 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003842:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800384c:	d178      	bne.n	8003940 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d002      	beq.n	800385c <HAL_SPI_TransmitReceive+0x10a>
 8003856:	8b7b      	ldrh	r3, [r7, #26]
 8003858:	2b01      	cmp	r3, #1
 800385a:	d166      	bne.n	800392a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003860:	881a      	ldrh	r2, [r3, #0]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800386c:	1c9a      	adds	r2, r3, #2
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003876:	b29b      	uxth	r3, r3
 8003878:	3b01      	subs	r3, #1
 800387a:	b29a      	uxth	r2, r3
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003880:	e053      	b.n	800392a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	f003 0302 	and.w	r3, r3, #2
 800388c:	2b02      	cmp	r3, #2
 800388e:	d11b      	bne.n	80038c8 <HAL_SPI_TransmitReceive+0x176>
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003894:	b29b      	uxth	r3, r3
 8003896:	2b00      	cmp	r3, #0
 8003898:	d016      	beq.n	80038c8 <HAL_SPI_TransmitReceive+0x176>
 800389a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800389c:	2b01      	cmp	r3, #1
 800389e:	d113      	bne.n	80038c8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a4:	881a      	ldrh	r2, [r3, #0]
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b0:	1c9a      	adds	r2, r3, #2
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	3b01      	subs	r3, #1
 80038be:	b29a      	uxth	r2, r3
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80038c4:	2300      	movs	r3, #0
 80038c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	f003 0301 	and.w	r3, r3, #1
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	d119      	bne.n	800390a <HAL_SPI_TransmitReceive+0x1b8>
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038da:	b29b      	uxth	r3, r3
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d014      	beq.n	800390a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	68da      	ldr	r2, [r3, #12]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ea:	b292      	uxth	r2, r2
 80038ec:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038f2:	1c9a      	adds	r2, r3, #2
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038fc:	b29b      	uxth	r3, r3
 80038fe:	3b01      	subs	r3, #1
 8003900:	b29a      	uxth	r2, r3
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003906:	2301      	movs	r3, #1
 8003908:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800390a:	f7fd f837 	bl	800097c <HAL_GetTick>
 800390e:	4602      	mov	r2, r0
 8003910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003912:	1ad3      	subs	r3, r2, r3
 8003914:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003916:	429a      	cmp	r2, r3
 8003918:	d807      	bhi.n	800392a <HAL_SPI_TransmitReceive+0x1d8>
 800391a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800391c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003920:	d003      	beq.n	800392a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003928:	e0a7      	b.n	8003a7a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800392e:	b29b      	uxth	r3, r3
 8003930:	2b00      	cmp	r3, #0
 8003932:	d1a6      	bne.n	8003882 <HAL_SPI_TransmitReceive+0x130>
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003938:	b29b      	uxth	r3, r3
 800393a:	2b00      	cmp	r3, #0
 800393c:	d1a1      	bne.n	8003882 <HAL_SPI_TransmitReceive+0x130>
 800393e:	e07c      	b.n	8003a3a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d002      	beq.n	800394e <HAL_SPI_TransmitReceive+0x1fc>
 8003948:	8b7b      	ldrh	r3, [r7, #26]
 800394a:	2b01      	cmp	r3, #1
 800394c:	d16b      	bne.n	8003a26 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	330c      	adds	r3, #12
 8003958:	7812      	ldrb	r2, [r2, #0]
 800395a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003960:	1c5a      	adds	r2, r3, #1
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800396a:	b29b      	uxth	r3, r3
 800396c:	3b01      	subs	r3, #1
 800396e:	b29a      	uxth	r2, r3
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003974:	e057      	b.n	8003a26 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	f003 0302 	and.w	r3, r3, #2
 8003980:	2b02      	cmp	r3, #2
 8003982:	d11c      	bne.n	80039be <HAL_SPI_TransmitReceive+0x26c>
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003988:	b29b      	uxth	r3, r3
 800398a:	2b00      	cmp	r3, #0
 800398c:	d017      	beq.n	80039be <HAL_SPI_TransmitReceive+0x26c>
 800398e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003990:	2b01      	cmp	r3, #1
 8003992:	d114      	bne.n	80039be <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	330c      	adds	r3, #12
 800399e:	7812      	ldrb	r2, [r2, #0]
 80039a0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a6:	1c5a      	adds	r2, r3, #1
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039b0:	b29b      	uxth	r3, r3
 80039b2:	3b01      	subs	r3, #1
 80039b4:	b29a      	uxth	r2, r3
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80039ba:	2300      	movs	r3, #0
 80039bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	f003 0301 	and.w	r3, r3, #1
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d119      	bne.n	8003a00 <HAL_SPI_TransmitReceive+0x2ae>
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d014      	beq.n	8003a00 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	68da      	ldr	r2, [r3, #12]
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039e0:	b2d2      	uxtb	r2, r2
 80039e2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039e8:	1c5a      	adds	r2, r3, #1
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039f2:	b29b      	uxth	r3, r3
 80039f4:	3b01      	subs	r3, #1
 80039f6:	b29a      	uxth	r2, r3
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80039fc:	2301      	movs	r3, #1
 80039fe:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003a00:	f7fc ffbc 	bl	800097c <HAL_GetTick>
 8003a04:	4602      	mov	r2, r0
 8003a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d803      	bhi.n	8003a18 <HAL_SPI_TransmitReceive+0x2c6>
 8003a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a16:	d102      	bne.n	8003a1e <HAL_SPI_TransmitReceive+0x2cc>
 8003a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d103      	bne.n	8003a26 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003a24:	e029      	b.n	8003a7a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d1a2      	bne.n	8003976 <HAL_SPI_TransmitReceive+0x224>
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a34:	b29b      	uxth	r3, r3
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d19d      	bne.n	8003976 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a3c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003a3e:	68f8      	ldr	r0, [r7, #12]
 8003a40:	f000 f904 	bl	8003c4c <SPI_EndRxTxTransaction>
 8003a44:	4603      	mov	r3, r0
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d006      	beq.n	8003a58 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2220      	movs	r2, #32
 8003a54:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003a56:	e010      	b.n	8003a7a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d10b      	bne.n	8003a78 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a60:	2300      	movs	r3, #0
 8003a62:	617b      	str	r3, [r7, #20]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	68db      	ldr	r3, [r3, #12]
 8003a6a:	617b      	str	r3, [r7, #20]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	617b      	str	r3, [r7, #20]
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	e000      	b.n	8003a7a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003a78:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2200      	movs	r2, #0
 8003a86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003a8a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3730      	adds	r7, #48	; 0x30
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
	...

08003a98 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b088      	sub	sp, #32
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	60f8      	str	r0, [r7, #12]
 8003aa0:	60b9      	str	r1, [r7, #8]
 8003aa2:	603b      	str	r3, [r7, #0]
 8003aa4:	4613      	mov	r3, r2
 8003aa6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003aa8:	f7fc ff68 	bl	800097c <HAL_GetTick>
 8003aac:	4602      	mov	r2, r0
 8003aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ab0:	1a9b      	subs	r3, r3, r2
 8003ab2:	683a      	ldr	r2, [r7, #0]
 8003ab4:	4413      	add	r3, r2
 8003ab6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003ab8:	f7fc ff60 	bl	800097c <HAL_GetTick>
 8003abc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003abe:	4b39      	ldr	r3, [pc, #228]	; (8003ba4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	015b      	lsls	r3, r3, #5
 8003ac4:	0d1b      	lsrs	r3, r3, #20
 8003ac6:	69fa      	ldr	r2, [r7, #28]
 8003ac8:	fb02 f303 	mul.w	r3, r2, r3
 8003acc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ace:	e054      	b.n	8003b7a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ad6:	d050      	beq.n	8003b7a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003ad8:	f7fc ff50 	bl	800097c <HAL_GetTick>
 8003adc:	4602      	mov	r2, r0
 8003ade:	69bb      	ldr	r3, [r7, #24]
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	69fa      	ldr	r2, [r7, #28]
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d902      	bls.n	8003aee <SPI_WaitFlagStateUntilTimeout+0x56>
 8003ae8:	69fb      	ldr	r3, [r7, #28]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d13d      	bne.n	8003b6a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	685a      	ldr	r2, [r3, #4]
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003afc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b06:	d111      	bne.n	8003b2c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b10:	d004      	beq.n	8003b1c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b1a:	d107      	bne.n	8003b2c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b2a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b34:	d10f      	bne.n	8003b56 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b44:	601a      	str	r2, [r3, #0]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b54:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2201      	movs	r2, #1
 8003b5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2200      	movs	r2, #0
 8003b62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003b66:	2303      	movs	r3, #3
 8003b68:	e017      	b.n	8003b9a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d101      	bne.n	8003b74 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003b70:	2300      	movs	r3, #0
 8003b72:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	3b01      	subs	r3, #1
 8003b78:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	689a      	ldr	r2, [r3, #8]
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	4013      	ands	r3, r2
 8003b84:	68ba      	ldr	r2, [r7, #8]
 8003b86:	429a      	cmp	r2, r3
 8003b88:	bf0c      	ite	eq
 8003b8a:	2301      	moveq	r3, #1
 8003b8c:	2300      	movne	r3, #0
 8003b8e:	b2db      	uxtb	r3, r3
 8003b90:	461a      	mov	r2, r3
 8003b92:	79fb      	ldrb	r3, [r7, #7]
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d19b      	bne.n	8003ad0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003b98:	2300      	movs	r3, #0
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3720      	adds	r7, #32
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	20000000 	.word	0x20000000

08003ba8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b086      	sub	sp, #24
 8003bac:	af02      	add	r7, sp, #8
 8003bae:	60f8      	str	r0, [r7, #12]
 8003bb0:	60b9      	str	r1, [r7, #8]
 8003bb2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bbc:	d111      	bne.n	8003be2 <SPI_EndRxTransaction+0x3a>
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bc6:	d004      	beq.n	8003bd2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bd0:	d107      	bne.n	8003be2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003be0:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bea:	d117      	bne.n	8003c1c <SPI_EndRxTransaction+0x74>
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bf4:	d112      	bne.n	8003c1c <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	9300      	str	r3, [sp, #0]
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	2101      	movs	r1, #1
 8003c00:	68f8      	ldr	r0, [r7, #12]
 8003c02:	f7ff ff49 	bl	8003a98 <SPI_WaitFlagStateUntilTimeout>
 8003c06:	4603      	mov	r3, r0
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d01a      	beq.n	8003c42 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c10:	f043 0220 	orr.w	r2, r3, #32
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003c18:	2303      	movs	r3, #3
 8003c1a:	e013      	b.n	8003c44 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	9300      	str	r3, [sp, #0]
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	2200      	movs	r2, #0
 8003c24:	2180      	movs	r1, #128	; 0x80
 8003c26:	68f8      	ldr	r0, [r7, #12]
 8003c28:	f7ff ff36 	bl	8003a98 <SPI_WaitFlagStateUntilTimeout>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d007      	beq.n	8003c42 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c36:	f043 0220 	orr.w	r2, r3, #32
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	e000      	b.n	8003c44 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8003c42:	2300      	movs	r3, #0
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	3710      	adds	r7, #16
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}

08003c4c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b086      	sub	sp, #24
 8003c50:	af02      	add	r7, sp, #8
 8003c52:	60f8      	str	r0, [r7, #12]
 8003c54:	60b9      	str	r1, [r7, #8]
 8003c56:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	9300      	str	r3, [sp, #0]
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	2180      	movs	r1, #128	; 0x80
 8003c62:	68f8      	ldr	r0, [r7, #12]
 8003c64:	f7ff ff18 	bl	8003a98 <SPI_WaitFlagStateUntilTimeout>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d007      	beq.n	8003c7e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c72:	f043 0220 	orr.w	r2, r3, #32
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	e000      	b.n	8003c80 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003c7e:	2300      	movs	r3, #0
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3710      	adds	r7, #16
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}

08003c88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b082      	sub	sp, #8
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d101      	bne.n	8003c9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e041      	b.n	8003d1e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d106      	bne.n	8003cb4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f7fc fd74 	bl	800079c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2202      	movs	r2, #2
 8003cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	3304      	adds	r3, #4
 8003cc4:	4619      	mov	r1, r3
 8003cc6:	4610      	mov	r0, r2
 8003cc8:	f000 fb1a 	bl	8004300 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2201      	movs	r2, #1
 8003d08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2201      	movs	r2, #1
 8003d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d1c:	2300      	movs	r3, #0
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3708      	adds	r7, #8
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
	...

08003d28 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b085      	sub	sp, #20
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d001      	beq.n	8003d40 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e035      	b.n	8003dac <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2202      	movs	r2, #2
 8003d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	68da      	ldr	r2, [r3, #12]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f042 0201 	orr.w	r2, r2, #1
 8003d56:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d60:	d009      	beq.n	8003d76 <HAL_TIM_Base_Start_IT+0x4e>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a14      	ldr	r2, [pc, #80]	; (8003db8 <HAL_TIM_Base_Start_IT+0x90>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d004      	beq.n	8003d76 <HAL_TIM_Base_Start_IT+0x4e>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a12      	ldr	r2, [pc, #72]	; (8003dbc <HAL_TIM_Base_Start_IT+0x94>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d111      	bne.n	8003d9a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	f003 0307 	and.w	r3, r3, #7
 8003d80:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2b06      	cmp	r3, #6
 8003d86:	d010      	beq.n	8003daa <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f042 0201 	orr.w	r2, r2, #1
 8003d96:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d98:	e007      	b.n	8003daa <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f042 0201 	orr.w	r2, r2, #1
 8003da8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003daa:	2300      	movs	r3, #0
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3714      	adds	r7, #20
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bc80      	pop	{r7}
 8003db4:	4770      	bx	lr
 8003db6:	bf00      	nop
 8003db8:	40000400 	.word	0x40000400
 8003dbc:	40000800 	.word	0x40000800

08003dc0 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b082      	sub	sp, #8
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d101      	bne.n	8003dd2 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e041      	b.n	8003e56 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d106      	bne.n	8003dec <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2200      	movs	r2, #0
 8003de2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f000 f839 	bl	8003e5e <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2202      	movs	r2, #2
 8003df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	3304      	adds	r3, #4
 8003dfc:	4619      	mov	r1, r3
 8003dfe:	4610      	mov	r0, r2
 8003e00:	f000 fa7e 	bl	8004300 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2201      	movs	r2, #1
 8003e08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2201      	movs	r2, #1
 8003e28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2201      	movs	r2, #1
 8003e38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2201      	movs	r2, #1
 8003e48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e54:	2300      	movs	r3, #0
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3708      	adds	r7, #8
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}

08003e5e <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8003e5e:	b480      	push	{r7}
 8003e60:	b083      	sub	sp, #12
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8003e66:	bf00      	nop
 8003e68:	370c      	adds	r7, #12
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bc80      	pop	{r7}
 8003e6e:	4770      	bx	lr

08003e70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b082      	sub	sp, #8
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	691b      	ldr	r3, [r3, #16]
 8003e7e:	f003 0302 	and.w	r3, r3, #2
 8003e82:	2b02      	cmp	r3, #2
 8003e84:	d122      	bne.n	8003ecc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	f003 0302 	and.w	r3, r3, #2
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	d11b      	bne.n	8003ecc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f06f 0202 	mvn.w	r2, #2
 8003e9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	699b      	ldr	r3, [r3, #24]
 8003eaa:	f003 0303 	and.w	r3, r3, #3
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d003      	beq.n	8003eba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f000 fa09 	bl	80042ca <HAL_TIM_IC_CaptureCallback>
 8003eb8:	e005      	b.n	8003ec6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f000 f9fc 	bl	80042b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f000 fa0b 	bl	80042dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	691b      	ldr	r3, [r3, #16]
 8003ed2:	f003 0304 	and.w	r3, r3, #4
 8003ed6:	2b04      	cmp	r3, #4
 8003ed8:	d122      	bne.n	8003f20 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	f003 0304 	and.w	r3, r3, #4
 8003ee4:	2b04      	cmp	r3, #4
 8003ee6:	d11b      	bne.n	8003f20 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f06f 0204 	mvn.w	r2, #4
 8003ef0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2202      	movs	r2, #2
 8003ef6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	699b      	ldr	r3, [r3, #24]
 8003efe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d003      	beq.n	8003f0e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f000 f9df 	bl	80042ca <HAL_TIM_IC_CaptureCallback>
 8003f0c:	e005      	b.n	8003f1a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f000 f9d2 	bl	80042b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	f000 f9e1 	bl	80042dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	691b      	ldr	r3, [r3, #16]
 8003f26:	f003 0308 	and.w	r3, r3, #8
 8003f2a:	2b08      	cmp	r3, #8
 8003f2c:	d122      	bne.n	8003f74 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	f003 0308 	and.w	r3, r3, #8
 8003f38:	2b08      	cmp	r3, #8
 8003f3a:	d11b      	bne.n	8003f74 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f06f 0208 	mvn.w	r2, #8
 8003f44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2204      	movs	r2, #4
 8003f4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	69db      	ldr	r3, [r3, #28]
 8003f52:	f003 0303 	and.w	r3, r3, #3
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d003      	beq.n	8003f62 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f000 f9b5 	bl	80042ca <HAL_TIM_IC_CaptureCallback>
 8003f60:	e005      	b.n	8003f6e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f000 f9a8 	bl	80042b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	f000 f9b7 	bl	80042dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	691b      	ldr	r3, [r3, #16]
 8003f7a:	f003 0310 	and.w	r3, r3, #16
 8003f7e:	2b10      	cmp	r3, #16
 8003f80:	d122      	bne.n	8003fc8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	f003 0310 	and.w	r3, r3, #16
 8003f8c:	2b10      	cmp	r3, #16
 8003f8e:	d11b      	bne.n	8003fc8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f06f 0210 	mvn.w	r2, #16
 8003f98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2208      	movs	r2, #8
 8003f9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	69db      	ldr	r3, [r3, #28]
 8003fa6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d003      	beq.n	8003fb6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f000 f98b 	bl	80042ca <HAL_TIM_IC_CaptureCallback>
 8003fb4:	e005      	b.n	8003fc2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f000 f97e 	bl	80042b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fbc:	6878      	ldr	r0, [r7, #4]
 8003fbe:	f000 f98d 	bl	80042dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	691b      	ldr	r3, [r3, #16]
 8003fce:	f003 0301 	and.w	r3, r3, #1
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	d10e      	bne.n	8003ff4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	f003 0301 	and.w	r3, r3, #1
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d107      	bne.n	8003ff4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f06f 0201 	mvn.w	r2, #1
 8003fec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f7fc f8ac 	bl	800014c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	691b      	ldr	r3, [r3, #16]
 8003ffa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ffe:	2b80      	cmp	r3, #128	; 0x80
 8004000:	d10e      	bne.n	8004020 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800400c:	2b80      	cmp	r3, #128	; 0x80
 800400e:	d107      	bne.n	8004020 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004018:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f000 fbad 	bl	800477a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	691b      	ldr	r3, [r3, #16]
 8004026:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800402a:	2b40      	cmp	r3, #64	; 0x40
 800402c:	d10e      	bne.n	800404c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004038:	2b40      	cmp	r3, #64	; 0x40
 800403a:	d107      	bne.n	800404c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004044:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f000 f951 	bl	80042ee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	691b      	ldr	r3, [r3, #16]
 8004052:	f003 0320 	and.w	r3, r3, #32
 8004056:	2b20      	cmp	r3, #32
 8004058:	d10e      	bne.n	8004078 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	68db      	ldr	r3, [r3, #12]
 8004060:	f003 0320 	and.w	r3, r3, #32
 8004064:	2b20      	cmp	r3, #32
 8004066:	d107      	bne.n	8004078 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f06f 0220 	mvn.w	r2, #32
 8004070:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f000 fb78 	bl	8004768 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004078:	bf00      	nop
 800407a:	3708      	adds	r7, #8
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}

08004080 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b084      	sub	sp, #16
 8004084:	af00      	add	r7, sp, #0
 8004086:	60f8      	str	r0, [r7, #12]
 8004088:	60b9      	str	r1, [r7, #8]
 800408a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004092:	2b01      	cmp	r3, #1
 8004094:	d101      	bne.n	800409a <HAL_TIM_OC_ConfigChannel+0x1a>
 8004096:	2302      	movs	r3, #2
 8004098:	e046      	b.n	8004128 <HAL_TIM_OC_ConfigChannel+0xa8>
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2201      	movs	r2, #1
 800409e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2b0c      	cmp	r3, #12
 80040a6:	d839      	bhi.n	800411c <HAL_TIM_OC_ConfigChannel+0x9c>
 80040a8:	a201      	add	r2, pc, #4	; (adr r2, 80040b0 <HAL_TIM_OC_ConfigChannel+0x30>)
 80040aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ae:	bf00      	nop
 80040b0:	080040e5 	.word	0x080040e5
 80040b4:	0800411d 	.word	0x0800411d
 80040b8:	0800411d 	.word	0x0800411d
 80040bc:	0800411d 	.word	0x0800411d
 80040c0:	080040f3 	.word	0x080040f3
 80040c4:	0800411d 	.word	0x0800411d
 80040c8:	0800411d 	.word	0x0800411d
 80040cc:	0800411d 	.word	0x0800411d
 80040d0:	08004101 	.word	0x08004101
 80040d4:	0800411d 	.word	0x0800411d
 80040d8:	0800411d 	.word	0x0800411d
 80040dc:	0800411d 	.word	0x0800411d
 80040e0:	0800410f 	.word	0x0800410f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	68b9      	ldr	r1, [r7, #8]
 80040ea:	4618      	mov	r0, r3
 80040ec:	f000 f958 	bl	80043a0 <TIM_OC1_SetConfig>
      break;
 80040f0:	e015      	b.n	800411e <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	68b9      	ldr	r1, [r7, #8]
 80040f8:	4618      	mov	r0, r3
 80040fa:	f000 f98d 	bl	8004418 <TIM_OC2_SetConfig>
      break;
 80040fe:	e00e      	b.n	800411e <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	68b9      	ldr	r1, [r7, #8]
 8004106:	4618      	mov	r0, r3
 8004108:	f000 f9c4 	bl	8004494 <TIM_OC3_SetConfig>
      break;
 800410c:	e007      	b.n	800411e <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	68b9      	ldr	r1, [r7, #8]
 8004114:	4618      	mov	r0, r3
 8004116:	f000 f9fa 	bl	800450e <TIM_OC4_SetConfig>
      break;
 800411a:	e000      	b.n	800411e <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 800411c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2200      	movs	r2, #0
 8004122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004126:	2300      	movs	r3, #0
}
 8004128:	4618      	mov	r0, r3
 800412a:	3710      	adds	r7, #16
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}

08004130 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b084      	sub	sp, #16
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004140:	2b01      	cmp	r3, #1
 8004142:	d101      	bne.n	8004148 <HAL_TIM_ConfigClockSource+0x18>
 8004144:	2302      	movs	r3, #2
 8004146:	e0b3      	b.n	80042b0 <HAL_TIM_ConfigClockSource+0x180>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2201      	movs	r2, #1
 800414c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2202      	movs	r2, #2
 8004154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004166:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800416e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	68fa      	ldr	r2, [r7, #12]
 8004176:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004180:	d03e      	beq.n	8004200 <HAL_TIM_ConfigClockSource+0xd0>
 8004182:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004186:	f200 8087 	bhi.w	8004298 <HAL_TIM_ConfigClockSource+0x168>
 800418a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800418e:	f000 8085 	beq.w	800429c <HAL_TIM_ConfigClockSource+0x16c>
 8004192:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004196:	d87f      	bhi.n	8004298 <HAL_TIM_ConfigClockSource+0x168>
 8004198:	2b70      	cmp	r3, #112	; 0x70
 800419a:	d01a      	beq.n	80041d2 <HAL_TIM_ConfigClockSource+0xa2>
 800419c:	2b70      	cmp	r3, #112	; 0x70
 800419e:	d87b      	bhi.n	8004298 <HAL_TIM_ConfigClockSource+0x168>
 80041a0:	2b60      	cmp	r3, #96	; 0x60
 80041a2:	d050      	beq.n	8004246 <HAL_TIM_ConfigClockSource+0x116>
 80041a4:	2b60      	cmp	r3, #96	; 0x60
 80041a6:	d877      	bhi.n	8004298 <HAL_TIM_ConfigClockSource+0x168>
 80041a8:	2b50      	cmp	r3, #80	; 0x50
 80041aa:	d03c      	beq.n	8004226 <HAL_TIM_ConfigClockSource+0xf6>
 80041ac:	2b50      	cmp	r3, #80	; 0x50
 80041ae:	d873      	bhi.n	8004298 <HAL_TIM_ConfigClockSource+0x168>
 80041b0:	2b40      	cmp	r3, #64	; 0x40
 80041b2:	d058      	beq.n	8004266 <HAL_TIM_ConfigClockSource+0x136>
 80041b4:	2b40      	cmp	r3, #64	; 0x40
 80041b6:	d86f      	bhi.n	8004298 <HAL_TIM_ConfigClockSource+0x168>
 80041b8:	2b30      	cmp	r3, #48	; 0x30
 80041ba:	d064      	beq.n	8004286 <HAL_TIM_ConfigClockSource+0x156>
 80041bc:	2b30      	cmp	r3, #48	; 0x30
 80041be:	d86b      	bhi.n	8004298 <HAL_TIM_ConfigClockSource+0x168>
 80041c0:	2b20      	cmp	r3, #32
 80041c2:	d060      	beq.n	8004286 <HAL_TIM_ConfigClockSource+0x156>
 80041c4:	2b20      	cmp	r3, #32
 80041c6:	d867      	bhi.n	8004298 <HAL_TIM_ConfigClockSource+0x168>
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d05c      	beq.n	8004286 <HAL_TIM_ConfigClockSource+0x156>
 80041cc:	2b10      	cmp	r3, #16
 80041ce:	d05a      	beq.n	8004286 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80041d0:	e062      	b.n	8004298 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6818      	ldr	r0, [r3, #0]
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	6899      	ldr	r1, [r3, #8]
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	685a      	ldr	r2, [r3, #4]
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	68db      	ldr	r3, [r3, #12]
 80041e2:	f000 fa49 	bl	8004678 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80041f4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	68fa      	ldr	r2, [r7, #12]
 80041fc:	609a      	str	r2, [r3, #8]
      break;
 80041fe:	e04e      	b.n	800429e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6818      	ldr	r0, [r3, #0]
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	6899      	ldr	r1, [r3, #8]
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	685a      	ldr	r2, [r3, #4]
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	f000 fa32 	bl	8004678 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	689a      	ldr	r2, [r3, #8]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004222:	609a      	str	r2, [r3, #8]
      break;
 8004224:	e03b      	b.n	800429e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6818      	ldr	r0, [r3, #0]
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	6859      	ldr	r1, [r3, #4]
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	68db      	ldr	r3, [r3, #12]
 8004232:	461a      	mov	r2, r3
 8004234:	f000 f9a9 	bl	800458a <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	2150      	movs	r1, #80	; 0x50
 800423e:	4618      	mov	r0, r3
 8004240:	f000 fa00 	bl	8004644 <TIM_ITRx_SetConfig>
      break;
 8004244:	e02b      	b.n	800429e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6818      	ldr	r0, [r3, #0]
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	6859      	ldr	r1, [r3, #4]
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	68db      	ldr	r3, [r3, #12]
 8004252:	461a      	mov	r2, r3
 8004254:	f000 f9c7 	bl	80045e6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	2160      	movs	r1, #96	; 0x60
 800425e:	4618      	mov	r0, r3
 8004260:	f000 f9f0 	bl	8004644 <TIM_ITRx_SetConfig>
      break;
 8004264:	e01b      	b.n	800429e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6818      	ldr	r0, [r3, #0]
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	6859      	ldr	r1, [r3, #4]
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	68db      	ldr	r3, [r3, #12]
 8004272:	461a      	mov	r2, r3
 8004274:	f000 f989 	bl	800458a <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	2140      	movs	r1, #64	; 0x40
 800427e:	4618      	mov	r0, r3
 8004280:	f000 f9e0 	bl	8004644 <TIM_ITRx_SetConfig>
      break;
 8004284:	e00b      	b.n	800429e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4619      	mov	r1, r3
 8004290:	4610      	mov	r0, r2
 8004292:	f000 f9d7 	bl	8004644 <TIM_ITRx_SetConfig>
        break;
 8004296:	e002      	b.n	800429e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004298:	bf00      	nop
 800429a:	e000      	b.n	800429e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800429c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2201      	movs	r2, #1
 80042a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2200      	movs	r2, #0
 80042aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80042ae:	2300      	movs	r3, #0
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	3710      	adds	r7, #16
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}

080042b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b083      	sub	sp, #12
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80042c0:	bf00      	nop
 80042c2:	370c      	adds	r7, #12
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bc80      	pop	{r7}
 80042c8:	4770      	bx	lr

080042ca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80042ca:	b480      	push	{r7}
 80042cc:	b083      	sub	sp, #12
 80042ce:	af00      	add	r7, sp, #0
 80042d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80042d2:	bf00      	nop
 80042d4:	370c      	adds	r7, #12
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bc80      	pop	{r7}
 80042da:	4770      	bx	lr

080042dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80042dc:	b480      	push	{r7}
 80042de:	b083      	sub	sp, #12
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80042e4:	bf00      	nop
 80042e6:	370c      	adds	r7, #12
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bc80      	pop	{r7}
 80042ec:	4770      	bx	lr

080042ee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80042ee:	b480      	push	{r7}
 80042f0:	b083      	sub	sp, #12
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80042f6:	bf00      	nop
 80042f8:	370c      	adds	r7, #12
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bc80      	pop	{r7}
 80042fe:	4770      	bx	lr

08004300 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004300:	b480      	push	{r7}
 8004302:	b085      	sub	sp, #20
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
 8004308:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004316:	d007      	beq.n	8004328 <TIM_Base_SetConfig+0x28>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	4a1f      	ldr	r2, [pc, #124]	; (8004398 <TIM_Base_SetConfig+0x98>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d003      	beq.n	8004328 <TIM_Base_SetConfig+0x28>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	4a1e      	ldr	r2, [pc, #120]	; (800439c <TIM_Base_SetConfig+0x9c>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d108      	bne.n	800433a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800432e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	68fa      	ldr	r2, [r7, #12]
 8004336:	4313      	orrs	r3, r2
 8004338:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004340:	d007      	beq.n	8004352 <TIM_Base_SetConfig+0x52>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	4a14      	ldr	r2, [pc, #80]	; (8004398 <TIM_Base_SetConfig+0x98>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d003      	beq.n	8004352 <TIM_Base_SetConfig+0x52>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	4a13      	ldr	r2, [pc, #76]	; (800439c <TIM_Base_SetConfig+0x9c>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d108      	bne.n	8004364 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004358:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	68db      	ldr	r3, [r3, #12]
 800435e:	68fa      	ldr	r2, [r7, #12]
 8004360:	4313      	orrs	r3, r2
 8004362:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	695b      	ldr	r3, [r3, #20]
 800436e:	4313      	orrs	r3, r2
 8004370:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	68fa      	ldr	r2, [r7, #12]
 8004376:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	689a      	ldr	r2, [r3, #8]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	629a      	str	r2, [r3, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2201      	movs	r2, #1
 800438c:	615a      	str	r2, [r3, #20]
}
 800438e:	bf00      	nop
 8004390:	3714      	adds	r7, #20
 8004392:	46bd      	mov	sp, r7
 8004394:	bc80      	pop	{r7}
 8004396:	4770      	bx	lr
 8004398:	40000400 	.word	0x40000400
 800439c:	40000800 	.word	0x40000800

080043a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b087      	sub	sp, #28
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
 80043a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6a1b      	ldr	r3, [r3, #32]
 80043ae:	f023 0201 	bic.w	r2, r3, #1
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6a1b      	ldr	r3, [r3, #32]
 80043ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	699b      	ldr	r3, [r3, #24]
 80043c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	f023 0303 	bic.w	r3, r3, #3
 80043d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	68fa      	ldr	r2, [r7, #12]
 80043de:	4313      	orrs	r3, r2
 80043e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	f023 0302 	bic.w	r3, r3, #2
 80043e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	697a      	ldr	r2, [r7, #20]
 80043f0:	4313      	orrs	r3, r2
 80043f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	693a      	ldr	r2, [r7, #16]
 80043f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	68fa      	ldr	r2, [r7, #12]
 80043fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	685a      	ldr	r2, [r3, #4]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	697a      	ldr	r2, [r7, #20]
 800440c:	621a      	str	r2, [r3, #32]
}
 800440e:	bf00      	nop
 8004410:	371c      	adds	r7, #28
 8004412:	46bd      	mov	sp, r7
 8004414:	bc80      	pop	{r7}
 8004416:	4770      	bx	lr

08004418 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004418:	b480      	push	{r7}
 800441a:	b087      	sub	sp, #28
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
 8004420:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6a1b      	ldr	r3, [r3, #32]
 8004426:	f023 0210 	bic.w	r2, r3, #16
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6a1b      	ldr	r3, [r3, #32]
 8004432:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	699b      	ldr	r3, [r3, #24]
 800443e:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004446:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800444e:	613b      	str	r3, [r7, #16]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	021b      	lsls	r3, r3, #8
 8004456:	693a      	ldr	r2, [r7, #16]
 8004458:	4313      	orrs	r3, r2
 800445a:	613b      	str	r3, [r7, #16]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	f023 0320 	bic.w	r3, r3, #32
 8004462:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	011b      	lsls	r3, r3, #4
 800446a:	68fa      	ldr	r2, [r7, #12]
 800446c:	4313      	orrs	r3, r2
 800446e:	60fb      	str	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	697a      	ldr	r2, [r7, #20]
 8004474:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	693a      	ldr	r2, [r7, #16]
 800447a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	685a      	ldr	r2, [r3, #4]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	68fa      	ldr	r2, [r7, #12]
 8004488:	621a      	str	r2, [r3, #32]
}
 800448a:	bf00      	nop
 800448c:	371c      	adds	r7, #28
 800448e:	46bd      	mov	sp, r7
 8004490:	bc80      	pop	{r7}
 8004492:	4770      	bx	lr

08004494 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004494:	b480      	push	{r7}
 8004496:	b087      	sub	sp, #28
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
 800449c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6a1b      	ldr	r3, [r3, #32]
 80044a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6a1b      	ldr	r3, [r3, #32]
 80044ae:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	69db      	ldr	r3, [r3, #28]
 80044ba:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044c2:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	f023 0303 	bic.w	r3, r3, #3
 80044ca:	613b      	str	r3, [r7, #16]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	693a      	ldr	r2, [r7, #16]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	613b      	str	r3, [r7, #16]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80044dc:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	021b      	lsls	r3, r3, #8
 80044e4:	68fa      	ldr	r2, [r7, #12]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	60fb      	str	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	697a      	ldr	r2, [r7, #20]
 80044ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	693a      	ldr	r2, [r7, #16]
 80044f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	685a      	ldr	r2, [r3, #4]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	68fa      	ldr	r2, [r7, #12]
 8004502:	621a      	str	r2, [r3, #32]
}
 8004504:	bf00      	nop
 8004506:	371c      	adds	r7, #28
 8004508:	46bd      	mov	sp, r7
 800450a:	bc80      	pop	{r7}
 800450c:	4770      	bx	lr

0800450e <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800450e:	b480      	push	{r7}
 8004510:	b087      	sub	sp, #28
 8004512:	af00      	add	r7, sp, #0
 8004514:	6078      	str	r0, [r7, #4]
 8004516:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6a1b      	ldr	r3, [r3, #32]
 800451c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6a1b      	ldr	r3, [r3, #32]
 8004528:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	69db      	ldr	r3, [r3, #28]
 8004534:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800453c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004544:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	021b      	lsls	r3, r3, #8
 800454c:	68fa      	ldr	r2, [r7, #12]
 800454e:	4313      	orrs	r3, r2
 8004550:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004558:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	031b      	lsls	r3, r3, #12
 8004560:	697a      	ldr	r2, [r7, #20]
 8004562:	4313      	orrs	r3, r2
 8004564:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	693a      	ldr	r2, [r7, #16]
 800456a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	68fa      	ldr	r2, [r7, #12]
 8004570:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	685a      	ldr	r2, [r3, #4]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	697a      	ldr	r2, [r7, #20]
 800457e:	621a      	str	r2, [r3, #32]
}
 8004580:	bf00      	nop
 8004582:	371c      	adds	r7, #28
 8004584:	46bd      	mov	sp, r7
 8004586:	bc80      	pop	{r7}
 8004588:	4770      	bx	lr

0800458a <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800458a:	b480      	push	{r7}
 800458c:	b087      	sub	sp, #28
 800458e:	af00      	add	r7, sp, #0
 8004590:	60f8      	str	r0, [r7, #12]
 8004592:	60b9      	str	r1, [r7, #8]
 8004594:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	6a1b      	ldr	r3, [r3, #32]
 800459a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	6a1b      	ldr	r3, [r3, #32]
 80045a0:	f023 0201 	bic.w	r2, r3, #1
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	699b      	ldr	r3, [r3, #24]
 80045ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80045b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	011b      	lsls	r3, r3, #4
 80045ba:	693a      	ldr	r2, [r7, #16]
 80045bc:	4313      	orrs	r3, r2
 80045be:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	f023 030a 	bic.w	r3, r3, #10
 80045c6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80045c8:	697a      	ldr	r2, [r7, #20]
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	693a      	ldr	r2, [r7, #16]
 80045d4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	697a      	ldr	r2, [r7, #20]
 80045da:	621a      	str	r2, [r3, #32]
}
 80045dc:	bf00      	nop
 80045de:	371c      	adds	r7, #28
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bc80      	pop	{r7}
 80045e4:	4770      	bx	lr

080045e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045e6:	b480      	push	{r7}
 80045e8:	b087      	sub	sp, #28
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	60f8      	str	r0, [r7, #12]
 80045ee:	60b9      	str	r1, [r7, #8]
 80045f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	6a1b      	ldr	r3, [r3, #32]
 80045f6:	f023 0210 	bic.w	r2, r3, #16
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	699b      	ldr	r3, [r3, #24]
 8004602:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	6a1b      	ldr	r3, [r3, #32]
 8004608:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004610:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	031b      	lsls	r3, r3, #12
 8004616:	697a      	ldr	r2, [r7, #20]
 8004618:	4313      	orrs	r3, r2
 800461a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004622:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	011b      	lsls	r3, r3, #4
 8004628:	693a      	ldr	r2, [r7, #16]
 800462a:	4313      	orrs	r3, r2
 800462c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	697a      	ldr	r2, [r7, #20]
 8004632:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	693a      	ldr	r2, [r7, #16]
 8004638:	621a      	str	r2, [r3, #32]
}
 800463a:	bf00      	nop
 800463c:	371c      	adds	r7, #28
 800463e:	46bd      	mov	sp, r7
 8004640:	bc80      	pop	{r7}
 8004642:	4770      	bx	lr

08004644 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004644:	b480      	push	{r7}
 8004646:	b085      	sub	sp, #20
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
 800464c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800465a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800465c:	683a      	ldr	r2, [r7, #0]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	4313      	orrs	r3, r2
 8004662:	f043 0307 	orr.w	r3, r3, #7
 8004666:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	68fa      	ldr	r2, [r7, #12]
 800466c:	609a      	str	r2, [r3, #8]
}
 800466e:	bf00      	nop
 8004670:	3714      	adds	r7, #20
 8004672:	46bd      	mov	sp, r7
 8004674:	bc80      	pop	{r7}
 8004676:	4770      	bx	lr

08004678 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004678:	b480      	push	{r7}
 800467a:	b087      	sub	sp, #28
 800467c:	af00      	add	r7, sp, #0
 800467e:	60f8      	str	r0, [r7, #12]
 8004680:	60b9      	str	r1, [r7, #8]
 8004682:	607a      	str	r2, [r7, #4]
 8004684:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004692:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	021a      	lsls	r2, r3, #8
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	431a      	orrs	r2, r3
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	4313      	orrs	r3, r2
 80046a0:	697a      	ldr	r2, [r7, #20]
 80046a2:	4313      	orrs	r3, r2
 80046a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	697a      	ldr	r2, [r7, #20]
 80046aa:	609a      	str	r2, [r3, #8]
}
 80046ac:	bf00      	nop
 80046ae:	371c      	adds	r7, #28
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bc80      	pop	{r7}
 80046b4:	4770      	bx	lr
	...

080046b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b085      	sub	sp, #20
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
 80046c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d101      	bne.n	80046d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80046cc:	2302      	movs	r3, #2
 80046ce:	e041      	b.n	8004754 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2201      	movs	r2, #1
 80046d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2202      	movs	r2, #2
 80046dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	68fa      	ldr	r2, [r7, #12]
 80046fe:	4313      	orrs	r3, r2
 8004700:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	68fa      	ldr	r2, [r7, #12]
 8004708:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004712:	d009      	beq.n	8004728 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a11      	ldr	r2, [pc, #68]	; (8004760 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d004      	beq.n	8004728 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a10      	ldr	r2, [pc, #64]	; (8004764 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d10c      	bne.n	8004742 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800472e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	68ba      	ldr	r2, [r7, #8]
 8004736:	4313      	orrs	r3, r2
 8004738:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	68ba      	ldr	r2, [r7, #8]
 8004740:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2201      	movs	r2, #1
 8004746:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2200      	movs	r2, #0
 800474e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004752:	2300      	movs	r3, #0
}
 8004754:	4618      	mov	r0, r3
 8004756:	3714      	adds	r7, #20
 8004758:	46bd      	mov	sp, r7
 800475a:	bc80      	pop	{r7}
 800475c:	4770      	bx	lr
 800475e:	bf00      	nop
 8004760:	40000400 	.word	0x40000400
 8004764:	40000800 	.word	0x40000800

08004768 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004768:	b480      	push	{r7}
 800476a:	b083      	sub	sp, #12
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004770:	bf00      	nop
 8004772:	370c      	adds	r7, #12
 8004774:	46bd      	mov	sp, r7
 8004776:	bc80      	pop	{r7}
 8004778:	4770      	bx	lr

0800477a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800477a:	b480      	push	{r7}
 800477c:	b083      	sub	sp, #12
 800477e:	af00      	add	r7, sp, #0
 8004780:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004782:	bf00      	nop
 8004784:	370c      	adds	r7, #12
 8004786:	46bd      	mov	sp, r7
 8004788:	bc80      	pop	{r7}
 800478a:	4770      	bx	lr

0800478c <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800478c:	b084      	sub	sp, #16
 800478e:	b480      	push	{r7}
 8004790:	b083      	sub	sp, #12
 8004792:	af00      	add	r7, sp, #0
 8004794:	6078      	str	r0, [r7, #4]
 8004796:	f107 0014 	add.w	r0, r7, #20
 800479a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800479e:	2300      	movs	r3, #0
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	370c      	adds	r7, #12
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bc80      	pop	{r7}
 80047a8:	b004      	add	sp, #16
 80047aa:	4770      	bx	lr

080047ac <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b085      	sub	sp, #20
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2200      	movs	r2, #0
 80047b8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80047bc:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80047c0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	b29a      	uxth	r2, r3
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80047cc:	2300      	movs	r3, #0
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3714      	adds	r7, #20
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bc80      	pop	{r7}
 80047d6:	4770      	bx	lr

080047d8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80047d8:	b480      	push	{r7}
 80047da:	b085      	sub	sp, #20
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80047e0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80047e4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80047ec:	b29a      	uxth	r2, r3
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	b29b      	uxth	r3, r3
 80047f2:	43db      	mvns	r3, r3
 80047f4:	b29b      	uxth	r3, r3
 80047f6:	4013      	ands	r3, r2
 80047f8:	b29a      	uxth	r2, r3
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004800:	2300      	movs	r3, #0
}
 8004802:	4618      	mov	r0, r3
 8004804:	3714      	adds	r7, #20
 8004806:	46bd      	mov	sp, r7
 8004808:	bc80      	pop	{r7}
 800480a:	4770      	bx	lr

0800480c <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800480c:	b480      	push	{r7}
 800480e:	b083      	sub	sp, #12
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
 8004814:	460b      	mov	r3, r1
 8004816:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004818:	2300      	movs	r3, #0
}
 800481a:	4618      	mov	r0, r3
 800481c:	370c      	adds	r7, #12
 800481e:	46bd      	mov	sp, r7
 8004820:	bc80      	pop	{r7}
 8004822:	4770      	bx	lr

08004824 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004824:	b084      	sub	sp, #16
 8004826:	b480      	push	{r7}
 8004828:	b083      	sub	sp, #12
 800482a:	af00      	add	r7, sp, #0
 800482c:	6078      	str	r0, [r7, #4]
 800482e:	f107 0014 	add.w	r0, r7, #20
 8004832:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2201      	movs	r2, #1
 800483a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2200      	movs	r2, #0
 8004842:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2200      	movs	r2, #0
 800484a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2200      	movs	r2, #0
 8004852:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004856:	2300      	movs	r3, #0
}
 8004858:	4618      	mov	r0, r3
 800485a:	370c      	adds	r7, #12
 800485c:	46bd      	mov	sp, r7
 800485e:	bc80      	pop	{r7}
 8004860:	b004      	add	sp, #16
 8004862:	4770      	bx	lr

08004864 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004864:	b480      	push	{r7}
 8004866:	b09b      	sub	sp, #108	; 0x6c
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
 800486c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800486e:	2300      	movs	r3, #0
 8004870:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004874:	687a      	ldr	r2, [r7, #4]
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	781b      	ldrb	r3, [r3, #0]
 800487a:	009b      	lsls	r3, r3, #2
 800487c:	4413      	add	r3, r2
 800487e:	881b      	ldrh	r3, [r3, #0]
 8004880:	b29b      	uxth	r3, r3
 8004882:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004886:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800488a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	78db      	ldrb	r3, [r3, #3]
 8004892:	2b03      	cmp	r3, #3
 8004894:	d81f      	bhi.n	80048d6 <USB_ActivateEndpoint+0x72>
 8004896:	a201      	add	r2, pc, #4	; (adr r2, 800489c <USB_ActivateEndpoint+0x38>)
 8004898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800489c:	080048ad 	.word	0x080048ad
 80048a0:	080048c9 	.word	0x080048c9
 80048a4:	080048df 	.word	0x080048df
 80048a8:	080048bb 	.word	0x080048bb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80048ac:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80048b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80048b4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80048b8:	e012      	b.n	80048e0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80048ba:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80048be:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80048c2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80048c6:	e00b      	b.n	80048e0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80048c8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80048cc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80048d0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80048d4:	e004      	b.n	80048e0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80048dc:	e000      	b.n	80048e0 <USB_ActivateEndpoint+0x7c>
      break;
 80048de:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80048e0:	687a      	ldr	r2, [r7, #4]
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	781b      	ldrb	r3, [r3, #0]
 80048e6:	009b      	lsls	r3, r3, #2
 80048e8:	441a      	add	r2, r3
 80048ea:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80048ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048fe:	b29b      	uxth	r3, r3
 8004900:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004902:	687a      	ldr	r2, [r7, #4]
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	781b      	ldrb	r3, [r3, #0]
 8004908:	009b      	lsls	r3, r3, #2
 800490a:	4413      	add	r3, r2
 800490c:	881b      	ldrh	r3, [r3, #0]
 800490e:	b29b      	uxth	r3, r3
 8004910:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004914:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004918:	b29a      	uxth	r2, r3
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	781b      	ldrb	r3, [r3, #0]
 800491e:	b29b      	uxth	r3, r3
 8004920:	4313      	orrs	r3, r2
 8004922:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8004926:	687a      	ldr	r2, [r7, #4]
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	781b      	ldrb	r3, [r3, #0]
 800492c:	009b      	lsls	r3, r3, #2
 800492e:	441a      	add	r2, r3
 8004930:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004934:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004938:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800493c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004940:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004944:	b29b      	uxth	r3, r3
 8004946:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	7b1b      	ldrb	r3, [r3, #12]
 800494c:	2b00      	cmp	r3, #0
 800494e:	f040 8149 	bne.w	8004be4 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	785b      	ldrb	r3, [r3, #1]
 8004956:	2b00      	cmp	r3, #0
 8004958:	f000 8084 	beq.w	8004a64 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	617b      	str	r3, [r7, #20]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004966:	b29b      	uxth	r3, r3
 8004968:	461a      	mov	r2, r3
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	4413      	add	r3, r2
 800496e:	617b      	str	r3, [r7, #20]
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	781b      	ldrb	r3, [r3, #0]
 8004974:	011a      	lsls	r2, r3, #4
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	4413      	add	r3, r2
 800497a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800497e:	613b      	str	r3, [r7, #16]
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	88db      	ldrh	r3, [r3, #6]
 8004984:	085b      	lsrs	r3, r3, #1
 8004986:	b29b      	uxth	r3, r3
 8004988:	005b      	lsls	r3, r3, #1
 800498a:	b29a      	uxth	r2, r3
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004990:	687a      	ldr	r2, [r7, #4]
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	781b      	ldrb	r3, [r3, #0]
 8004996:	009b      	lsls	r3, r3, #2
 8004998:	4413      	add	r3, r2
 800499a:	881b      	ldrh	r3, [r3, #0]
 800499c:	81fb      	strh	r3, [r7, #14]
 800499e:	89fb      	ldrh	r3, [r7, #14]
 80049a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d01b      	beq.n	80049e0 <USB_ActivateEndpoint+0x17c>
 80049a8:	687a      	ldr	r2, [r7, #4]
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	781b      	ldrb	r3, [r3, #0]
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	4413      	add	r3, r2
 80049b2:	881b      	ldrh	r3, [r3, #0]
 80049b4:	b29b      	uxth	r3, r3
 80049b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049be:	81bb      	strh	r3, [r7, #12]
 80049c0:	687a      	ldr	r2, [r7, #4]
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	781b      	ldrb	r3, [r3, #0]
 80049c6:	009b      	lsls	r3, r3, #2
 80049c8:	441a      	add	r2, r3
 80049ca:	89bb      	ldrh	r3, [r7, #12]
 80049cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049d8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80049dc:	b29b      	uxth	r3, r3
 80049de:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	78db      	ldrb	r3, [r3, #3]
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d020      	beq.n	8004a2a <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80049e8:	687a      	ldr	r2, [r7, #4]
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	781b      	ldrb	r3, [r3, #0]
 80049ee:	009b      	lsls	r3, r3, #2
 80049f0:	4413      	add	r3, r2
 80049f2:	881b      	ldrh	r3, [r3, #0]
 80049f4:	b29b      	uxth	r3, r3
 80049f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049fe:	813b      	strh	r3, [r7, #8]
 8004a00:	893b      	ldrh	r3, [r7, #8]
 8004a02:	f083 0320 	eor.w	r3, r3, #32
 8004a06:	813b      	strh	r3, [r7, #8]
 8004a08:	687a      	ldr	r2, [r7, #4]
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	781b      	ldrb	r3, [r3, #0]
 8004a0e:	009b      	lsls	r3, r3, #2
 8004a10:	441a      	add	r2, r3
 8004a12:	893b      	ldrh	r3, [r7, #8]
 8004a14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a24:	b29b      	uxth	r3, r3
 8004a26:	8013      	strh	r3, [r2, #0]
 8004a28:	e27f      	b.n	8004f2a <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004a2a:	687a      	ldr	r2, [r7, #4]
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	781b      	ldrb	r3, [r3, #0]
 8004a30:	009b      	lsls	r3, r3, #2
 8004a32:	4413      	add	r3, r2
 8004a34:	881b      	ldrh	r3, [r3, #0]
 8004a36:	b29b      	uxth	r3, r3
 8004a38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a40:	817b      	strh	r3, [r7, #10]
 8004a42:	687a      	ldr	r2, [r7, #4]
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	781b      	ldrb	r3, [r3, #0]
 8004a48:	009b      	lsls	r3, r3, #2
 8004a4a:	441a      	add	r2, r3
 8004a4c:	897b      	ldrh	r3, [r7, #10]
 8004a4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a5e:	b29b      	uxth	r3, r3
 8004a60:	8013      	strh	r3, [r2, #0]
 8004a62:	e262      	b.n	8004f2a <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a6e:	b29b      	uxth	r3, r3
 8004a70:	461a      	mov	r2, r3
 8004a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a74:	4413      	add	r3, r2
 8004a76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	781b      	ldrb	r3, [r3, #0]
 8004a7c:	011a      	lsls	r2, r3, #4
 8004a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a80:	4413      	add	r3, r2
 8004a82:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004a86:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	88db      	ldrh	r3, [r3, #6]
 8004a8c:	085b      	lsrs	r3, r3, #1
 8004a8e:	b29b      	uxth	r3, r3
 8004a90:	005b      	lsls	r3, r3, #1
 8004a92:	b29a      	uxth	r2, r3
 8004a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a96:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	627b      	str	r3, [r7, #36]	; 0x24
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	461a      	mov	r2, r3
 8004aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa8:	4413      	add	r3, r2
 8004aaa:	627b      	str	r3, [r7, #36]	; 0x24
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	781b      	ldrb	r3, [r3, #0]
 8004ab0:	011a      	lsls	r2, r3, #4
 8004ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab4:	4413      	add	r3, r2
 8004ab6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004aba:	623b      	str	r3, [r7, #32]
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	691b      	ldr	r3, [r3, #16]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d112      	bne.n	8004aea <USB_ActivateEndpoint+0x286>
 8004ac4:	6a3b      	ldr	r3, [r7, #32]
 8004ac6:	881b      	ldrh	r3, [r3, #0]
 8004ac8:	b29b      	uxth	r3, r3
 8004aca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004ace:	b29a      	uxth	r2, r3
 8004ad0:	6a3b      	ldr	r3, [r7, #32]
 8004ad2:	801a      	strh	r2, [r3, #0]
 8004ad4:	6a3b      	ldr	r3, [r7, #32]
 8004ad6:	881b      	ldrh	r3, [r3, #0]
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ade:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ae2:	b29a      	uxth	r2, r3
 8004ae4:	6a3b      	ldr	r3, [r7, #32]
 8004ae6:	801a      	strh	r2, [r3, #0]
 8004ae8:	e02f      	b.n	8004b4a <USB_ActivateEndpoint+0x2e6>
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	691b      	ldr	r3, [r3, #16]
 8004aee:	2b3e      	cmp	r3, #62	; 0x3e
 8004af0:	d813      	bhi.n	8004b1a <USB_ActivateEndpoint+0x2b6>
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	691b      	ldr	r3, [r3, #16]
 8004af6:	085b      	lsrs	r3, r3, #1
 8004af8:	663b      	str	r3, [r7, #96]	; 0x60
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	691b      	ldr	r3, [r3, #16]
 8004afe:	f003 0301 	and.w	r3, r3, #1
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d002      	beq.n	8004b0c <USB_ActivateEndpoint+0x2a8>
 8004b06:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b08:	3301      	adds	r3, #1
 8004b0a:	663b      	str	r3, [r7, #96]	; 0x60
 8004b0c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b0e:	b29b      	uxth	r3, r3
 8004b10:	029b      	lsls	r3, r3, #10
 8004b12:	b29a      	uxth	r2, r3
 8004b14:	6a3b      	ldr	r3, [r7, #32]
 8004b16:	801a      	strh	r2, [r3, #0]
 8004b18:	e017      	b.n	8004b4a <USB_ActivateEndpoint+0x2e6>
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	691b      	ldr	r3, [r3, #16]
 8004b1e:	095b      	lsrs	r3, r3, #5
 8004b20:	663b      	str	r3, [r7, #96]	; 0x60
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	691b      	ldr	r3, [r3, #16]
 8004b26:	f003 031f 	and.w	r3, r3, #31
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d102      	bne.n	8004b34 <USB_ActivateEndpoint+0x2d0>
 8004b2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b30:	3b01      	subs	r3, #1
 8004b32:	663b      	str	r3, [r7, #96]	; 0x60
 8004b34:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b36:	b29b      	uxth	r3, r3
 8004b38:	029b      	lsls	r3, r3, #10
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b44:	b29a      	uxth	r2, r3
 8004b46:	6a3b      	ldr	r3, [r7, #32]
 8004b48:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b4a:	687a      	ldr	r2, [r7, #4]
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	781b      	ldrb	r3, [r3, #0]
 8004b50:	009b      	lsls	r3, r3, #2
 8004b52:	4413      	add	r3, r2
 8004b54:	881b      	ldrh	r3, [r3, #0]
 8004b56:	83fb      	strh	r3, [r7, #30]
 8004b58:	8bfb      	ldrh	r3, [r7, #30]
 8004b5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d01b      	beq.n	8004b9a <USB_ActivateEndpoint+0x336>
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	781b      	ldrb	r3, [r3, #0]
 8004b68:	009b      	lsls	r3, r3, #2
 8004b6a:	4413      	add	r3, r2
 8004b6c:	881b      	ldrh	r3, [r3, #0]
 8004b6e:	b29b      	uxth	r3, r3
 8004b70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b78:	83bb      	strh	r3, [r7, #28]
 8004b7a:	687a      	ldr	r2, [r7, #4]
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	781b      	ldrb	r3, [r3, #0]
 8004b80:	009b      	lsls	r3, r3, #2
 8004b82:	441a      	add	r2, r3
 8004b84:	8bbb      	ldrh	r3, [r7, #28]
 8004b86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b8e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b96:	b29b      	uxth	r3, r3
 8004b98:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004b9a:	687a      	ldr	r2, [r7, #4]
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	781b      	ldrb	r3, [r3, #0]
 8004ba0:	009b      	lsls	r3, r3, #2
 8004ba2:	4413      	add	r3, r2
 8004ba4:	881b      	ldrh	r3, [r3, #0]
 8004ba6:	b29b      	uxth	r3, r3
 8004ba8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004bac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bb0:	837b      	strh	r3, [r7, #26]
 8004bb2:	8b7b      	ldrh	r3, [r7, #26]
 8004bb4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004bb8:	837b      	strh	r3, [r7, #26]
 8004bba:	8b7b      	ldrh	r3, [r7, #26]
 8004bbc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004bc0:	837b      	strh	r3, [r7, #26]
 8004bc2:	687a      	ldr	r2, [r7, #4]
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	781b      	ldrb	r3, [r3, #0]
 8004bc8:	009b      	lsls	r3, r3, #2
 8004bca:	441a      	add	r2, r3
 8004bcc:	8b7b      	ldrh	r3, [r7, #26]
 8004bce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	8013      	strh	r3, [r2, #0]
 8004be2:	e1a2      	b.n	8004f2a <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004be4:	687a      	ldr	r2, [r7, #4]
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	781b      	ldrb	r3, [r3, #0]
 8004bea:	009b      	lsls	r3, r3, #2
 8004bec:	4413      	add	r3, r2
 8004bee:	881b      	ldrh	r3, [r3, #0]
 8004bf0:	b29b      	uxth	r3, r3
 8004bf2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bfa:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	781b      	ldrb	r3, [r3, #0]
 8004c04:	009b      	lsls	r3, r3, #2
 8004c06:	441a      	add	r2, r3
 8004c08:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8004c0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c14:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004c18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c1c:	b29b      	uxth	r3, r3
 8004c1e:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	65bb      	str	r3, [r7, #88]	; 0x58
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c2a:	b29b      	uxth	r3, r3
 8004c2c:	461a      	mov	r2, r3
 8004c2e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c30:	4413      	add	r3, r2
 8004c32:	65bb      	str	r3, [r7, #88]	; 0x58
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	781b      	ldrb	r3, [r3, #0]
 8004c38:	011a      	lsls	r2, r3, #4
 8004c3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c3c:	4413      	add	r3, r2
 8004c3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c42:	657b      	str	r3, [r7, #84]	; 0x54
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	891b      	ldrh	r3, [r3, #8]
 8004c48:	085b      	lsrs	r3, r3, #1
 8004c4a:	b29b      	uxth	r3, r3
 8004c4c:	005b      	lsls	r3, r3, #1
 8004c4e:	b29a      	uxth	r2, r3
 8004c50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c52:	801a      	strh	r2, [r3, #0]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	653b      	str	r3, [r7, #80]	; 0x50
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c5e:	b29b      	uxth	r3, r3
 8004c60:	461a      	mov	r2, r3
 8004c62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c64:	4413      	add	r3, r2
 8004c66:	653b      	str	r3, [r7, #80]	; 0x50
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	781b      	ldrb	r3, [r3, #0]
 8004c6c:	011a      	lsls	r2, r3, #4
 8004c6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c70:	4413      	add	r3, r2
 8004c72:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004c76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	895b      	ldrh	r3, [r3, #10]
 8004c7c:	085b      	lsrs	r3, r3, #1
 8004c7e:	b29b      	uxth	r3, r3
 8004c80:	005b      	lsls	r3, r3, #1
 8004c82:	b29a      	uxth	r2, r3
 8004c84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c86:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	785b      	ldrb	r3, [r3, #1]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	f040 8091 	bne.w	8004db4 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	781b      	ldrb	r3, [r3, #0]
 8004c98:	009b      	lsls	r3, r3, #2
 8004c9a:	4413      	add	r3, r2
 8004c9c:	881b      	ldrh	r3, [r3, #0]
 8004c9e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004ca0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004ca2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d01b      	beq.n	8004ce2 <USB_ActivateEndpoint+0x47e>
 8004caa:	687a      	ldr	r2, [r7, #4]
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	781b      	ldrb	r3, [r3, #0]
 8004cb0:	009b      	lsls	r3, r3, #2
 8004cb2:	4413      	add	r3, r2
 8004cb4:	881b      	ldrh	r3, [r3, #0]
 8004cb6:	b29b      	uxth	r3, r3
 8004cb8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cc0:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004cc2:	687a      	ldr	r2, [r7, #4]
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	781b      	ldrb	r3, [r3, #0]
 8004cc8:	009b      	lsls	r3, r3, #2
 8004cca:	441a      	add	r2, r3
 8004ccc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004cce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cd6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004cda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cde:	b29b      	uxth	r3, r3
 8004ce0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004ce2:	687a      	ldr	r2, [r7, #4]
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	781b      	ldrb	r3, [r3, #0]
 8004ce8:	009b      	lsls	r3, r3, #2
 8004cea:	4413      	add	r3, r2
 8004cec:	881b      	ldrh	r3, [r3, #0]
 8004cee:	873b      	strh	r3, [r7, #56]	; 0x38
 8004cf0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004cf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d01b      	beq.n	8004d32 <USB_ActivateEndpoint+0x4ce>
 8004cfa:	687a      	ldr	r2, [r7, #4]
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	781b      	ldrb	r3, [r3, #0]
 8004d00:	009b      	lsls	r3, r3, #2
 8004d02:	4413      	add	r3, r2
 8004d04:	881b      	ldrh	r3, [r3, #0]
 8004d06:	b29b      	uxth	r3, r3
 8004d08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d10:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004d12:	687a      	ldr	r2, [r7, #4]
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	781b      	ldrb	r3, [r3, #0]
 8004d18:	009b      	lsls	r3, r3, #2
 8004d1a:	441a      	add	r2, r3
 8004d1c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004d1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d2a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004d2e:	b29b      	uxth	r3, r3
 8004d30:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004d32:	687a      	ldr	r2, [r7, #4]
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	781b      	ldrb	r3, [r3, #0]
 8004d38:	009b      	lsls	r3, r3, #2
 8004d3a:	4413      	add	r3, r2
 8004d3c:	881b      	ldrh	r3, [r3, #0]
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d48:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004d4a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004d4c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004d50:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004d52:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004d54:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004d58:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004d5a:	687a      	ldr	r2, [r7, #4]
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	781b      	ldrb	r3, [r3, #0]
 8004d60:	009b      	lsls	r3, r3, #2
 8004d62:	441a      	add	r2, r3
 8004d64:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004d66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d76:	b29b      	uxth	r3, r3
 8004d78:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004d7a:	687a      	ldr	r2, [r7, #4]
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	781b      	ldrb	r3, [r3, #0]
 8004d80:	009b      	lsls	r3, r3, #2
 8004d82:	4413      	add	r3, r2
 8004d84:	881b      	ldrh	r3, [r3, #0]
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d90:	867b      	strh	r3, [r7, #50]	; 0x32
 8004d92:	687a      	ldr	r2, [r7, #4]
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	781b      	ldrb	r3, [r3, #0]
 8004d98:	009b      	lsls	r3, r3, #2
 8004d9a:	441a      	add	r2, r3
 8004d9c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004d9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004da2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004da6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004daa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dae:	b29b      	uxth	r3, r3
 8004db0:	8013      	strh	r3, [r2, #0]
 8004db2:	e0ba      	b.n	8004f2a <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004db4:	687a      	ldr	r2, [r7, #4]
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	781b      	ldrb	r3, [r3, #0]
 8004dba:	009b      	lsls	r3, r3, #2
 8004dbc:	4413      	add	r3, r2
 8004dbe:	881b      	ldrh	r3, [r3, #0]
 8004dc0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004dc4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004dc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d01d      	beq.n	8004e0c <USB_ActivateEndpoint+0x5a8>
 8004dd0:	687a      	ldr	r2, [r7, #4]
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	781b      	ldrb	r3, [r3, #0]
 8004dd6:	009b      	lsls	r3, r3, #2
 8004dd8:	4413      	add	r3, r2
 8004dda:	881b      	ldrh	r3, [r3, #0]
 8004ddc:	b29b      	uxth	r3, r3
 8004dde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004de2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004de6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004dea:	687a      	ldr	r2, [r7, #4]
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	781b      	ldrb	r3, [r3, #0]
 8004df0:	009b      	lsls	r3, r3, #2
 8004df2:	441a      	add	r2, r3
 8004df4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004df8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dfc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e00:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e08:	b29b      	uxth	r3, r3
 8004e0a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004e0c:	687a      	ldr	r2, [r7, #4]
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	781b      	ldrb	r3, [r3, #0]
 8004e12:	009b      	lsls	r3, r3, #2
 8004e14:	4413      	add	r3, r2
 8004e16:	881b      	ldrh	r3, [r3, #0]
 8004e18:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004e1c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004e20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d01d      	beq.n	8004e64 <USB_ActivateEndpoint+0x600>
 8004e28:	687a      	ldr	r2, [r7, #4]
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	781b      	ldrb	r3, [r3, #0]
 8004e2e:	009b      	lsls	r3, r3, #2
 8004e30:	4413      	add	r3, r2
 8004e32:	881b      	ldrh	r3, [r3, #0]
 8004e34:	b29b      	uxth	r3, r3
 8004e36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e3e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004e42:	687a      	ldr	r2, [r7, #4]
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	781b      	ldrb	r3, [r3, #0]
 8004e48:	009b      	lsls	r3, r3, #2
 8004e4a:	441a      	add	r2, r3
 8004e4c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004e50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e5c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004e60:	b29b      	uxth	r3, r3
 8004e62:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	78db      	ldrb	r3, [r3, #3]
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	d024      	beq.n	8004eb6 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004e6c:	687a      	ldr	r2, [r7, #4]
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	781b      	ldrb	r3, [r3, #0]
 8004e72:	009b      	lsls	r3, r3, #2
 8004e74:	4413      	add	r3, r2
 8004e76:	881b      	ldrh	r3, [r3, #0]
 8004e78:	b29b      	uxth	r3, r3
 8004e7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e82:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004e86:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004e8a:	f083 0320 	eor.w	r3, r3, #32
 8004e8e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004e92:	687a      	ldr	r2, [r7, #4]
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	781b      	ldrb	r3, [r3, #0]
 8004e98:	009b      	lsls	r3, r3, #2
 8004e9a:	441a      	add	r2, r3
 8004e9c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004ea0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ea4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ea8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004eac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004eb0:	b29b      	uxth	r3, r3
 8004eb2:	8013      	strh	r3, [r2, #0]
 8004eb4:	e01d      	b.n	8004ef2 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004eb6:	687a      	ldr	r2, [r7, #4]
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	781b      	ldrb	r3, [r3, #0]
 8004ebc:	009b      	lsls	r3, r3, #2
 8004ebe:	4413      	add	r3, r2
 8004ec0:	881b      	ldrh	r3, [r3, #0]
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ec8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ecc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004ed0:	687a      	ldr	r2, [r7, #4]
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	781b      	ldrb	r3, [r3, #0]
 8004ed6:	009b      	lsls	r3, r3, #2
 8004ed8:	441a      	add	r2, r3
 8004eda:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004ede:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ee2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ee6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004eea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004eee:	b29b      	uxth	r3, r3
 8004ef0:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	781b      	ldrb	r3, [r3, #0]
 8004ef8:	009b      	lsls	r3, r3, #2
 8004efa:	4413      	add	r3, r2
 8004efc:	881b      	ldrh	r3, [r3, #0]
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f08:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004f0a:	687a      	ldr	r2, [r7, #4]
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	781b      	ldrb	r3, [r3, #0]
 8004f10:	009b      	lsls	r3, r3, #2
 8004f12:	441a      	add	r2, r3
 8004f14:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004f16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8004f2a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	376c      	adds	r7, #108	; 0x6c
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bc80      	pop	{r7}
 8004f36:	4770      	bx	lr

08004f38 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b08d      	sub	sp, #52	; 0x34
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
 8004f40:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	7b1b      	ldrb	r3, [r3, #12]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	f040 808e 	bne.w	8005068 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	785b      	ldrb	r3, [r3, #1]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d044      	beq.n	8004fde <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004f54:	687a      	ldr	r2, [r7, #4]
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	781b      	ldrb	r3, [r3, #0]
 8004f5a:	009b      	lsls	r3, r3, #2
 8004f5c:	4413      	add	r3, r2
 8004f5e:	881b      	ldrh	r3, [r3, #0]
 8004f60:	81bb      	strh	r3, [r7, #12]
 8004f62:	89bb      	ldrh	r3, [r7, #12]
 8004f64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d01b      	beq.n	8004fa4 <USB_DeactivateEndpoint+0x6c>
 8004f6c:	687a      	ldr	r2, [r7, #4]
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	781b      	ldrb	r3, [r3, #0]
 8004f72:	009b      	lsls	r3, r3, #2
 8004f74:	4413      	add	r3, r2
 8004f76:	881b      	ldrh	r3, [r3, #0]
 8004f78:	b29b      	uxth	r3, r3
 8004f7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f82:	817b      	strh	r3, [r7, #10]
 8004f84:	687a      	ldr	r2, [r7, #4]
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	781b      	ldrb	r3, [r3, #0]
 8004f8a:	009b      	lsls	r3, r3, #2
 8004f8c:	441a      	add	r2, r3
 8004f8e:	897b      	ldrh	r3, [r7, #10]
 8004f90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f9c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004fa0:	b29b      	uxth	r3, r3
 8004fa2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004fa4:	687a      	ldr	r2, [r7, #4]
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	781b      	ldrb	r3, [r3, #0]
 8004faa:	009b      	lsls	r3, r3, #2
 8004fac:	4413      	add	r3, r2
 8004fae:	881b      	ldrh	r3, [r3, #0]
 8004fb0:	b29b      	uxth	r3, r3
 8004fb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fba:	813b      	strh	r3, [r7, #8]
 8004fbc:	687a      	ldr	r2, [r7, #4]
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	781b      	ldrb	r3, [r3, #0]
 8004fc2:	009b      	lsls	r3, r3, #2
 8004fc4:	441a      	add	r2, r3
 8004fc6:	893b      	ldrh	r3, [r7, #8]
 8004fc8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fcc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fd8:	b29b      	uxth	r3, r3
 8004fda:	8013      	strh	r3, [r2, #0]
 8004fdc:	e192      	b.n	8005304 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004fde:	687a      	ldr	r2, [r7, #4]
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	781b      	ldrb	r3, [r3, #0]
 8004fe4:	009b      	lsls	r3, r3, #2
 8004fe6:	4413      	add	r3, r2
 8004fe8:	881b      	ldrh	r3, [r3, #0]
 8004fea:	827b      	strh	r3, [r7, #18]
 8004fec:	8a7b      	ldrh	r3, [r7, #18]
 8004fee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d01b      	beq.n	800502e <USB_DeactivateEndpoint+0xf6>
 8004ff6:	687a      	ldr	r2, [r7, #4]
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	781b      	ldrb	r3, [r3, #0]
 8004ffc:	009b      	lsls	r3, r3, #2
 8004ffe:	4413      	add	r3, r2
 8005000:	881b      	ldrh	r3, [r3, #0]
 8005002:	b29b      	uxth	r3, r3
 8005004:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005008:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800500c:	823b      	strh	r3, [r7, #16]
 800500e:	687a      	ldr	r2, [r7, #4]
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	781b      	ldrb	r3, [r3, #0]
 8005014:	009b      	lsls	r3, r3, #2
 8005016:	441a      	add	r2, r3
 8005018:	8a3b      	ldrh	r3, [r7, #16]
 800501a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800501e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005022:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005026:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800502a:	b29b      	uxth	r3, r3
 800502c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800502e:	687a      	ldr	r2, [r7, #4]
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	781b      	ldrb	r3, [r3, #0]
 8005034:	009b      	lsls	r3, r3, #2
 8005036:	4413      	add	r3, r2
 8005038:	881b      	ldrh	r3, [r3, #0]
 800503a:	b29b      	uxth	r3, r3
 800503c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005040:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005044:	81fb      	strh	r3, [r7, #14]
 8005046:	687a      	ldr	r2, [r7, #4]
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	781b      	ldrb	r3, [r3, #0]
 800504c:	009b      	lsls	r3, r3, #2
 800504e:	441a      	add	r2, r3
 8005050:	89fb      	ldrh	r3, [r7, #14]
 8005052:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005056:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800505a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800505e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005062:	b29b      	uxth	r3, r3
 8005064:	8013      	strh	r3, [r2, #0]
 8005066:	e14d      	b.n	8005304 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	785b      	ldrb	r3, [r3, #1]
 800506c:	2b00      	cmp	r3, #0
 800506e:	f040 80a5 	bne.w	80051bc <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005072:	687a      	ldr	r2, [r7, #4]
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	781b      	ldrb	r3, [r3, #0]
 8005078:	009b      	lsls	r3, r3, #2
 800507a:	4413      	add	r3, r2
 800507c:	881b      	ldrh	r3, [r3, #0]
 800507e:	843b      	strh	r3, [r7, #32]
 8005080:	8c3b      	ldrh	r3, [r7, #32]
 8005082:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005086:	2b00      	cmp	r3, #0
 8005088:	d01b      	beq.n	80050c2 <USB_DeactivateEndpoint+0x18a>
 800508a:	687a      	ldr	r2, [r7, #4]
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	781b      	ldrb	r3, [r3, #0]
 8005090:	009b      	lsls	r3, r3, #2
 8005092:	4413      	add	r3, r2
 8005094:	881b      	ldrh	r3, [r3, #0]
 8005096:	b29b      	uxth	r3, r3
 8005098:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800509c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050a0:	83fb      	strh	r3, [r7, #30]
 80050a2:	687a      	ldr	r2, [r7, #4]
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	781b      	ldrb	r3, [r3, #0]
 80050a8:	009b      	lsls	r3, r3, #2
 80050aa:	441a      	add	r2, r3
 80050ac:	8bfb      	ldrh	r3, [r7, #30]
 80050ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80050ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050be:	b29b      	uxth	r3, r3
 80050c0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80050c2:	687a      	ldr	r2, [r7, #4]
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	781b      	ldrb	r3, [r3, #0]
 80050c8:	009b      	lsls	r3, r3, #2
 80050ca:	4413      	add	r3, r2
 80050cc:	881b      	ldrh	r3, [r3, #0]
 80050ce:	83bb      	strh	r3, [r7, #28]
 80050d0:	8bbb      	ldrh	r3, [r7, #28]
 80050d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d01b      	beq.n	8005112 <USB_DeactivateEndpoint+0x1da>
 80050da:	687a      	ldr	r2, [r7, #4]
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	781b      	ldrb	r3, [r3, #0]
 80050e0:	009b      	lsls	r3, r3, #2
 80050e2:	4413      	add	r3, r2
 80050e4:	881b      	ldrh	r3, [r3, #0]
 80050e6:	b29b      	uxth	r3, r3
 80050e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050f0:	837b      	strh	r3, [r7, #26]
 80050f2:	687a      	ldr	r2, [r7, #4]
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	781b      	ldrb	r3, [r3, #0]
 80050f8:	009b      	lsls	r3, r3, #2
 80050fa:	441a      	add	r2, r3
 80050fc:	8b7b      	ldrh	r3, [r7, #26]
 80050fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005102:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005106:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800510a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800510e:	b29b      	uxth	r3, r3
 8005110:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005112:	687a      	ldr	r2, [r7, #4]
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	781b      	ldrb	r3, [r3, #0]
 8005118:	009b      	lsls	r3, r3, #2
 800511a:	4413      	add	r3, r2
 800511c:	881b      	ldrh	r3, [r3, #0]
 800511e:	b29b      	uxth	r3, r3
 8005120:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005124:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005128:	833b      	strh	r3, [r7, #24]
 800512a:	687a      	ldr	r2, [r7, #4]
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	781b      	ldrb	r3, [r3, #0]
 8005130:	009b      	lsls	r3, r3, #2
 8005132:	441a      	add	r2, r3
 8005134:	8b3b      	ldrh	r3, [r7, #24]
 8005136:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800513a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800513e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005142:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005146:	b29b      	uxth	r3, r3
 8005148:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800514a:	687a      	ldr	r2, [r7, #4]
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	781b      	ldrb	r3, [r3, #0]
 8005150:	009b      	lsls	r3, r3, #2
 8005152:	4413      	add	r3, r2
 8005154:	881b      	ldrh	r3, [r3, #0]
 8005156:	b29b      	uxth	r3, r3
 8005158:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800515c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005160:	82fb      	strh	r3, [r7, #22]
 8005162:	687a      	ldr	r2, [r7, #4]
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	781b      	ldrb	r3, [r3, #0]
 8005168:	009b      	lsls	r3, r3, #2
 800516a:	441a      	add	r2, r3
 800516c:	8afb      	ldrh	r3, [r7, #22]
 800516e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005172:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005176:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800517a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800517e:	b29b      	uxth	r3, r3
 8005180:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005182:	687a      	ldr	r2, [r7, #4]
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	781b      	ldrb	r3, [r3, #0]
 8005188:	009b      	lsls	r3, r3, #2
 800518a:	4413      	add	r3, r2
 800518c:	881b      	ldrh	r3, [r3, #0]
 800518e:	b29b      	uxth	r3, r3
 8005190:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005194:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005198:	82bb      	strh	r3, [r7, #20]
 800519a:	687a      	ldr	r2, [r7, #4]
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	781b      	ldrb	r3, [r3, #0]
 80051a0:	009b      	lsls	r3, r3, #2
 80051a2:	441a      	add	r2, r3
 80051a4:	8abb      	ldrh	r3, [r7, #20]
 80051a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051b6:	b29b      	uxth	r3, r3
 80051b8:	8013      	strh	r3, [r2, #0]
 80051ba:	e0a3      	b.n	8005304 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80051bc:	687a      	ldr	r2, [r7, #4]
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	781b      	ldrb	r3, [r3, #0]
 80051c2:	009b      	lsls	r3, r3, #2
 80051c4:	4413      	add	r3, r2
 80051c6:	881b      	ldrh	r3, [r3, #0]
 80051c8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80051ca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80051cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d01b      	beq.n	800520c <USB_DeactivateEndpoint+0x2d4>
 80051d4:	687a      	ldr	r2, [r7, #4]
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	781b      	ldrb	r3, [r3, #0]
 80051da:	009b      	lsls	r3, r3, #2
 80051dc:	4413      	add	r3, r2
 80051de:	881b      	ldrh	r3, [r3, #0]
 80051e0:	b29b      	uxth	r3, r3
 80051e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051ea:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80051ec:	687a      	ldr	r2, [r7, #4]
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	781b      	ldrb	r3, [r3, #0]
 80051f2:	009b      	lsls	r3, r3, #2
 80051f4:	441a      	add	r2, r3
 80051f6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80051f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005200:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005204:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005208:	b29b      	uxth	r3, r3
 800520a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800520c:	687a      	ldr	r2, [r7, #4]
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	781b      	ldrb	r3, [r3, #0]
 8005212:	009b      	lsls	r3, r3, #2
 8005214:	4413      	add	r3, r2
 8005216:	881b      	ldrh	r3, [r3, #0]
 8005218:	857b      	strh	r3, [r7, #42]	; 0x2a
 800521a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800521c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005220:	2b00      	cmp	r3, #0
 8005222:	d01b      	beq.n	800525c <USB_DeactivateEndpoint+0x324>
 8005224:	687a      	ldr	r2, [r7, #4]
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	781b      	ldrb	r3, [r3, #0]
 800522a:	009b      	lsls	r3, r3, #2
 800522c:	4413      	add	r3, r2
 800522e:	881b      	ldrh	r3, [r3, #0]
 8005230:	b29b      	uxth	r3, r3
 8005232:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005236:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800523a:	853b      	strh	r3, [r7, #40]	; 0x28
 800523c:	687a      	ldr	r2, [r7, #4]
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	781b      	ldrb	r3, [r3, #0]
 8005242:	009b      	lsls	r3, r3, #2
 8005244:	441a      	add	r2, r3
 8005246:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005248:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800524c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005250:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005254:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005258:	b29b      	uxth	r3, r3
 800525a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800525c:	687a      	ldr	r2, [r7, #4]
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	781b      	ldrb	r3, [r3, #0]
 8005262:	009b      	lsls	r3, r3, #2
 8005264:	4413      	add	r3, r2
 8005266:	881b      	ldrh	r3, [r3, #0]
 8005268:	b29b      	uxth	r3, r3
 800526a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800526e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005272:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005274:	687a      	ldr	r2, [r7, #4]
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	781b      	ldrb	r3, [r3, #0]
 800527a:	009b      	lsls	r3, r3, #2
 800527c:	441a      	add	r2, r3
 800527e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005280:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005284:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005288:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800528c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005290:	b29b      	uxth	r3, r3
 8005292:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005294:	687a      	ldr	r2, [r7, #4]
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	781b      	ldrb	r3, [r3, #0]
 800529a:	009b      	lsls	r3, r3, #2
 800529c:	4413      	add	r3, r2
 800529e:	881b      	ldrh	r3, [r3, #0]
 80052a0:	b29b      	uxth	r3, r3
 80052a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052aa:	84bb      	strh	r3, [r7, #36]	; 0x24
 80052ac:	687a      	ldr	r2, [r7, #4]
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	781b      	ldrb	r3, [r3, #0]
 80052b2:	009b      	lsls	r3, r3, #2
 80052b4:	441a      	add	r2, r3
 80052b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80052b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052c8:	b29b      	uxth	r3, r3
 80052ca:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80052cc:	687a      	ldr	r2, [r7, #4]
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	781b      	ldrb	r3, [r3, #0]
 80052d2:	009b      	lsls	r3, r3, #2
 80052d4:	4413      	add	r3, r2
 80052d6:	881b      	ldrh	r3, [r3, #0]
 80052d8:	b29b      	uxth	r3, r3
 80052da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80052de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052e2:	847b      	strh	r3, [r7, #34]	; 0x22
 80052e4:	687a      	ldr	r2, [r7, #4]
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	781b      	ldrb	r3, [r3, #0]
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	441a      	add	r2, r3
 80052ee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80052f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005300:	b29b      	uxth	r3, r3
 8005302:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005304:	2300      	movs	r3, #0
}
 8005306:	4618      	mov	r0, r3
 8005308:	3734      	adds	r7, #52	; 0x34
 800530a:	46bd      	mov	sp, r7
 800530c:	bc80      	pop	{r7}
 800530e:	4770      	bx	lr

08005310 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b0cc      	sub	sp, #304	; 0x130
 8005314:	af00      	add	r7, sp, #0
 8005316:	1d3b      	adds	r3, r7, #4
 8005318:	6018      	str	r0, [r3, #0]
 800531a:	463b      	mov	r3, r7
 800531c:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800531e:	463b      	mov	r3, r7
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	785b      	ldrb	r3, [r3, #1]
 8005324:	2b01      	cmp	r3, #1
 8005326:	f040 872e 	bne.w	8006186 <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800532a:	463b      	mov	r3, r7
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	699a      	ldr	r2, [r3, #24]
 8005330:	463b      	mov	r3, r7
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	691b      	ldr	r3, [r3, #16]
 8005336:	429a      	cmp	r2, r3
 8005338:	d905      	bls.n	8005346 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 800533a:	463b      	mov	r3, r7
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	691b      	ldr	r3, [r3, #16]
 8005340:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8005344:	e004      	b.n	8005350 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8005346:	463b      	mov	r3, r7
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	699b      	ldr	r3, [r3, #24]
 800534c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005350:	463b      	mov	r3, r7
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	7b1b      	ldrb	r3, [r3, #12]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d134      	bne.n	80053c4 <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800535a:	463b      	mov	r3, r7
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	6959      	ldr	r1, [r3, #20]
 8005360:	463b      	mov	r3, r7
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	88da      	ldrh	r2, [r3, #6]
 8005366:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800536a:	b29b      	uxth	r3, r3
 800536c:	1d38      	adds	r0, r7, #4
 800536e:	6800      	ldr	r0, [r0, #0]
 8005370:	f001 fc03 	bl	8006b7a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005374:	f107 0310 	add.w	r3, r7, #16
 8005378:	1d3a      	adds	r2, r7, #4
 800537a:	6812      	ldr	r2, [r2, #0]
 800537c:	601a      	str	r2, [r3, #0]
 800537e:	1d3b      	adds	r3, r7, #4
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005386:	b29b      	uxth	r3, r3
 8005388:	4619      	mov	r1, r3
 800538a:	f107 0310 	add.w	r3, r7, #16
 800538e:	f107 0210 	add.w	r2, r7, #16
 8005392:	6812      	ldr	r2, [r2, #0]
 8005394:	440a      	add	r2, r1
 8005396:	601a      	str	r2, [r3, #0]
 8005398:	463b      	mov	r3, r7
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	781b      	ldrb	r3, [r3, #0]
 800539e:	011a      	lsls	r2, r3, #4
 80053a0:	f107 0310 	add.w	r3, r7, #16
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4413      	add	r3, r2
 80053a8:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80053ac:	f107 030c 	add.w	r3, r7, #12
 80053b0:	601a      	str	r2, [r3, #0]
 80053b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053b6:	b29a      	uxth	r2, r3
 80053b8:	f107 030c 	add.w	r3, r7, #12
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	801a      	strh	r2, [r3, #0]
 80053c0:	f000 beac 	b.w	800611c <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80053c4:	463b      	mov	r3, r7
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	78db      	ldrb	r3, [r3, #3]
 80053ca:	2b02      	cmp	r3, #2
 80053cc:	f040 838c 	bne.w	8005ae8 <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80053d0:	463b      	mov	r3, r7
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	6a1a      	ldr	r2, [r3, #32]
 80053d6:	463b      	mov	r3, r7
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	691b      	ldr	r3, [r3, #16]
 80053dc:	429a      	cmp	r2, r3
 80053de:	f240 8330 	bls.w	8005a42 <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80053e2:	1d3b      	adds	r3, r7, #4
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	463b      	mov	r3, r7
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	781b      	ldrb	r3, [r3, #0]
 80053ec:	009b      	lsls	r3, r3, #2
 80053ee:	4413      	add	r3, r2
 80053f0:	881b      	ldrh	r3, [r3, #0]
 80053f2:	b29b      	uxth	r3, r3
 80053f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053fc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8005400:	1d3b      	adds	r3, r7, #4
 8005402:	681a      	ldr	r2, [r3, #0]
 8005404:	463b      	mov	r3, r7
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	781b      	ldrb	r3, [r3, #0]
 800540a:	009b      	lsls	r3, r3, #2
 800540c:	441a      	add	r2, r3
 800540e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005412:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005416:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800541a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800541e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005422:	b29b      	uxth	r3, r3
 8005424:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005426:	463b      	mov	r3, r7
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	6a1a      	ldr	r2, [r3, #32]
 800542c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005430:	1ad2      	subs	r2, r2, r3
 8005432:	463b      	mov	r3, r7
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005438:	1d3b      	adds	r3, r7, #4
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	463b      	mov	r3, r7
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	781b      	ldrb	r3, [r3, #0]
 8005442:	009b      	lsls	r3, r3, #2
 8005444:	4413      	add	r3, r2
 8005446:	881b      	ldrh	r3, [r3, #0]
 8005448:	b29b      	uxth	r3, r3
 800544a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800544e:	2b00      	cmp	r3, #0
 8005450:	f000 819e 	beq.w	8005790 <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005454:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005458:	1d3a      	adds	r2, r7, #4
 800545a:	6812      	ldr	r2, [r2, #0]
 800545c:	601a      	str	r2, [r3, #0]
 800545e:	463b      	mov	r3, r7
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	785b      	ldrb	r3, [r3, #1]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d17a      	bne.n	800555e <USB_EPStartXfer+0x24e>
 8005468:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800546c:	1d3a      	adds	r2, r7, #4
 800546e:	6812      	ldr	r2, [r2, #0]
 8005470:	601a      	str	r2, [r3, #0]
 8005472:	1d3b      	adds	r3, r7, #4
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800547a:	b29b      	uxth	r3, r3
 800547c:	4619      	mov	r1, r3
 800547e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005482:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005486:	6812      	ldr	r2, [r2, #0]
 8005488:	440a      	add	r2, r1
 800548a:	601a      	str	r2, [r3, #0]
 800548c:	463b      	mov	r3, r7
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	781b      	ldrb	r3, [r3, #0]
 8005492:	011a      	lsls	r2, r3, #4
 8005494:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4413      	add	r3, r2
 800549c:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80054a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80054a4:	601a      	str	r2, [r3, #0]
 80054a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d11a      	bne.n	80054e4 <USB_EPStartXfer+0x1d4>
 80054ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	881b      	ldrh	r3, [r3, #0]
 80054b6:	b29b      	uxth	r3, r3
 80054b8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80054bc:	b29a      	uxth	r2, r3
 80054be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	801a      	strh	r2, [r3, #0]
 80054c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	881b      	ldrh	r3, [r3, #0]
 80054ce:	b29b      	uxth	r3, r3
 80054d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054d8:	b29a      	uxth	r2, r3
 80054da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	801a      	strh	r2, [r3, #0]
 80054e2:	e062      	b.n	80055aa <USB_EPStartXfer+0x29a>
 80054e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054e8:	2b3e      	cmp	r3, #62	; 0x3e
 80054ea:	d819      	bhi.n	8005520 <USB_EPStartXfer+0x210>
 80054ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054f0:	085b      	lsrs	r3, r3, #1
 80054f2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80054f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054fa:	f003 0301 	and.w	r3, r3, #1
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d004      	beq.n	800550c <USB_EPStartXfer+0x1fc>
 8005502:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005506:	3301      	adds	r3, #1
 8005508:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800550c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005510:	b29b      	uxth	r3, r3
 8005512:	029b      	lsls	r3, r3, #10
 8005514:	b29a      	uxth	r2, r3
 8005516:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	801a      	strh	r2, [r3, #0]
 800551e:	e044      	b.n	80055aa <USB_EPStartXfer+0x29a>
 8005520:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005524:	095b      	lsrs	r3, r3, #5
 8005526:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800552a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800552e:	f003 031f 	and.w	r3, r3, #31
 8005532:	2b00      	cmp	r3, #0
 8005534:	d104      	bne.n	8005540 <USB_EPStartXfer+0x230>
 8005536:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800553a:	3b01      	subs	r3, #1
 800553c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005540:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005544:	b29b      	uxth	r3, r3
 8005546:	029b      	lsls	r3, r3, #10
 8005548:	b29b      	uxth	r3, r3
 800554a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800554e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005552:	b29a      	uxth	r2, r3
 8005554:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	801a      	strh	r2, [r3, #0]
 800555c:	e025      	b.n	80055aa <USB_EPStartXfer+0x29a>
 800555e:	463b      	mov	r3, r7
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	785b      	ldrb	r3, [r3, #1]
 8005564:	2b01      	cmp	r3, #1
 8005566:	d120      	bne.n	80055aa <USB_EPStartXfer+0x29a>
 8005568:	1d3b      	adds	r3, r7, #4
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005570:	b29b      	uxth	r3, r3
 8005572:	4619      	mov	r1, r3
 8005574:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005578:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800557c:	6812      	ldr	r2, [r2, #0]
 800557e:	440a      	add	r2, r1
 8005580:	601a      	str	r2, [r3, #0]
 8005582:	463b      	mov	r3, r7
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	781b      	ldrb	r3, [r3, #0]
 8005588:	011a      	lsls	r2, r3, #4
 800558a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4413      	add	r3, r2
 8005592:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8005596:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800559a:	601a      	str	r2, [r3, #0]
 800559c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055a0:	b29a      	uxth	r2, r3
 80055a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80055aa:	463b      	mov	r3, r7
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	895b      	ldrh	r3, [r3, #10]
 80055b0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80055b4:	463b      	mov	r3, r7
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	6959      	ldr	r1, [r3, #20]
 80055ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055be:	b29b      	uxth	r3, r3
 80055c0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80055c4:	1d38      	adds	r0, r7, #4
 80055c6:	6800      	ldr	r0, [r0, #0]
 80055c8:	f001 fad7 	bl	8006b7a <USB_WritePMA>
            ep->xfer_buff += len;
 80055cc:	463b      	mov	r3, r7
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	695a      	ldr	r2, [r3, #20]
 80055d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055d6:	441a      	add	r2, r3
 80055d8:	463b      	mov	r3, r7
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80055de:	463b      	mov	r3, r7
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	6a1a      	ldr	r2, [r3, #32]
 80055e4:	463b      	mov	r3, r7
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	691b      	ldr	r3, [r3, #16]
 80055ea:	429a      	cmp	r2, r3
 80055ec:	d909      	bls.n	8005602 <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 80055ee:	463b      	mov	r3, r7
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	6a1a      	ldr	r2, [r3, #32]
 80055f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055f8:	1ad2      	subs	r2, r2, r3
 80055fa:	463b      	mov	r3, r7
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	621a      	str	r2, [r3, #32]
 8005600:	e008      	b.n	8005614 <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 8005602:	463b      	mov	r3, r7
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	6a1b      	ldr	r3, [r3, #32]
 8005608:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800560c:	463b      	mov	r3, r7
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	2200      	movs	r2, #0
 8005612:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005614:	463b      	mov	r3, r7
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	785b      	ldrb	r3, [r3, #1]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d17a      	bne.n	8005714 <USB_EPStartXfer+0x404>
 800561e:	f107 0318 	add.w	r3, r7, #24
 8005622:	1d3a      	adds	r2, r7, #4
 8005624:	6812      	ldr	r2, [r2, #0]
 8005626:	601a      	str	r2, [r3, #0]
 8005628:	1d3b      	adds	r3, r7, #4
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005630:	b29b      	uxth	r3, r3
 8005632:	4619      	mov	r1, r3
 8005634:	f107 0318 	add.w	r3, r7, #24
 8005638:	f107 0218 	add.w	r2, r7, #24
 800563c:	6812      	ldr	r2, [r2, #0]
 800563e:	440a      	add	r2, r1
 8005640:	601a      	str	r2, [r3, #0]
 8005642:	463b      	mov	r3, r7
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	781b      	ldrb	r3, [r3, #0]
 8005648:	011a      	lsls	r2, r3, #4
 800564a:	f107 0318 	add.w	r3, r7, #24
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4413      	add	r3, r2
 8005652:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005656:	f107 0314 	add.w	r3, r7, #20
 800565a:	601a      	str	r2, [r3, #0]
 800565c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005660:	2b00      	cmp	r3, #0
 8005662:	d11a      	bne.n	800569a <USB_EPStartXfer+0x38a>
 8005664:	f107 0314 	add.w	r3, r7, #20
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	881b      	ldrh	r3, [r3, #0]
 800566c:	b29b      	uxth	r3, r3
 800566e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005672:	b29a      	uxth	r2, r3
 8005674:	f107 0314 	add.w	r3, r7, #20
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	801a      	strh	r2, [r3, #0]
 800567c:	f107 0314 	add.w	r3, r7, #20
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	881b      	ldrh	r3, [r3, #0]
 8005684:	b29b      	uxth	r3, r3
 8005686:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800568a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800568e:	b29a      	uxth	r2, r3
 8005690:	f107 0314 	add.w	r3, r7, #20
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	801a      	strh	r2, [r3, #0]
 8005698:	e067      	b.n	800576a <USB_EPStartXfer+0x45a>
 800569a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800569e:	2b3e      	cmp	r3, #62	; 0x3e
 80056a0:	d819      	bhi.n	80056d6 <USB_EPStartXfer+0x3c6>
 80056a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056a6:	085b      	lsrs	r3, r3, #1
 80056a8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80056ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056b0:	f003 0301 	and.w	r3, r3, #1
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d004      	beq.n	80056c2 <USB_EPStartXfer+0x3b2>
 80056b8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80056bc:	3301      	adds	r3, #1
 80056be:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80056c2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80056c6:	b29b      	uxth	r3, r3
 80056c8:	029b      	lsls	r3, r3, #10
 80056ca:	b29a      	uxth	r2, r3
 80056cc:	f107 0314 	add.w	r3, r7, #20
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	801a      	strh	r2, [r3, #0]
 80056d4:	e049      	b.n	800576a <USB_EPStartXfer+0x45a>
 80056d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056da:	095b      	lsrs	r3, r3, #5
 80056dc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80056e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056e4:	f003 031f 	and.w	r3, r3, #31
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d104      	bne.n	80056f6 <USB_EPStartXfer+0x3e6>
 80056ec:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80056f0:	3b01      	subs	r3, #1
 80056f2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80056f6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80056fa:	b29b      	uxth	r3, r3
 80056fc:	029b      	lsls	r3, r3, #10
 80056fe:	b29b      	uxth	r3, r3
 8005700:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005704:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005708:	b29a      	uxth	r2, r3
 800570a:	f107 0314 	add.w	r3, r7, #20
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	801a      	strh	r2, [r3, #0]
 8005712:	e02a      	b.n	800576a <USB_EPStartXfer+0x45a>
 8005714:	463b      	mov	r3, r7
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	785b      	ldrb	r3, [r3, #1]
 800571a:	2b01      	cmp	r3, #1
 800571c:	d125      	bne.n	800576a <USB_EPStartXfer+0x45a>
 800571e:	f107 0320 	add.w	r3, r7, #32
 8005722:	1d3a      	adds	r2, r7, #4
 8005724:	6812      	ldr	r2, [r2, #0]
 8005726:	601a      	str	r2, [r3, #0]
 8005728:	1d3b      	adds	r3, r7, #4
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005730:	b29b      	uxth	r3, r3
 8005732:	4619      	mov	r1, r3
 8005734:	f107 0320 	add.w	r3, r7, #32
 8005738:	f107 0220 	add.w	r2, r7, #32
 800573c:	6812      	ldr	r2, [r2, #0]
 800573e:	440a      	add	r2, r1
 8005740:	601a      	str	r2, [r3, #0]
 8005742:	463b      	mov	r3, r7
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	781b      	ldrb	r3, [r3, #0]
 8005748:	011a      	lsls	r2, r3, #4
 800574a:	f107 0320 	add.w	r3, r7, #32
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4413      	add	r3, r2
 8005752:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005756:	f107 031c 	add.w	r3, r7, #28
 800575a:	601a      	str	r2, [r3, #0]
 800575c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005760:	b29a      	uxth	r2, r3
 8005762:	f107 031c 	add.w	r3, r7, #28
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800576a:	463b      	mov	r3, r7
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	891b      	ldrh	r3, [r3, #8]
 8005770:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005774:	463b      	mov	r3, r7
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	6959      	ldr	r1, [r3, #20]
 800577a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800577e:	b29b      	uxth	r3, r3
 8005780:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005784:	1d38      	adds	r0, r7, #4
 8005786:	6800      	ldr	r0, [r0, #0]
 8005788:	f001 f9f7 	bl	8006b7a <USB_WritePMA>
 800578c:	f000 bcc6 	b.w	800611c <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005790:	463b      	mov	r3, r7
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	785b      	ldrb	r3, [r3, #1]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d164      	bne.n	8005864 <USB_EPStartXfer+0x554>
 800579a:	1d3b      	adds	r3, r7, #4
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	64bb      	str	r3, [r7, #72]	; 0x48
 80057a0:	1d3b      	adds	r3, r7, #4
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057a8:	b29b      	uxth	r3, r3
 80057aa:	461a      	mov	r2, r3
 80057ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057ae:	4413      	add	r3, r2
 80057b0:	64bb      	str	r3, [r7, #72]	; 0x48
 80057b2:	463b      	mov	r3, r7
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	781b      	ldrb	r3, [r3, #0]
 80057b8:	011a      	lsls	r2, r3, #4
 80057ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057bc:	4413      	add	r3, r2
 80057be:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80057c2:	647b      	str	r3, [r7, #68]	; 0x44
 80057c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d112      	bne.n	80057f2 <USB_EPStartXfer+0x4e2>
 80057cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057ce:	881b      	ldrh	r3, [r3, #0]
 80057d0:	b29b      	uxth	r3, r3
 80057d2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80057d6:	b29a      	uxth	r2, r3
 80057d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057da:	801a      	strh	r2, [r3, #0]
 80057dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057de:	881b      	ldrh	r3, [r3, #0]
 80057e0:	b29b      	uxth	r3, r3
 80057e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057ea:	b29a      	uxth	r2, r3
 80057ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057ee:	801a      	strh	r2, [r3, #0]
 80057f0:	e057      	b.n	80058a2 <USB_EPStartXfer+0x592>
 80057f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057f6:	2b3e      	cmp	r3, #62	; 0x3e
 80057f8:	d817      	bhi.n	800582a <USB_EPStartXfer+0x51a>
 80057fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057fe:	085b      	lsrs	r3, r3, #1
 8005800:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005804:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005808:	f003 0301 	and.w	r3, r3, #1
 800580c:	2b00      	cmp	r3, #0
 800580e:	d004      	beq.n	800581a <USB_EPStartXfer+0x50a>
 8005810:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005814:	3301      	adds	r3, #1
 8005816:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800581a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800581e:	b29b      	uxth	r3, r3
 8005820:	029b      	lsls	r3, r3, #10
 8005822:	b29a      	uxth	r2, r3
 8005824:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005826:	801a      	strh	r2, [r3, #0]
 8005828:	e03b      	b.n	80058a2 <USB_EPStartXfer+0x592>
 800582a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800582e:	095b      	lsrs	r3, r3, #5
 8005830:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005834:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005838:	f003 031f 	and.w	r3, r3, #31
 800583c:	2b00      	cmp	r3, #0
 800583e:	d104      	bne.n	800584a <USB_EPStartXfer+0x53a>
 8005840:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005844:	3b01      	subs	r3, #1
 8005846:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800584a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800584e:	b29b      	uxth	r3, r3
 8005850:	029b      	lsls	r3, r3, #10
 8005852:	b29b      	uxth	r3, r3
 8005854:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005858:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800585c:	b29a      	uxth	r2, r3
 800585e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005860:	801a      	strh	r2, [r3, #0]
 8005862:	e01e      	b.n	80058a2 <USB_EPStartXfer+0x592>
 8005864:	463b      	mov	r3, r7
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	785b      	ldrb	r3, [r3, #1]
 800586a:	2b01      	cmp	r3, #1
 800586c:	d119      	bne.n	80058a2 <USB_EPStartXfer+0x592>
 800586e:	1d3b      	adds	r3, r7, #4
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	653b      	str	r3, [r7, #80]	; 0x50
 8005874:	1d3b      	adds	r3, r7, #4
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800587c:	b29b      	uxth	r3, r3
 800587e:	461a      	mov	r2, r3
 8005880:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005882:	4413      	add	r3, r2
 8005884:	653b      	str	r3, [r7, #80]	; 0x50
 8005886:	463b      	mov	r3, r7
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	781b      	ldrb	r3, [r3, #0]
 800588c:	011a      	lsls	r2, r3, #4
 800588e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005890:	4413      	add	r3, r2
 8005892:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005896:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005898:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800589c:	b29a      	uxth	r2, r3
 800589e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058a0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80058a2:	463b      	mov	r3, r7
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	891b      	ldrh	r3, [r3, #8]
 80058a8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80058ac:	463b      	mov	r3, r7
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	6959      	ldr	r1, [r3, #20]
 80058b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058b6:	b29b      	uxth	r3, r3
 80058b8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80058bc:	1d38      	adds	r0, r7, #4
 80058be:	6800      	ldr	r0, [r0, #0]
 80058c0:	f001 f95b 	bl	8006b7a <USB_WritePMA>
            ep->xfer_buff += len;
 80058c4:	463b      	mov	r3, r7
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	695a      	ldr	r2, [r3, #20]
 80058ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058ce:	441a      	add	r2, r3
 80058d0:	463b      	mov	r3, r7
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80058d6:	463b      	mov	r3, r7
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	6a1a      	ldr	r2, [r3, #32]
 80058dc:	463b      	mov	r3, r7
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	691b      	ldr	r3, [r3, #16]
 80058e2:	429a      	cmp	r2, r3
 80058e4:	d909      	bls.n	80058fa <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 80058e6:	463b      	mov	r3, r7
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	6a1a      	ldr	r2, [r3, #32]
 80058ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058f0:	1ad2      	subs	r2, r2, r3
 80058f2:	463b      	mov	r3, r7
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	621a      	str	r2, [r3, #32]
 80058f8:	e008      	b.n	800590c <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 80058fa:	463b      	mov	r3, r7
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	6a1b      	ldr	r3, [r3, #32]
 8005900:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8005904:	463b      	mov	r3, r7
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	2200      	movs	r2, #0
 800590a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800590c:	1d3b      	adds	r3, r7, #4
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	643b      	str	r3, [r7, #64]	; 0x40
 8005912:	463b      	mov	r3, r7
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	785b      	ldrb	r3, [r3, #1]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d164      	bne.n	80059e6 <USB_EPStartXfer+0x6d6>
 800591c:	1d3b      	adds	r3, r7, #4
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	63bb      	str	r3, [r7, #56]	; 0x38
 8005922:	1d3b      	adds	r3, r7, #4
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800592a:	b29b      	uxth	r3, r3
 800592c:	461a      	mov	r2, r3
 800592e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005930:	4413      	add	r3, r2
 8005932:	63bb      	str	r3, [r7, #56]	; 0x38
 8005934:	463b      	mov	r3, r7
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	781b      	ldrb	r3, [r3, #0]
 800593a:	011a      	lsls	r2, r3, #4
 800593c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800593e:	4413      	add	r3, r2
 8005940:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005944:	637b      	str	r3, [r7, #52]	; 0x34
 8005946:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800594a:	2b00      	cmp	r3, #0
 800594c:	d112      	bne.n	8005974 <USB_EPStartXfer+0x664>
 800594e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005950:	881b      	ldrh	r3, [r3, #0]
 8005952:	b29b      	uxth	r3, r3
 8005954:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005958:	b29a      	uxth	r2, r3
 800595a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800595c:	801a      	strh	r2, [r3, #0]
 800595e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005960:	881b      	ldrh	r3, [r3, #0]
 8005962:	b29b      	uxth	r3, r3
 8005964:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005968:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800596c:	b29a      	uxth	r2, r3
 800596e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005970:	801a      	strh	r2, [r3, #0]
 8005972:	e054      	b.n	8005a1e <USB_EPStartXfer+0x70e>
 8005974:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005978:	2b3e      	cmp	r3, #62	; 0x3e
 800597a:	d817      	bhi.n	80059ac <USB_EPStartXfer+0x69c>
 800597c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005980:	085b      	lsrs	r3, r3, #1
 8005982:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005986:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800598a:	f003 0301 	and.w	r3, r3, #1
 800598e:	2b00      	cmp	r3, #0
 8005990:	d004      	beq.n	800599c <USB_EPStartXfer+0x68c>
 8005992:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005996:	3301      	adds	r3, #1
 8005998:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800599c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80059a0:	b29b      	uxth	r3, r3
 80059a2:	029b      	lsls	r3, r3, #10
 80059a4:	b29a      	uxth	r2, r3
 80059a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059a8:	801a      	strh	r2, [r3, #0]
 80059aa:	e038      	b.n	8005a1e <USB_EPStartXfer+0x70e>
 80059ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059b0:	095b      	lsrs	r3, r3, #5
 80059b2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80059b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059ba:	f003 031f 	and.w	r3, r3, #31
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d104      	bne.n	80059cc <USB_EPStartXfer+0x6bc>
 80059c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80059c6:	3b01      	subs	r3, #1
 80059c8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80059cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80059d0:	b29b      	uxth	r3, r3
 80059d2:	029b      	lsls	r3, r3, #10
 80059d4:	b29b      	uxth	r3, r3
 80059d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059de:	b29a      	uxth	r2, r3
 80059e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059e2:	801a      	strh	r2, [r3, #0]
 80059e4:	e01b      	b.n	8005a1e <USB_EPStartXfer+0x70e>
 80059e6:	463b      	mov	r3, r7
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	785b      	ldrb	r3, [r3, #1]
 80059ec:	2b01      	cmp	r3, #1
 80059ee:	d116      	bne.n	8005a1e <USB_EPStartXfer+0x70e>
 80059f0:	1d3b      	adds	r3, r7, #4
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	461a      	mov	r2, r3
 80059fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059fe:	4413      	add	r3, r2
 8005a00:	643b      	str	r3, [r7, #64]	; 0x40
 8005a02:	463b      	mov	r3, r7
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	781b      	ldrb	r3, [r3, #0]
 8005a08:	011a      	lsls	r2, r3, #4
 8005a0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a0c:	4413      	add	r3, r2
 8005a0e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005a12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a18:	b29a      	uxth	r2, r3
 8005a1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a1c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005a1e:	463b      	mov	r3, r7
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	895b      	ldrh	r3, [r3, #10]
 8005a24:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005a28:	463b      	mov	r3, r7
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	6959      	ldr	r1, [r3, #20]
 8005a2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a32:	b29b      	uxth	r3, r3
 8005a34:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005a38:	1d38      	adds	r0, r7, #4
 8005a3a:	6800      	ldr	r0, [r0, #0]
 8005a3c:	f001 f89d 	bl	8006b7a <USB_WritePMA>
 8005a40:	e36c      	b.n	800611c <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005a42:	463b      	mov	r3, r7
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	6a1b      	ldr	r3, [r3, #32]
 8005a48:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8005a4c:	1d3b      	adds	r3, r7, #4
 8005a4e:	681a      	ldr	r2, [r3, #0]
 8005a50:	463b      	mov	r3, r7
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	781b      	ldrb	r3, [r3, #0]
 8005a56:	009b      	lsls	r3, r3, #2
 8005a58:	4413      	add	r3, r2
 8005a5a:	881b      	ldrh	r3, [r3, #0]
 8005a5c:	b29b      	uxth	r3, r3
 8005a5e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005a62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a66:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005a6a:	1d3b      	adds	r3, r7, #4
 8005a6c:	681a      	ldr	r2, [r3, #0]
 8005a6e:	463b      	mov	r3, r7
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	781b      	ldrb	r3, [r3, #0]
 8005a74:	009b      	lsls	r3, r3, #2
 8005a76:	441a      	add	r2, r3
 8005a78:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005a7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a8c:	b29b      	uxth	r3, r3
 8005a8e:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005a90:	1d3b      	adds	r3, r7, #4
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a96:	1d3b      	adds	r3, r7, #4
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a9e:	b29b      	uxth	r3, r3
 8005aa0:	461a      	mov	r2, r3
 8005aa2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005aa4:	4413      	add	r3, r2
 8005aa6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005aa8:	463b      	mov	r3, r7
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	781b      	ldrb	r3, [r3, #0]
 8005aae:	011a      	lsls	r2, r3, #4
 8005ab0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ab2:	4413      	add	r3, r2
 8005ab4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005ab8:	65bb      	str	r3, [r7, #88]	; 0x58
 8005aba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005abe:	b29a      	uxth	r2, r3
 8005ac0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005ac2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005ac4:	463b      	mov	r3, r7
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	891b      	ldrh	r3, [r3, #8]
 8005aca:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005ace:	463b      	mov	r3, r7
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	6959      	ldr	r1, [r3, #20]
 8005ad4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ad8:	b29b      	uxth	r3, r3
 8005ada:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005ade:	1d38      	adds	r0, r7, #4
 8005ae0:	6800      	ldr	r0, [r0, #0]
 8005ae2:	f001 f84a 	bl	8006b7a <USB_WritePMA>
 8005ae6:	e319      	b.n	800611c <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8005ae8:	1d3b      	adds	r3, r7, #4
 8005aea:	681a      	ldr	r2, [r3, #0]
 8005aec:	463b      	mov	r3, r7
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	781b      	ldrb	r3, [r3, #0]
 8005af2:	009b      	lsls	r3, r3, #2
 8005af4:	4413      	add	r3, r2
 8005af6:	881b      	ldrh	r3, [r3, #0]
 8005af8:	b29b      	uxth	r3, r3
 8005afa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005afe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b02:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8005b06:	1d3b      	adds	r3, r7, #4
 8005b08:	681a      	ldr	r2, [r3, #0]
 8005b0a:	463b      	mov	r3, r7
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	781b      	ldrb	r3, [r3, #0]
 8005b10:	009b      	lsls	r3, r3, #2
 8005b12:	441a      	add	r2, r3
 8005b14:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8005b18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b20:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005b24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b28:	b29b      	uxth	r3, r3
 8005b2a:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005b2c:	463b      	mov	r3, r7
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	6a1a      	ldr	r2, [r3, #32]
 8005b32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b36:	1ad2      	subs	r2, r2, r3
 8005b38:	463b      	mov	r3, r7
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005b3e:	1d3b      	adds	r3, r7, #4
 8005b40:	681a      	ldr	r2, [r3, #0]
 8005b42:	463b      	mov	r3, r7
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	781b      	ldrb	r3, [r3, #0]
 8005b48:	009b      	lsls	r3, r3, #2
 8005b4a:	4413      	add	r3, r2
 8005b4c:	881b      	ldrh	r3, [r3, #0]
 8005b4e:	b29b      	uxth	r3, r3
 8005b50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	f000 8162 	beq.w	8005e1e <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005b5a:	1d3b      	adds	r3, r7, #4
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005b62:	463b      	mov	r3, r7
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	785b      	ldrb	r3, [r3, #1]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d164      	bne.n	8005c36 <USB_EPStartXfer+0x926>
 8005b6c:	1d3b      	adds	r3, r7, #4
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	67bb      	str	r3, [r7, #120]	; 0x78
 8005b72:	1d3b      	adds	r3, r7, #4
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b7a:	b29b      	uxth	r3, r3
 8005b7c:	461a      	mov	r2, r3
 8005b7e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b80:	4413      	add	r3, r2
 8005b82:	67bb      	str	r3, [r7, #120]	; 0x78
 8005b84:	463b      	mov	r3, r7
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	781b      	ldrb	r3, [r3, #0]
 8005b8a:	011a      	lsls	r2, r3, #4
 8005b8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b8e:	4413      	add	r3, r2
 8005b90:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005b94:	677b      	str	r3, [r7, #116]	; 0x74
 8005b96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d112      	bne.n	8005bc4 <USB_EPStartXfer+0x8b4>
 8005b9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ba0:	881b      	ldrh	r3, [r3, #0]
 8005ba2:	b29b      	uxth	r3, r3
 8005ba4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005ba8:	b29a      	uxth	r2, r3
 8005baa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005bac:	801a      	strh	r2, [r3, #0]
 8005bae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005bb0:	881b      	ldrh	r3, [r3, #0]
 8005bb2:	b29b      	uxth	r3, r3
 8005bb4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bb8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bbc:	b29a      	uxth	r2, r3
 8005bbe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005bc0:	801a      	strh	r2, [r3, #0]
 8005bc2:	e057      	b.n	8005c74 <USB_EPStartXfer+0x964>
 8005bc4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bc8:	2b3e      	cmp	r3, #62	; 0x3e
 8005bca:	d817      	bhi.n	8005bfc <USB_EPStartXfer+0x8ec>
 8005bcc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bd0:	085b      	lsrs	r3, r3, #1
 8005bd2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005bd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bda:	f003 0301 	and.w	r3, r3, #1
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d004      	beq.n	8005bec <USB_EPStartXfer+0x8dc>
 8005be2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005be6:	3301      	adds	r3, #1
 8005be8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005bec:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005bf0:	b29b      	uxth	r3, r3
 8005bf2:	029b      	lsls	r3, r3, #10
 8005bf4:	b29a      	uxth	r2, r3
 8005bf6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005bf8:	801a      	strh	r2, [r3, #0]
 8005bfa:	e03b      	b.n	8005c74 <USB_EPStartXfer+0x964>
 8005bfc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c00:	095b      	lsrs	r3, r3, #5
 8005c02:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005c06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c0a:	f003 031f 	and.w	r3, r3, #31
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d104      	bne.n	8005c1c <USB_EPStartXfer+0x90c>
 8005c12:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005c16:	3b01      	subs	r3, #1
 8005c18:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005c1c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005c20:	b29b      	uxth	r3, r3
 8005c22:	029b      	lsls	r3, r3, #10
 8005c24:	b29b      	uxth	r3, r3
 8005c26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c2e:	b29a      	uxth	r2, r3
 8005c30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c32:	801a      	strh	r2, [r3, #0]
 8005c34:	e01e      	b.n	8005c74 <USB_EPStartXfer+0x964>
 8005c36:	463b      	mov	r3, r7
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	785b      	ldrb	r3, [r3, #1]
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	d119      	bne.n	8005c74 <USB_EPStartXfer+0x964>
 8005c40:	1d3b      	adds	r3, r7, #4
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c48:	b29b      	uxth	r3, r3
 8005c4a:	461a      	mov	r2, r3
 8005c4c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005c50:	4413      	add	r3, r2
 8005c52:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005c56:	463b      	mov	r3, r7
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	781b      	ldrb	r3, [r3, #0]
 8005c5c:	011a      	lsls	r2, r3, #4
 8005c5e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005c62:	4413      	add	r3, r2
 8005c64:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005c68:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005c6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c6e:	b29a      	uxth	r2, r3
 8005c70:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005c72:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005c74:	463b      	mov	r3, r7
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	895b      	ldrh	r3, [r3, #10]
 8005c7a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005c7e:	463b      	mov	r3, r7
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	6959      	ldr	r1, [r3, #20]
 8005c84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c88:	b29b      	uxth	r3, r3
 8005c8a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005c8e:	1d38      	adds	r0, r7, #4
 8005c90:	6800      	ldr	r0, [r0, #0]
 8005c92:	f000 ff72 	bl	8006b7a <USB_WritePMA>
          ep->xfer_buff += len;
 8005c96:	463b      	mov	r3, r7
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	695a      	ldr	r2, [r3, #20]
 8005c9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ca0:	441a      	add	r2, r3
 8005ca2:	463b      	mov	r3, r7
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8005ca8:	463b      	mov	r3, r7
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	6a1a      	ldr	r2, [r3, #32]
 8005cae:	463b      	mov	r3, r7
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	691b      	ldr	r3, [r3, #16]
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d909      	bls.n	8005ccc <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 8005cb8:	463b      	mov	r3, r7
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	6a1a      	ldr	r2, [r3, #32]
 8005cbe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cc2:	1ad2      	subs	r2, r2, r3
 8005cc4:	463b      	mov	r3, r7
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	621a      	str	r2, [r3, #32]
 8005cca:	e008      	b.n	8005cde <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 8005ccc:	463b      	mov	r3, r7
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	6a1b      	ldr	r3, [r3, #32]
 8005cd2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8005cd6:	463b      	mov	r3, r7
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8005cde:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	f000 821a 	beq.w	800611c <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005ce8:	463b      	mov	r3, r7
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	785b      	ldrb	r3, [r3, #1]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d164      	bne.n	8005dbc <USB_EPStartXfer+0xaac>
 8005cf2:	1d3b      	adds	r3, r7, #4
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	66bb      	str	r3, [r7, #104]	; 0x68
 8005cf8:	1d3b      	adds	r3, r7, #4
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d00:	b29b      	uxth	r3, r3
 8005d02:	461a      	mov	r2, r3
 8005d04:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005d06:	4413      	add	r3, r2
 8005d08:	66bb      	str	r3, [r7, #104]	; 0x68
 8005d0a:	463b      	mov	r3, r7
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	781b      	ldrb	r3, [r3, #0]
 8005d10:	011a      	lsls	r2, r3, #4
 8005d12:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005d14:	4413      	add	r3, r2
 8005d16:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005d1a:	667b      	str	r3, [r7, #100]	; 0x64
 8005d1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d112      	bne.n	8005d4a <USB_EPStartXfer+0xa3a>
 8005d24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005d26:	881b      	ldrh	r3, [r3, #0]
 8005d28:	b29b      	uxth	r3, r3
 8005d2a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d2e:	b29a      	uxth	r2, r3
 8005d30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005d32:	801a      	strh	r2, [r3, #0]
 8005d34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005d36:	881b      	ldrh	r3, [r3, #0]
 8005d38:	b29b      	uxth	r3, r3
 8005d3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d42:	b29a      	uxth	r2, r3
 8005d44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005d46:	801a      	strh	r2, [r3, #0]
 8005d48:	e057      	b.n	8005dfa <USB_EPStartXfer+0xaea>
 8005d4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d4e:	2b3e      	cmp	r3, #62	; 0x3e
 8005d50:	d817      	bhi.n	8005d82 <USB_EPStartXfer+0xa72>
 8005d52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d56:	085b      	lsrs	r3, r3, #1
 8005d58:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005d5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d60:	f003 0301 	and.w	r3, r3, #1
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d004      	beq.n	8005d72 <USB_EPStartXfer+0xa62>
 8005d68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d6c:	3301      	adds	r3, #1
 8005d6e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005d72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d76:	b29b      	uxth	r3, r3
 8005d78:	029b      	lsls	r3, r3, #10
 8005d7a:	b29a      	uxth	r2, r3
 8005d7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005d7e:	801a      	strh	r2, [r3, #0]
 8005d80:	e03b      	b.n	8005dfa <USB_EPStartXfer+0xaea>
 8005d82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d86:	095b      	lsrs	r3, r3, #5
 8005d88:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005d8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d90:	f003 031f 	and.w	r3, r3, #31
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d104      	bne.n	8005da2 <USB_EPStartXfer+0xa92>
 8005d98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d9c:	3b01      	subs	r3, #1
 8005d9e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005da2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005da6:	b29b      	uxth	r3, r3
 8005da8:	029b      	lsls	r3, r3, #10
 8005daa:	b29b      	uxth	r3, r3
 8005dac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005db0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005db4:	b29a      	uxth	r2, r3
 8005db6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005db8:	801a      	strh	r2, [r3, #0]
 8005dba:	e01e      	b.n	8005dfa <USB_EPStartXfer+0xaea>
 8005dbc:	463b      	mov	r3, r7
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	785b      	ldrb	r3, [r3, #1]
 8005dc2:	2b01      	cmp	r3, #1
 8005dc4:	d119      	bne.n	8005dfa <USB_EPStartXfer+0xaea>
 8005dc6:	1d3b      	adds	r3, r7, #4
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	673b      	str	r3, [r7, #112]	; 0x70
 8005dcc:	1d3b      	adds	r3, r7, #4
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005dd4:	b29b      	uxth	r3, r3
 8005dd6:	461a      	mov	r2, r3
 8005dd8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005dda:	4413      	add	r3, r2
 8005ddc:	673b      	str	r3, [r7, #112]	; 0x70
 8005dde:	463b      	mov	r3, r7
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	781b      	ldrb	r3, [r3, #0]
 8005de4:	011a      	lsls	r2, r3, #4
 8005de6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005de8:	4413      	add	r3, r2
 8005dea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005dee:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005df0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005df4:	b29a      	uxth	r2, r3
 8005df6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005df8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005dfa:	463b      	mov	r3, r7
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	891b      	ldrh	r3, [r3, #8]
 8005e00:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005e04:	463b      	mov	r3, r7
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	6959      	ldr	r1, [r3, #20]
 8005e0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005e14:	1d38      	adds	r0, r7, #4
 8005e16:	6800      	ldr	r0, [r0, #0]
 8005e18:	f000 feaf 	bl	8006b7a <USB_WritePMA>
 8005e1c:	e17e      	b.n	800611c <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005e1e:	463b      	mov	r3, r7
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	785b      	ldrb	r3, [r3, #1]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d16f      	bne.n	8005f08 <USB_EPStartXfer+0xbf8>
 8005e28:	1d3b      	adds	r3, r7, #4
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005e30:	1d3b      	adds	r3, r7, #4
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e38:	b29b      	uxth	r3, r3
 8005e3a:	461a      	mov	r2, r3
 8005e3c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005e40:	4413      	add	r3, r2
 8005e42:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005e46:	463b      	mov	r3, r7
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	781b      	ldrb	r3, [r3, #0]
 8005e4c:	011a      	lsls	r2, r3, #4
 8005e4e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005e52:	4413      	add	r3, r2
 8005e54:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005e58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005e5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d116      	bne.n	8005e92 <USB_EPStartXfer+0xb82>
 8005e64:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005e68:	881b      	ldrh	r3, [r3, #0]
 8005e6a:	b29b      	uxth	r3, r3
 8005e6c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005e70:	b29a      	uxth	r2, r3
 8005e72:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005e76:	801a      	strh	r2, [r3, #0]
 8005e78:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005e7c:	881b      	ldrh	r3, [r3, #0]
 8005e7e:	b29b      	uxth	r3, r3
 8005e80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e88:	b29a      	uxth	r2, r3
 8005e8a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005e8e:	801a      	strh	r2, [r3, #0]
 8005e90:	e05f      	b.n	8005f52 <USB_EPStartXfer+0xc42>
 8005e92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e96:	2b3e      	cmp	r3, #62	; 0x3e
 8005e98:	d818      	bhi.n	8005ecc <USB_EPStartXfer+0xbbc>
 8005e9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e9e:	085b      	lsrs	r3, r3, #1
 8005ea0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005ea4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ea8:	f003 0301 	and.w	r3, r3, #1
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d004      	beq.n	8005eba <USB_EPStartXfer+0xbaa>
 8005eb0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005eb4:	3301      	adds	r3, #1
 8005eb6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005eba:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005ebe:	b29b      	uxth	r3, r3
 8005ec0:	029b      	lsls	r3, r3, #10
 8005ec2:	b29a      	uxth	r2, r3
 8005ec4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005ec8:	801a      	strh	r2, [r3, #0]
 8005eca:	e042      	b.n	8005f52 <USB_EPStartXfer+0xc42>
 8005ecc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ed0:	095b      	lsrs	r3, r3, #5
 8005ed2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005ed6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005eda:	f003 031f 	and.w	r3, r3, #31
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d104      	bne.n	8005eec <USB_EPStartXfer+0xbdc>
 8005ee2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005ee6:	3b01      	subs	r3, #1
 8005ee8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005eec:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005ef0:	b29b      	uxth	r3, r3
 8005ef2:	029b      	lsls	r3, r3, #10
 8005ef4:	b29b      	uxth	r3, r3
 8005ef6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005efa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005efe:	b29a      	uxth	r2, r3
 8005f00:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005f04:	801a      	strh	r2, [r3, #0]
 8005f06:	e024      	b.n	8005f52 <USB_EPStartXfer+0xc42>
 8005f08:	463b      	mov	r3, r7
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	785b      	ldrb	r3, [r3, #1]
 8005f0e:	2b01      	cmp	r3, #1
 8005f10:	d11f      	bne.n	8005f52 <USB_EPStartXfer+0xc42>
 8005f12:	1d3b      	adds	r3, r7, #4
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005f1a:	1d3b      	adds	r3, r7, #4
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f22:	b29b      	uxth	r3, r3
 8005f24:	461a      	mov	r2, r3
 8005f26:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005f2a:	4413      	add	r3, r2
 8005f2c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005f30:	463b      	mov	r3, r7
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	781b      	ldrb	r3, [r3, #0]
 8005f36:	011a      	lsls	r2, r3, #4
 8005f38:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005f3c:	4413      	add	r3, r2
 8005f3e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005f42:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005f46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f4a:	b29a      	uxth	r2, r3
 8005f4c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005f50:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005f52:	463b      	mov	r3, r7
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	891b      	ldrh	r3, [r3, #8]
 8005f58:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005f5c:	463b      	mov	r3, r7
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	6959      	ldr	r1, [r3, #20]
 8005f62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f66:	b29b      	uxth	r3, r3
 8005f68:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005f6c:	1d38      	adds	r0, r7, #4
 8005f6e:	6800      	ldr	r0, [r0, #0]
 8005f70:	f000 fe03 	bl	8006b7a <USB_WritePMA>
          ep->xfer_buff += len;
 8005f74:	463b      	mov	r3, r7
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	695a      	ldr	r2, [r3, #20]
 8005f7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f7e:	441a      	add	r2, r3
 8005f80:	463b      	mov	r3, r7
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8005f86:	463b      	mov	r3, r7
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	6a1a      	ldr	r2, [r3, #32]
 8005f8c:	463b      	mov	r3, r7
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	691b      	ldr	r3, [r3, #16]
 8005f92:	429a      	cmp	r2, r3
 8005f94:	d909      	bls.n	8005faa <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 8005f96:	463b      	mov	r3, r7
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	6a1a      	ldr	r2, [r3, #32]
 8005f9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fa0:	1ad2      	subs	r2, r2, r3
 8005fa2:	463b      	mov	r3, r7
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	621a      	str	r2, [r3, #32]
 8005fa8:	e008      	b.n	8005fbc <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 8005faa:	463b      	mov	r3, r7
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	6a1b      	ldr	r3, [r3, #32]
 8005fb0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8005fb4:	463b      	mov	r3, r7
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8005fbc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	f000 80ab 	beq.w	800611c <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005fc6:	1d3b      	adds	r3, r7, #4
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005fce:	463b      	mov	r3, r7
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	785b      	ldrb	r3, [r3, #1]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d16f      	bne.n	80060b8 <USB_EPStartXfer+0xda8>
 8005fd8:	1d3b      	adds	r3, r7, #4
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005fe0:	1d3b      	adds	r3, r7, #4
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fe8:	b29b      	uxth	r3, r3
 8005fea:	461a      	mov	r2, r3
 8005fec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005ff0:	4413      	add	r3, r2
 8005ff2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005ff6:	463b      	mov	r3, r7
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	781b      	ldrb	r3, [r3, #0]
 8005ffc:	011a      	lsls	r2, r3, #4
 8005ffe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006002:	4413      	add	r3, r2
 8006004:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006008:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800600c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006010:	2b00      	cmp	r3, #0
 8006012:	d116      	bne.n	8006042 <USB_EPStartXfer+0xd32>
 8006014:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006018:	881b      	ldrh	r3, [r3, #0]
 800601a:	b29b      	uxth	r3, r3
 800601c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006020:	b29a      	uxth	r2, r3
 8006022:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006026:	801a      	strh	r2, [r3, #0]
 8006028:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800602c:	881b      	ldrh	r3, [r3, #0]
 800602e:	b29b      	uxth	r3, r3
 8006030:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006034:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006038:	b29a      	uxth	r2, r3
 800603a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800603e:	801a      	strh	r2, [r3, #0]
 8006040:	e05b      	b.n	80060fa <USB_EPStartXfer+0xdea>
 8006042:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006046:	2b3e      	cmp	r3, #62	; 0x3e
 8006048:	d818      	bhi.n	800607c <USB_EPStartXfer+0xd6c>
 800604a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800604e:	085b      	lsrs	r3, r3, #1
 8006050:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006054:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006058:	f003 0301 	and.w	r3, r3, #1
 800605c:	2b00      	cmp	r3, #0
 800605e:	d004      	beq.n	800606a <USB_EPStartXfer+0xd5a>
 8006060:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006064:	3301      	adds	r3, #1
 8006066:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800606a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800606e:	b29b      	uxth	r3, r3
 8006070:	029b      	lsls	r3, r3, #10
 8006072:	b29a      	uxth	r2, r3
 8006074:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006078:	801a      	strh	r2, [r3, #0]
 800607a:	e03e      	b.n	80060fa <USB_EPStartXfer+0xdea>
 800607c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006080:	095b      	lsrs	r3, r3, #5
 8006082:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006086:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800608a:	f003 031f 	and.w	r3, r3, #31
 800608e:	2b00      	cmp	r3, #0
 8006090:	d104      	bne.n	800609c <USB_EPStartXfer+0xd8c>
 8006092:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006096:	3b01      	subs	r3, #1
 8006098:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800609c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80060a0:	b29b      	uxth	r3, r3
 80060a2:	029b      	lsls	r3, r3, #10
 80060a4:	b29b      	uxth	r3, r3
 80060a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060ae:	b29a      	uxth	r2, r3
 80060b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80060b4:	801a      	strh	r2, [r3, #0]
 80060b6:	e020      	b.n	80060fa <USB_EPStartXfer+0xdea>
 80060b8:	463b      	mov	r3, r7
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	785b      	ldrb	r3, [r3, #1]
 80060be:	2b01      	cmp	r3, #1
 80060c0:	d11b      	bne.n	80060fa <USB_EPStartXfer+0xdea>
 80060c2:	1d3b      	adds	r3, r7, #4
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060ca:	b29b      	uxth	r3, r3
 80060cc:	461a      	mov	r2, r3
 80060ce:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80060d2:	4413      	add	r3, r2
 80060d4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80060d8:	463b      	mov	r3, r7
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	781b      	ldrb	r3, [r3, #0]
 80060de:	011a      	lsls	r2, r3, #4
 80060e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80060e4:	4413      	add	r3, r2
 80060e6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80060ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80060ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060f2:	b29a      	uxth	r2, r3
 80060f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80060f8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80060fa:	463b      	mov	r3, r7
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	895b      	ldrh	r3, [r3, #10]
 8006100:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006104:	463b      	mov	r3, r7
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	6959      	ldr	r1, [r3, #20]
 800610a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800610e:	b29b      	uxth	r3, r3
 8006110:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006114:	1d38      	adds	r0, r7, #4
 8006116:	6800      	ldr	r0, [r0, #0]
 8006118:	f000 fd2f 	bl	8006b7a <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800611c:	1d3b      	adds	r3, r7, #4
 800611e:	681a      	ldr	r2, [r3, #0]
 8006120:	463b      	mov	r3, r7
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	781b      	ldrb	r3, [r3, #0]
 8006126:	009b      	lsls	r3, r3, #2
 8006128:	4413      	add	r3, r2
 800612a:	881b      	ldrh	r3, [r3, #0]
 800612c:	b29b      	uxth	r3, r3
 800612e:	f107 020a 	add.w	r2, r7, #10
 8006132:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006136:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800613a:	8013      	strh	r3, [r2, #0]
 800613c:	f107 030a 	add.w	r3, r7, #10
 8006140:	f107 020a 	add.w	r2, r7, #10
 8006144:	8812      	ldrh	r2, [r2, #0]
 8006146:	f082 0210 	eor.w	r2, r2, #16
 800614a:	801a      	strh	r2, [r3, #0]
 800614c:	f107 030a 	add.w	r3, r7, #10
 8006150:	f107 020a 	add.w	r2, r7, #10
 8006154:	8812      	ldrh	r2, [r2, #0]
 8006156:	f082 0220 	eor.w	r2, r2, #32
 800615a:	801a      	strh	r2, [r3, #0]
 800615c:	1d3b      	adds	r3, r7, #4
 800615e:	681a      	ldr	r2, [r3, #0]
 8006160:	463b      	mov	r3, r7
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	781b      	ldrb	r3, [r3, #0]
 8006166:	009b      	lsls	r3, r3, #2
 8006168:	441a      	add	r2, r3
 800616a:	f107 030a 	add.w	r3, r7, #10
 800616e:	881b      	ldrh	r3, [r3, #0]
 8006170:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006174:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006178:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800617c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006180:	b29b      	uxth	r3, r3
 8006182:	8013      	strh	r3, [r2, #0]
 8006184:	e3b5      	b.n	80068f2 <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006186:	463b      	mov	r3, r7
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	7b1b      	ldrb	r3, [r3, #12]
 800618c:	2b00      	cmp	r3, #0
 800618e:	f040 8090 	bne.w	80062b2 <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006192:	463b      	mov	r3, r7
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	699a      	ldr	r2, [r3, #24]
 8006198:	463b      	mov	r3, r7
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	691b      	ldr	r3, [r3, #16]
 800619e:	429a      	cmp	r2, r3
 80061a0:	d90e      	bls.n	80061c0 <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 80061a2:	463b      	mov	r3, r7
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	691b      	ldr	r3, [r3, #16]
 80061a8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 80061ac:	463b      	mov	r3, r7
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	699a      	ldr	r2, [r3, #24]
 80061b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061b6:	1ad2      	subs	r2, r2, r3
 80061b8:	463b      	mov	r3, r7
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	619a      	str	r2, [r3, #24]
 80061be:	e008      	b.n	80061d2 <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 80061c0:	463b      	mov	r3, r7
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	699b      	ldr	r3, [r3, #24]
 80061c6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 80061ca:	463b      	mov	r3, r7
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	2200      	movs	r2, #0
 80061d0:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80061d2:	1d3b      	adds	r3, r7, #4
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80061da:	1d3b      	adds	r3, r7, #4
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061e2:	b29b      	uxth	r3, r3
 80061e4:	461a      	mov	r2, r3
 80061e6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80061ea:	4413      	add	r3, r2
 80061ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80061f0:	463b      	mov	r3, r7
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	781b      	ldrb	r3, [r3, #0]
 80061f6:	011a      	lsls	r2, r3, #4
 80061f8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80061fc:	4413      	add	r3, r2
 80061fe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006202:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006206:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800620a:	2b00      	cmp	r3, #0
 800620c:	d116      	bne.n	800623c <USB_EPStartXfer+0xf2c>
 800620e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006212:	881b      	ldrh	r3, [r3, #0]
 8006214:	b29b      	uxth	r3, r3
 8006216:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800621a:	b29a      	uxth	r2, r3
 800621c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006220:	801a      	strh	r2, [r3, #0]
 8006222:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006226:	881b      	ldrh	r3, [r3, #0]
 8006228:	b29b      	uxth	r3, r3
 800622a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800622e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006232:	b29a      	uxth	r2, r3
 8006234:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006238:	801a      	strh	r2, [r3, #0]
 800623a:	e32c      	b.n	8006896 <USB_EPStartXfer+0x1586>
 800623c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006240:	2b3e      	cmp	r3, #62	; 0x3e
 8006242:	d818      	bhi.n	8006276 <USB_EPStartXfer+0xf66>
 8006244:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006248:	085b      	lsrs	r3, r3, #1
 800624a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800624e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006252:	f003 0301 	and.w	r3, r3, #1
 8006256:	2b00      	cmp	r3, #0
 8006258:	d004      	beq.n	8006264 <USB_EPStartXfer+0xf54>
 800625a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800625e:	3301      	adds	r3, #1
 8006260:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006264:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006268:	b29b      	uxth	r3, r3
 800626a:	029b      	lsls	r3, r3, #10
 800626c:	b29a      	uxth	r2, r3
 800626e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006272:	801a      	strh	r2, [r3, #0]
 8006274:	e30f      	b.n	8006896 <USB_EPStartXfer+0x1586>
 8006276:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800627a:	095b      	lsrs	r3, r3, #5
 800627c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006280:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006284:	f003 031f 	and.w	r3, r3, #31
 8006288:	2b00      	cmp	r3, #0
 800628a:	d104      	bne.n	8006296 <USB_EPStartXfer+0xf86>
 800628c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006290:	3b01      	subs	r3, #1
 8006292:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006296:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800629a:	b29b      	uxth	r3, r3
 800629c:	029b      	lsls	r3, r3, #10
 800629e:	b29b      	uxth	r3, r3
 80062a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062a8:	b29a      	uxth	r2, r3
 80062aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80062ae:	801a      	strh	r2, [r3, #0]
 80062b0:	e2f1      	b.n	8006896 <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80062b2:	463b      	mov	r3, r7
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	78db      	ldrb	r3, [r3, #3]
 80062b8:	2b02      	cmp	r3, #2
 80062ba:	f040 818f 	bne.w	80065dc <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80062be:	463b      	mov	r3, r7
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	785b      	ldrb	r3, [r3, #1]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d175      	bne.n	80063b4 <USB_EPStartXfer+0x10a4>
 80062c8:	1d3b      	adds	r3, r7, #4
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80062d0:	1d3b      	adds	r3, r7, #4
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062d8:	b29b      	uxth	r3, r3
 80062da:	461a      	mov	r2, r3
 80062dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80062e0:	4413      	add	r3, r2
 80062e2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80062e6:	463b      	mov	r3, r7
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	781b      	ldrb	r3, [r3, #0]
 80062ec:	011a      	lsls	r2, r3, #4
 80062ee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80062f2:	4413      	add	r3, r2
 80062f4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80062f8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80062fc:	463b      	mov	r3, r7
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	691b      	ldr	r3, [r3, #16]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d116      	bne.n	8006334 <USB_EPStartXfer+0x1024>
 8006306:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800630a:	881b      	ldrh	r3, [r3, #0]
 800630c:	b29b      	uxth	r3, r3
 800630e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006312:	b29a      	uxth	r2, r3
 8006314:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006318:	801a      	strh	r2, [r3, #0]
 800631a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800631e:	881b      	ldrh	r3, [r3, #0]
 8006320:	b29b      	uxth	r3, r3
 8006322:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006326:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800632a:	b29a      	uxth	r2, r3
 800632c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006330:	801a      	strh	r2, [r3, #0]
 8006332:	e065      	b.n	8006400 <USB_EPStartXfer+0x10f0>
 8006334:	463b      	mov	r3, r7
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	691b      	ldr	r3, [r3, #16]
 800633a:	2b3e      	cmp	r3, #62	; 0x3e
 800633c:	d81a      	bhi.n	8006374 <USB_EPStartXfer+0x1064>
 800633e:	463b      	mov	r3, r7
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	691b      	ldr	r3, [r3, #16]
 8006344:	085b      	lsrs	r3, r3, #1
 8006346:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800634a:	463b      	mov	r3, r7
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	691b      	ldr	r3, [r3, #16]
 8006350:	f003 0301 	and.w	r3, r3, #1
 8006354:	2b00      	cmp	r3, #0
 8006356:	d004      	beq.n	8006362 <USB_EPStartXfer+0x1052>
 8006358:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800635c:	3301      	adds	r3, #1
 800635e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006362:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006366:	b29b      	uxth	r3, r3
 8006368:	029b      	lsls	r3, r3, #10
 800636a:	b29a      	uxth	r2, r3
 800636c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006370:	801a      	strh	r2, [r3, #0]
 8006372:	e045      	b.n	8006400 <USB_EPStartXfer+0x10f0>
 8006374:	463b      	mov	r3, r7
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	691b      	ldr	r3, [r3, #16]
 800637a:	095b      	lsrs	r3, r3, #5
 800637c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006380:	463b      	mov	r3, r7
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	691b      	ldr	r3, [r3, #16]
 8006386:	f003 031f 	and.w	r3, r3, #31
 800638a:	2b00      	cmp	r3, #0
 800638c:	d104      	bne.n	8006398 <USB_EPStartXfer+0x1088>
 800638e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006392:	3b01      	subs	r3, #1
 8006394:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006398:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800639c:	b29b      	uxth	r3, r3
 800639e:	029b      	lsls	r3, r3, #10
 80063a0:	b29b      	uxth	r3, r3
 80063a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063aa:	b29a      	uxth	r2, r3
 80063ac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80063b0:	801a      	strh	r2, [r3, #0]
 80063b2:	e025      	b.n	8006400 <USB_EPStartXfer+0x10f0>
 80063b4:	463b      	mov	r3, r7
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	785b      	ldrb	r3, [r3, #1]
 80063ba:	2b01      	cmp	r3, #1
 80063bc:	d120      	bne.n	8006400 <USB_EPStartXfer+0x10f0>
 80063be:	1d3b      	adds	r3, r7, #4
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80063c6:	1d3b      	adds	r3, r7, #4
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063ce:	b29b      	uxth	r3, r3
 80063d0:	461a      	mov	r2, r3
 80063d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80063d6:	4413      	add	r3, r2
 80063d8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80063dc:	463b      	mov	r3, r7
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	781b      	ldrb	r3, [r3, #0]
 80063e2:	011a      	lsls	r2, r3, #4
 80063e4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80063e8:	4413      	add	r3, r2
 80063ea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80063ee:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80063f2:	463b      	mov	r3, r7
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	691b      	ldr	r3, [r3, #16]
 80063f8:	b29a      	uxth	r2, r3
 80063fa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80063fe:	801a      	strh	r2, [r3, #0]
 8006400:	1d3b      	adds	r3, r7, #4
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006408:	463b      	mov	r3, r7
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	785b      	ldrb	r3, [r3, #1]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d175      	bne.n	80064fe <USB_EPStartXfer+0x11ee>
 8006412:	1d3b      	adds	r3, r7, #4
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800641a:	1d3b      	adds	r3, r7, #4
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006422:	b29b      	uxth	r3, r3
 8006424:	461a      	mov	r2, r3
 8006426:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800642a:	4413      	add	r3, r2
 800642c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006430:	463b      	mov	r3, r7
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	781b      	ldrb	r3, [r3, #0]
 8006436:	011a      	lsls	r2, r3, #4
 8006438:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800643c:	4413      	add	r3, r2
 800643e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006442:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006446:	463b      	mov	r3, r7
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	691b      	ldr	r3, [r3, #16]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d116      	bne.n	800647e <USB_EPStartXfer+0x116e>
 8006450:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006454:	881b      	ldrh	r3, [r3, #0]
 8006456:	b29b      	uxth	r3, r3
 8006458:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800645c:	b29a      	uxth	r2, r3
 800645e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006462:	801a      	strh	r2, [r3, #0]
 8006464:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006468:	881b      	ldrh	r3, [r3, #0]
 800646a:	b29b      	uxth	r3, r3
 800646c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006470:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006474:	b29a      	uxth	r2, r3
 8006476:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800647a:	801a      	strh	r2, [r3, #0]
 800647c:	e061      	b.n	8006542 <USB_EPStartXfer+0x1232>
 800647e:	463b      	mov	r3, r7
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	691b      	ldr	r3, [r3, #16]
 8006484:	2b3e      	cmp	r3, #62	; 0x3e
 8006486:	d81a      	bhi.n	80064be <USB_EPStartXfer+0x11ae>
 8006488:	463b      	mov	r3, r7
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	691b      	ldr	r3, [r3, #16]
 800648e:	085b      	lsrs	r3, r3, #1
 8006490:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006494:	463b      	mov	r3, r7
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	691b      	ldr	r3, [r3, #16]
 800649a:	f003 0301 	and.w	r3, r3, #1
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d004      	beq.n	80064ac <USB_EPStartXfer+0x119c>
 80064a2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80064a6:	3301      	adds	r3, #1
 80064a8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80064ac:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80064b0:	b29b      	uxth	r3, r3
 80064b2:	029b      	lsls	r3, r3, #10
 80064b4:	b29a      	uxth	r2, r3
 80064b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80064ba:	801a      	strh	r2, [r3, #0]
 80064bc:	e041      	b.n	8006542 <USB_EPStartXfer+0x1232>
 80064be:	463b      	mov	r3, r7
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	691b      	ldr	r3, [r3, #16]
 80064c4:	095b      	lsrs	r3, r3, #5
 80064c6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80064ca:	463b      	mov	r3, r7
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	691b      	ldr	r3, [r3, #16]
 80064d0:	f003 031f 	and.w	r3, r3, #31
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d104      	bne.n	80064e2 <USB_EPStartXfer+0x11d2>
 80064d8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80064dc:	3b01      	subs	r3, #1
 80064de:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80064e2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80064e6:	b29b      	uxth	r3, r3
 80064e8:	029b      	lsls	r3, r3, #10
 80064ea:	b29b      	uxth	r3, r3
 80064ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064f4:	b29a      	uxth	r2, r3
 80064f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80064fa:	801a      	strh	r2, [r3, #0]
 80064fc:	e021      	b.n	8006542 <USB_EPStartXfer+0x1232>
 80064fe:	463b      	mov	r3, r7
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	785b      	ldrb	r3, [r3, #1]
 8006504:	2b01      	cmp	r3, #1
 8006506:	d11c      	bne.n	8006542 <USB_EPStartXfer+0x1232>
 8006508:	1d3b      	adds	r3, r7, #4
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006510:	b29b      	uxth	r3, r3
 8006512:	461a      	mov	r2, r3
 8006514:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006518:	4413      	add	r3, r2
 800651a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800651e:	463b      	mov	r3, r7
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	781b      	ldrb	r3, [r3, #0]
 8006524:	011a      	lsls	r2, r3, #4
 8006526:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800652a:	4413      	add	r3, r2
 800652c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006530:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006534:	463b      	mov	r3, r7
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	691b      	ldr	r3, [r3, #16]
 800653a:	b29a      	uxth	r2, r3
 800653c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006540:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006542:	463b      	mov	r3, r7
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	69db      	ldr	r3, [r3, #28]
 8006548:	2b00      	cmp	r3, #0
 800654a:	f000 81a4 	beq.w	8006896 <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800654e:	1d3b      	adds	r3, r7, #4
 8006550:	681a      	ldr	r2, [r3, #0]
 8006552:	463b      	mov	r3, r7
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	781b      	ldrb	r3, [r3, #0]
 8006558:	009b      	lsls	r3, r3, #2
 800655a:	4413      	add	r3, r2
 800655c:	881b      	ldrh	r3, [r3, #0]
 800655e:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006562:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006566:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800656a:	2b00      	cmp	r3, #0
 800656c:	d005      	beq.n	800657a <USB_EPStartXfer+0x126a>
 800656e:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006576:	2b00      	cmp	r3, #0
 8006578:	d10d      	bne.n	8006596 <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800657a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800657e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006582:	2b00      	cmp	r3, #0
 8006584:	f040 8187 	bne.w	8006896 <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006588:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800658c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006590:	2b00      	cmp	r3, #0
 8006592:	f040 8180 	bne.w	8006896 <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8006596:	1d3b      	adds	r3, r7, #4
 8006598:	681a      	ldr	r2, [r3, #0]
 800659a:	463b      	mov	r3, r7
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	781b      	ldrb	r3, [r3, #0]
 80065a0:	009b      	lsls	r3, r3, #2
 80065a2:	4413      	add	r3, r2
 80065a4:	881b      	ldrh	r3, [r3, #0]
 80065a6:	b29b      	uxth	r3, r3
 80065a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065b0:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 80065b4:	1d3b      	adds	r3, r7, #4
 80065b6:	681a      	ldr	r2, [r3, #0]
 80065b8:	463b      	mov	r3, r7
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	781b      	ldrb	r3, [r3, #0]
 80065be:	009b      	lsls	r3, r3, #2
 80065c0:	441a      	add	r2, r3
 80065c2:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 80065c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065d2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80065d6:	b29b      	uxth	r3, r3
 80065d8:	8013      	strh	r3, [r2, #0]
 80065da:	e15c      	b.n	8006896 <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80065dc:	463b      	mov	r3, r7
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	78db      	ldrb	r3, [r3, #3]
 80065e2:	2b01      	cmp	r3, #1
 80065e4:	f040 8155 	bne.w	8006892 <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80065e8:	463b      	mov	r3, r7
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	699a      	ldr	r2, [r3, #24]
 80065ee:	463b      	mov	r3, r7
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	691b      	ldr	r3, [r3, #16]
 80065f4:	429a      	cmp	r2, r3
 80065f6:	d90e      	bls.n	8006616 <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 80065f8:	463b      	mov	r3, r7
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	691b      	ldr	r3, [r3, #16]
 80065fe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8006602:	463b      	mov	r3, r7
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	699a      	ldr	r2, [r3, #24]
 8006608:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800660c:	1ad2      	subs	r2, r2, r3
 800660e:	463b      	mov	r3, r7
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	619a      	str	r2, [r3, #24]
 8006614:	e008      	b.n	8006628 <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 8006616:	463b      	mov	r3, r7
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	699b      	ldr	r3, [r3, #24]
 800661c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8006620:	463b      	mov	r3, r7
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	2200      	movs	r2, #0
 8006626:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006628:	463b      	mov	r3, r7
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	785b      	ldrb	r3, [r3, #1]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d16f      	bne.n	8006712 <USB_EPStartXfer+0x1402>
 8006632:	1d3b      	adds	r3, r7, #4
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800663a:	1d3b      	adds	r3, r7, #4
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006642:	b29b      	uxth	r3, r3
 8006644:	461a      	mov	r2, r3
 8006646:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800664a:	4413      	add	r3, r2
 800664c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006650:	463b      	mov	r3, r7
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	781b      	ldrb	r3, [r3, #0]
 8006656:	011a      	lsls	r2, r3, #4
 8006658:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800665c:	4413      	add	r3, r2
 800665e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006662:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006666:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800666a:	2b00      	cmp	r3, #0
 800666c:	d116      	bne.n	800669c <USB_EPStartXfer+0x138c>
 800666e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006672:	881b      	ldrh	r3, [r3, #0]
 8006674:	b29b      	uxth	r3, r3
 8006676:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800667a:	b29a      	uxth	r2, r3
 800667c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006680:	801a      	strh	r2, [r3, #0]
 8006682:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006686:	881b      	ldrh	r3, [r3, #0]
 8006688:	b29b      	uxth	r3, r3
 800668a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800668e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006692:	b29a      	uxth	r2, r3
 8006694:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006698:	801a      	strh	r2, [r3, #0]
 800669a:	e05f      	b.n	800675c <USB_EPStartXfer+0x144c>
 800669c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066a0:	2b3e      	cmp	r3, #62	; 0x3e
 80066a2:	d818      	bhi.n	80066d6 <USB_EPStartXfer+0x13c6>
 80066a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066a8:	085b      	lsrs	r3, r3, #1
 80066aa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80066ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066b2:	f003 0301 	and.w	r3, r3, #1
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d004      	beq.n	80066c4 <USB_EPStartXfer+0x13b4>
 80066ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80066be:	3301      	adds	r3, #1
 80066c0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80066c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80066c8:	b29b      	uxth	r3, r3
 80066ca:	029b      	lsls	r3, r3, #10
 80066cc:	b29a      	uxth	r2, r3
 80066ce:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80066d2:	801a      	strh	r2, [r3, #0]
 80066d4:	e042      	b.n	800675c <USB_EPStartXfer+0x144c>
 80066d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066da:	095b      	lsrs	r3, r3, #5
 80066dc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80066e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066e4:	f003 031f 	and.w	r3, r3, #31
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d104      	bne.n	80066f6 <USB_EPStartXfer+0x13e6>
 80066ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80066f0:	3b01      	subs	r3, #1
 80066f2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80066f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80066fa:	b29b      	uxth	r3, r3
 80066fc:	029b      	lsls	r3, r3, #10
 80066fe:	b29b      	uxth	r3, r3
 8006700:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006704:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006708:	b29a      	uxth	r2, r3
 800670a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800670e:	801a      	strh	r2, [r3, #0]
 8006710:	e024      	b.n	800675c <USB_EPStartXfer+0x144c>
 8006712:	463b      	mov	r3, r7
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	785b      	ldrb	r3, [r3, #1]
 8006718:	2b01      	cmp	r3, #1
 800671a:	d11f      	bne.n	800675c <USB_EPStartXfer+0x144c>
 800671c:	1d3b      	adds	r3, r7, #4
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006724:	1d3b      	adds	r3, r7, #4
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800672c:	b29b      	uxth	r3, r3
 800672e:	461a      	mov	r2, r3
 8006730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006734:	4413      	add	r3, r2
 8006736:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800673a:	463b      	mov	r3, r7
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	781b      	ldrb	r3, [r3, #0]
 8006740:	011a      	lsls	r2, r3, #4
 8006742:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006746:	4413      	add	r3, r2
 8006748:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800674c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006750:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006754:	b29a      	uxth	r2, r3
 8006756:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800675a:	801a      	strh	r2, [r3, #0]
 800675c:	1d3b      	adds	r3, r7, #4
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006764:	463b      	mov	r3, r7
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	785b      	ldrb	r3, [r3, #1]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d16f      	bne.n	800684e <USB_EPStartXfer+0x153e>
 800676e:	1d3b      	adds	r3, r7, #4
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006776:	1d3b      	adds	r3, r7, #4
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800677e:	b29b      	uxth	r3, r3
 8006780:	461a      	mov	r2, r3
 8006782:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006786:	4413      	add	r3, r2
 8006788:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800678c:	463b      	mov	r3, r7
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	781b      	ldrb	r3, [r3, #0]
 8006792:	011a      	lsls	r2, r3, #4
 8006794:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006798:	4413      	add	r3, r2
 800679a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800679e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80067a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d116      	bne.n	80067d8 <USB_EPStartXfer+0x14c8>
 80067aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80067ae:	881b      	ldrh	r3, [r3, #0]
 80067b0:	b29b      	uxth	r3, r3
 80067b2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80067b6:	b29a      	uxth	r2, r3
 80067b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80067bc:	801a      	strh	r2, [r3, #0]
 80067be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80067c2:	881b      	ldrh	r3, [r3, #0]
 80067c4:	b29b      	uxth	r3, r3
 80067c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067ce:	b29a      	uxth	r2, r3
 80067d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80067d4:	801a      	strh	r2, [r3, #0]
 80067d6:	e05e      	b.n	8006896 <USB_EPStartXfer+0x1586>
 80067d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067dc:	2b3e      	cmp	r3, #62	; 0x3e
 80067de:	d818      	bhi.n	8006812 <USB_EPStartXfer+0x1502>
 80067e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067e4:	085b      	lsrs	r3, r3, #1
 80067e6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80067ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067ee:	f003 0301 	and.w	r3, r3, #1
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d004      	beq.n	8006800 <USB_EPStartXfer+0x14f0>
 80067f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80067fa:	3301      	adds	r3, #1
 80067fc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006800:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006804:	b29b      	uxth	r3, r3
 8006806:	029b      	lsls	r3, r3, #10
 8006808:	b29a      	uxth	r2, r3
 800680a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800680e:	801a      	strh	r2, [r3, #0]
 8006810:	e041      	b.n	8006896 <USB_EPStartXfer+0x1586>
 8006812:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006816:	095b      	lsrs	r3, r3, #5
 8006818:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800681c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006820:	f003 031f 	and.w	r3, r3, #31
 8006824:	2b00      	cmp	r3, #0
 8006826:	d104      	bne.n	8006832 <USB_EPStartXfer+0x1522>
 8006828:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800682c:	3b01      	subs	r3, #1
 800682e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006832:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006836:	b29b      	uxth	r3, r3
 8006838:	029b      	lsls	r3, r3, #10
 800683a:	b29b      	uxth	r3, r3
 800683c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006840:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006844:	b29a      	uxth	r2, r3
 8006846:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800684a:	801a      	strh	r2, [r3, #0]
 800684c:	e023      	b.n	8006896 <USB_EPStartXfer+0x1586>
 800684e:	463b      	mov	r3, r7
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	785b      	ldrb	r3, [r3, #1]
 8006854:	2b01      	cmp	r3, #1
 8006856:	d11e      	bne.n	8006896 <USB_EPStartXfer+0x1586>
 8006858:	1d3b      	adds	r3, r7, #4
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006860:	b29b      	uxth	r3, r3
 8006862:	461a      	mov	r2, r3
 8006864:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006868:	4413      	add	r3, r2
 800686a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800686e:	463b      	mov	r3, r7
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	781b      	ldrb	r3, [r3, #0]
 8006874:	011a      	lsls	r2, r3, #4
 8006876:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800687a:	4413      	add	r3, r2
 800687c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006880:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006884:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006888:	b29a      	uxth	r2, r3
 800688a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800688e:	801a      	strh	r2, [r3, #0]
 8006890:	e001      	b.n	8006896 <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 8006892:	2301      	movs	r3, #1
 8006894:	e02e      	b.n	80068f4 <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006896:	1d3b      	adds	r3, r7, #4
 8006898:	681a      	ldr	r2, [r3, #0]
 800689a:	463b      	mov	r3, r7
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	781b      	ldrb	r3, [r3, #0]
 80068a0:	009b      	lsls	r3, r3, #2
 80068a2:	4413      	add	r3, r2
 80068a4:	881b      	ldrh	r3, [r3, #0]
 80068a6:	b29b      	uxth	r3, r3
 80068a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80068ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068b0:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80068b4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80068b8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80068bc:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80068c0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80068c4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80068c8:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80068cc:	1d3b      	adds	r3, r7, #4
 80068ce:	681a      	ldr	r2, [r3, #0]
 80068d0:	463b      	mov	r3, r7
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	781b      	ldrb	r3, [r3, #0]
 80068d6:	009b      	lsls	r3, r3, #2
 80068d8:	441a      	add	r2, r3
 80068da:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80068de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068ee:	b29b      	uxth	r3, r3
 80068f0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80068f2:	2300      	movs	r3, #0
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bd80      	pop	{r7, pc}

080068fe <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80068fe:	b480      	push	{r7}
 8006900:	b085      	sub	sp, #20
 8006902:	af00      	add	r7, sp, #0
 8006904:	6078      	str	r0, [r7, #4]
 8006906:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	785b      	ldrb	r3, [r3, #1]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d020      	beq.n	8006952 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006910:	687a      	ldr	r2, [r7, #4]
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	781b      	ldrb	r3, [r3, #0]
 8006916:	009b      	lsls	r3, r3, #2
 8006918:	4413      	add	r3, r2
 800691a:	881b      	ldrh	r3, [r3, #0]
 800691c:	b29b      	uxth	r3, r3
 800691e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006922:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006926:	81bb      	strh	r3, [r7, #12]
 8006928:	89bb      	ldrh	r3, [r7, #12]
 800692a:	f083 0310 	eor.w	r3, r3, #16
 800692e:	81bb      	strh	r3, [r7, #12]
 8006930:	687a      	ldr	r2, [r7, #4]
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	781b      	ldrb	r3, [r3, #0]
 8006936:	009b      	lsls	r3, r3, #2
 8006938:	441a      	add	r2, r3
 800693a:	89bb      	ldrh	r3, [r7, #12]
 800693c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006940:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006944:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006948:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800694c:	b29b      	uxth	r3, r3
 800694e:	8013      	strh	r3, [r2, #0]
 8006950:	e01f      	b.n	8006992 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006952:	687a      	ldr	r2, [r7, #4]
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	781b      	ldrb	r3, [r3, #0]
 8006958:	009b      	lsls	r3, r3, #2
 800695a:	4413      	add	r3, r2
 800695c:	881b      	ldrh	r3, [r3, #0]
 800695e:	b29b      	uxth	r3, r3
 8006960:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006964:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006968:	81fb      	strh	r3, [r7, #14]
 800696a:	89fb      	ldrh	r3, [r7, #14]
 800696c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006970:	81fb      	strh	r3, [r7, #14]
 8006972:	687a      	ldr	r2, [r7, #4]
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	781b      	ldrb	r3, [r3, #0]
 8006978:	009b      	lsls	r3, r3, #2
 800697a:	441a      	add	r2, r3
 800697c:	89fb      	ldrh	r3, [r7, #14]
 800697e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006982:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006986:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800698a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800698e:	b29b      	uxth	r3, r3
 8006990:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006992:	2300      	movs	r3, #0
}
 8006994:	4618      	mov	r0, r3
 8006996:	3714      	adds	r7, #20
 8006998:	46bd      	mov	sp, r7
 800699a:	bc80      	pop	{r7}
 800699c:	4770      	bx	lr

0800699e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800699e:	b480      	push	{r7}
 80069a0:	b087      	sub	sp, #28
 80069a2:	af00      	add	r7, sp, #0
 80069a4:	6078      	str	r0, [r7, #4]
 80069a6:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	7b1b      	ldrb	r3, [r3, #12]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	f040 809d 	bne.w	8006aec <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	785b      	ldrb	r3, [r3, #1]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d04c      	beq.n	8006a54 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80069ba:	687a      	ldr	r2, [r7, #4]
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	781b      	ldrb	r3, [r3, #0]
 80069c0:	009b      	lsls	r3, r3, #2
 80069c2:	4413      	add	r3, r2
 80069c4:	881b      	ldrh	r3, [r3, #0]
 80069c6:	823b      	strh	r3, [r7, #16]
 80069c8:	8a3b      	ldrh	r3, [r7, #16]
 80069ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d01b      	beq.n	8006a0a <USB_EPClearStall+0x6c>
 80069d2:	687a      	ldr	r2, [r7, #4]
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	781b      	ldrb	r3, [r3, #0]
 80069d8:	009b      	lsls	r3, r3, #2
 80069da:	4413      	add	r3, r2
 80069dc:	881b      	ldrh	r3, [r3, #0]
 80069de:	b29b      	uxth	r3, r3
 80069e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069e8:	81fb      	strh	r3, [r7, #14]
 80069ea:	687a      	ldr	r2, [r7, #4]
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	781b      	ldrb	r3, [r3, #0]
 80069f0:	009b      	lsls	r3, r3, #2
 80069f2:	441a      	add	r2, r3
 80069f4:	89fb      	ldrh	r3, [r7, #14]
 80069f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a02:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006a06:	b29b      	uxth	r3, r3
 8006a08:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	78db      	ldrb	r3, [r3, #3]
 8006a0e:	2b01      	cmp	r3, #1
 8006a10:	d06c      	beq.n	8006aec <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006a12:	687a      	ldr	r2, [r7, #4]
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	781b      	ldrb	r3, [r3, #0]
 8006a18:	009b      	lsls	r3, r3, #2
 8006a1a:	4413      	add	r3, r2
 8006a1c:	881b      	ldrh	r3, [r3, #0]
 8006a1e:	b29b      	uxth	r3, r3
 8006a20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a28:	81bb      	strh	r3, [r7, #12]
 8006a2a:	89bb      	ldrh	r3, [r7, #12]
 8006a2c:	f083 0320 	eor.w	r3, r3, #32
 8006a30:	81bb      	strh	r3, [r7, #12]
 8006a32:	687a      	ldr	r2, [r7, #4]
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	781b      	ldrb	r3, [r3, #0]
 8006a38:	009b      	lsls	r3, r3, #2
 8006a3a:	441a      	add	r2, r3
 8006a3c:	89bb      	ldrh	r3, [r7, #12]
 8006a3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a4e:	b29b      	uxth	r3, r3
 8006a50:	8013      	strh	r3, [r2, #0]
 8006a52:	e04b      	b.n	8006aec <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006a54:	687a      	ldr	r2, [r7, #4]
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	781b      	ldrb	r3, [r3, #0]
 8006a5a:	009b      	lsls	r3, r3, #2
 8006a5c:	4413      	add	r3, r2
 8006a5e:	881b      	ldrh	r3, [r3, #0]
 8006a60:	82fb      	strh	r3, [r7, #22]
 8006a62:	8afb      	ldrh	r3, [r7, #22]
 8006a64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d01b      	beq.n	8006aa4 <USB_EPClearStall+0x106>
 8006a6c:	687a      	ldr	r2, [r7, #4]
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	781b      	ldrb	r3, [r3, #0]
 8006a72:	009b      	lsls	r3, r3, #2
 8006a74:	4413      	add	r3, r2
 8006a76:	881b      	ldrh	r3, [r3, #0]
 8006a78:	b29b      	uxth	r3, r3
 8006a7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a82:	82bb      	strh	r3, [r7, #20]
 8006a84:	687a      	ldr	r2, [r7, #4]
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	781b      	ldrb	r3, [r3, #0]
 8006a8a:	009b      	lsls	r3, r3, #2
 8006a8c:	441a      	add	r2, r3
 8006a8e:	8abb      	ldrh	r3, [r7, #20]
 8006a90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a98:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006a9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006aa0:	b29b      	uxth	r3, r3
 8006aa2:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006aa4:	687a      	ldr	r2, [r7, #4]
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	781b      	ldrb	r3, [r3, #0]
 8006aaa:	009b      	lsls	r3, r3, #2
 8006aac:	4413      	add	r3, r2
 8006aae:	881b      	ldrh	r3, [r3, #0]
 8006ab0:	b29b      	uxth	r3, r3
 8006ab2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ab6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006aba:	827b      	strh	r3, [r7, #18]
 8006abc:	8a7b      	ldrh	r3, [r7, #18]
 8006abe:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006ac2:	827b      	strh	r3, [r7, #18]
 8006ac4:	8a7b      	ldrh	r3, [r7, #18]
 8006ac6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006aca:	827b      	strh	r3, [r7, #18]
 8006acc:	687a      	ldr	r2, [r7, #4]
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	781b      	ldrb	r3, [r3, #0]
 8006ad2:	009b      	lsls	r3, r3, #2
 8006ad4:	441a      	add	r2, r3
 8006ad6:	8a7b      	ldrh	r3, [r7, #18]
 8006ad8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006adc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ae0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ae4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ae8:	b29b      	uxth	r3, r3
 8006aea:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006aec:	2300      	movs	r3, #0
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	371c      	adds	r7, #28
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bc80      	pop	{r7}
 8006af6:	4770      	bx	lr

08006af8 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006af8:	b480      	push	{r7}
 8006afa:	b083      	sub	sp, #12
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
 8006b00:	460b      	mov	r3, r1
 8006b02:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006b04:	78fb      	ldrb	r3, [r7, #3]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d103      	bne.n	8006b12 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2280      	movs	r2, #128	; 0x80
 8006b0e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006b12:	2300      	movs	r3, #0
}
 8006b14:	4618      	mov	r0, r3
 8006b16:	370c      	adds	r7, #12
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	bc80      	pop	{r7}
 8006b1c:	4770      	bx	lr

08006b1e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006b1e:	b480      	push	{r7}
 8006b20:	b083      	sub	sp, #12
 8006b22:	af00      	add	r7, sp, #0
 8006b24:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006b26:	2300      	movs	r3, #0
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	370c      	adds	r7, #12
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bc80      	pop	{r7}
 8006b30:	4770      	bx	lr

08006b32 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006b32:	b480      	push	{r7}
 8006b34:	b083      	sub	sp, #12
 8006b36:	af00      	add	r7, sp, #0
 8006b38:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006b3a:	2300      	movs	r3, #0
}
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	370c      	adds	r7, #12
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bc80      	pop	{r7}
 8006b44:	4770      	bx	lr

08006b46 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8006b46:	b480      	push	{r7}
 8006b48:	b085      	sub	sp, #20
 8006b4a:	af00      	add	r7, sp, #0
 8006b4c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006b54:	b29b      	uxth	r3, r3
 8006b56:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006b58:	68fb      	ldr	r3, [r7, #12]
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	3714      	adds	r7, #20
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bc80      	pop	{r7}
 8006b62:	4770      	bx	lr

08006b64 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006b64:	b480      	push	{r7}
 8006b66:	b083      	sub	sp, #12
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
 8006b6c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006b6e:	2300      	movs	r3, #0
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	370c      	adds	r7, #12
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bc80      	pop	{r7}
 8006b78:	4770      	bx	lr

08006b7a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006b7a:	b480      	push	{r7}
 8006b7c:	b08d      	sub	sp, #52	; 0x34
 8006b7e:	af00      	add	r7, sp, #0
 8006b80:	60f8      	str	r0, [r7, #12]
 8006b82:	60b9      	str	r1, [r7, #8]
 8006b84:	4611      	mov	r1, r2
 8006b86:	461a      	mov	r2, r3
 8006b88:	460b      	mov	r3, r1
 8006b8a:	80fb      	strh	r3, [r7, #6]
 8006b8c:	4613      	mov	r3, r2
 8006b8e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006b90:	88bb      	ldrh	r3, [r7, #4]
 8006b92:	3301      	adds	r3, #1
 8006b94:	085b      	lsrs	r3, r3, #1
 8006b96:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006ba0:	88fb      	ldrh	r3, [r7, #6]
 8006ba2:	005a      	lsls	r2, r3, #1
 8006ba4:	69fb      	ldr	r3, [r7, #28]
 8006ba6:	4413      	add	r3, r2
 8006ba8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006bac:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8006bae:	6a3b      	ldr	r3, [r7, #32]
 8006bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006bb2:	e01e      	b.n	8006bf2 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8006bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb6:	781b      	ldrb	r3, [r3, #0]
 8006bb8:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8006bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bbc:	3301      	adds	r3, #1
 8006bbe:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc2:	781b      	ldrb	r3, [r3, #0]
 8006bc4:	b29b      	uxth	r3, r3
 8006bc6:	021b      	lsls	r3, r3, #8
 8006bc8:	b29b      	uxth	r3, r3
 8006bca:	461a      	mov	r2, r3
 8006bcc:	69bb      	ldr	r3, [r7, #24]
 8006bce:	4313      	orrs	r3, r2
 8006bd0:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006bd2:	697b      	ldr	r3, [r7, #20]
 8006bd4:	b29a      	uxth	r2, r3
 8006bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bd8:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bdc:	3302      	adds	r3, #2
 8006bde:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8006be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006be2:	3302      	adds	r3, #2
 8006be4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8006be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be8:	3301      	adds	r3, #1
 8006bea:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8006bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bee:	3b01      	subs	r3, #1
 8006bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d1dd      	bne.n	8006bb4 <USB_WritePMA+0x3a>
  }
}
 8006bf8:	bf00      	nop
 8006bfa:	bf00      	nop
 8006bfc:	3734      	adds	r7, #52	; 0x34
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bc80      	pop	{r7}
 8006c02:	4770      	bx	lr

08006c04 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006c04:	b480      	push	{r7}
 8006c06:	b08b      	sub	sp, #44	; 0x2c
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	60f8      	str	r0, [r7, #12]
 8006c0c:	60b9      	str	r1, [r7, #8]
 8006c0e:	4611      	mov	r1, r2
 8006c10:	461a      	mov	r2, r3
 8006c12:	460b      	mov	r3, r1
 8006c14:	80fb      	strh	r3, [r7, #6]
 8006c16:	4613      	mov	r3, r2
 8006c18:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006c1a:	88bb      	ldrh	r3, [r7, #4]
 8006c1c:	085b      	lsrs	r3, r3, #1
 8006c1e:	b29b      	uxth	r3, r3
 8006c20:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006c2a:	88fb      	ldrh	r3, [r7, #6]
 8006c2c:	005a      	lsls	r2, r3, #1
 8006c2e:	697b      	ldr	r3, [r7, #20]
 8006c30:	4413      	add	r3, r2
 8006c32:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c36:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006c38:	69bb      	ldr	r3, [r7, #24]
 8006c3a:	627b      	str	r3, [r7, #36]	; 0x24
 8006c3c:	e01b      	b.n	8006c76 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006c3e:	6a3b      	ldr	r3, [r7, #32]
 8006c40:	881b      	ldrh	r3, [r3, #0]
 8006c42:	b29b      	uxth	r3, r3
 8006c44:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006c46:	6a3b      	ldr	r3, [r7, #32]
 8006c48:	3302      	adds	r3, #2
 8006c4a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	b2da      	uxtb	r2, r3
 8006c50:	69fb      	ldr	r3, [r7, #28]
 8006c52:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006c54:	69fb      	ldr	r3, [r7, #28]
 8006c56:	3301      	adds	r3, #1
 8006c58:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006c5a:	693b      	ldr	r3, [r7, #16]
 8006c5c:	0a1b      	lsrs	r3, r3, #8
 8006c5e:	b2da      	uxtb	r2, r3
 8006c60:	69fb      	ldr	r3, [r7, #28]
 8006c62:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006c64:	69fb      	ldr	r3, [r7, #28]
 8006c66:	3301      	adds	r3, #1
 8006c68:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006c6a:	6a3b      	ldr	r3, [r7, #32]
 8006c6c:	3302      	adds	r3, #2
 8006c6e:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8006c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c72:	3b01      	subs	r3, #1
 8006c74:	627b      	str	r3, [r7, #36]	; 0x24
 8006c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d1e0      	bne.n	8006c3e <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8006c7c:	88bb      	ldrh	r3, [r7, #4]
 8006c7e:	f003 0301 	and.w	r3, r3, #1
 8006c82:	b29b      	uxth	r3, r3
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d007      	beq.n	8006c98 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8006c88:	6a3b      	ldr	r3, [r7, #32]
 8006c8a:	881b      	ldrh	r3, [r3, #0]
 8006c8c:	b29b      	uxth	r3, r3
 8006c8e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006c90:	693b      	ldr	r3, [r7, #16]
 8006c92:	b2da      	uxtb	r2, r3
 8006c94:	69fb      	ldr	r3, [r7, #28]
 8006c96:	701a      	strb	r2, [r3, #0]
  }
}
 8006c98:	bf00      	nop
 8006c9a:	372c      	adds	r7, #44	; 0x2c
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bc80      	pop	{r7}
 8006ca0:	4770      	bx	lr
	...

08006ca4 <USBD_CUSTOM_HID_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev,
                                     uint8_t cfgidx)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b084      	sub	sp, #16
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
 8006cac:	460b      	mov	r3, r1
 8006cae:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	73fb      	strb	r3, [r7, #15]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid;

  /* Open EP IN */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_BULK,
 8006cb4:	2340      	movs	r3, #64	; 0x40
 8006cb6:	2202      	movs	r2, #2
 8006cb8:	2181      	movs	r1, #129	; 0x81
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f001 fd1d 	bl	80086fa <USBD_LL_OpenEP>
                 CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2201      	movs	r2, #1
 8006cc4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Open EP OUT */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_BULK,
 8006cc6:	2340      	movs	r3, #64	; 0x40
 8006cc8:	2202      	movs	r2, #2
 8006cca:	2101      	movs	r1, #1
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	f001 fd14 	bl	80086fa <USBD_LL_OpenEP>
                 CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2201      	movs	r2, #1
 8006cd6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  pdev->pClassData = USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 8006cda:	2054      	movs	r0, #84	; 0x54
 8006cdc:	f001 fe22 	bl	8008924 <USBD_static_malloc>
 8006ce0:	4602      	mov	r2, r0
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d102      	bne.n	8006cf8 <USBD_CUSTOM_HID_Init+0x54>
  {
    ret = 1U;
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	73fb      	strb	r3, [r7, #15]
 8006cf6:	e012      	b.n	8006d1e <USBD_CUSTOM_HID_Init+0x7a>
  }
  else
  {
    hhid = (USBD_CUSTOM_HID_HandleTypeDef *) pdev->pClassData;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cfe:	60bb      	str	r3, [r7, #8]

    hhid->state = CUSTOM_HID_IDLE;
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	2200      	movs	r2, #0
 8006d04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d0e:	685b      	ldr	r3, [r3, #4]
 8006d10:	4798      	blx	r3

    /* Prepare Out endpoint to receive 1st packet */
    USBD_LL_PrepareReceive(pdev, 0x1, usb_rx_buffer,0x40);
 8006d12:	2340      	movs	r3, #64	; 0x40
 8006d14:	4a04      	ldr	r2, [pc, #16]	; (8006d28 <USBD_CUSTOM_HID_Init+0x84>)
 8006d16:	2101      	movs	r1, #1
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f001 fddf 	bl	80088dc <USBD_LL_PrepareReceive>
  }

  return ret;
 8006d1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d20:	4618      	mov	r0, r3
 8006d22:	3710      	adds	r7, #16
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}
 8006d28:	2000018c 	.word	0x2000018c

08006d2c <USBD_CUSTOM_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev,
                                       uint8_t cfgidx)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b082      	sub	sp, #8
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
 8006d34:	460b      	mov	r3, r1
 8006d36:	70fb      	strb	r3, [r7, #3]
  /* Close CUSTOM_HID EP IN */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 8006d38:	2181      	movs	r1, #129	; 0x81
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f001 fd03 	bl	8008746 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2200      	movs	r2, #0
 8006d44:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close CUSTOM_HID EP OUT */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 8006d46:	2101      	movs	r1, #1
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f001 fcfc 	bl	8008746 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2200      	movs	r2, #0
 8006d52:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d00e      	beq.n	8006d7e <USBD_CUSTOM_HID_DeInit+0x52>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d66:	689b      	ldr	r3, [r3, #8]
 8006d68:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d70:	4618      	mov	r0, r3
 8006d72:	f001 fde3 	bl	800893c <USBD_static_free>
    pdev->pClassData = NULL;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }
  return USBD_OK;
 8006d7e:	2300      	movs	r3, #0
}
 8006d80:	4618      	mov	r0, r3
 8006d82:	3708      	adds	r7, #8
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}

08006d88 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                      USBD_SetupReqTypedef *req)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b088      	sub	sp, #32
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
 8006d90:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d98:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 8006d9e:	2300      	movs	r3, #0
 8006da0:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8006da2:	2300      	movs	r3, #0
 8006da4:	81fb      	strh	r3, [r7, #14]
  uint8_t ret = USBD_OK;
 8006da6:	2300      	movs	r3, #0
 8006da8:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	781b      	ldrb	r3, [r3, #0]
 8006dae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d051      	beq.n	8006e5a <USBD_CUSTOM_HID_Setup+0xd2>
 8006db6:	2b20      	cmp	r3, #32
 8006db8:	f040 80c9 	bne.w	8006f4e <USBD_CUSTOM_HID_Setup+0x1c6>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	785b      	ldrb	r3, [r3, #1]
 8006dc0:	3b02      	subs	r3, #2
 8006dc2:	2b09      	cmp	r3, #9
 8006dc4:	d841      	bhi.n	8006e4a <USBD_CUSTOM_HID_Setup+0xc2>
 8006dc6:	a201      	add	r2, pc, #4	; (adr r2, 8006dcc <USBD_CUSTOM_HID_Setup+0x44>)
 8006dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dcc:	08006e25 	.word	0x08006e25
 8006dd0:	08006e03 	.word	0x08006e03
 8006dd4:	08006e4b 	.word	0x08006e4b
 8006dd8:	08006e4b 	.word	0x08006e4b
 8006ddc:	08006e4b 	.word	0x08006e4b
 8006de0:	08006e4b 	.word	0x08006e4b
 8006de4:	08006e4b 	.word	0x08006e4b
 8006de8:	08006e35 	.word	0x08006e35
 8006dec:	08006e13 	.word	0x08006e13
 8006df0:	08006df5 	.word	0x08006df5
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	885b      	ldrh	r3, [r3, #2]
 8006df8:	b2db      	uxtb	r3, r3
 8006dfa:	461a      	mov	r2, r3
 8006dfc:	693b      	ldr	r3, [r7, #16]
 8006dfe:	641a      	str	r2, [r3, #64]	; 0x40
          break;
 8006e00:	e02a      	b.n	8006e58 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8006e02:	693b      	ldr	r3, [r7, #16]
 8006e04:	3340      	adds	r3, #64	; 0x40
 8006e06:	2201      	movs	r2, #1
 8006e08:	4619      	mov	r1, r3
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f001 f961 	bl	80080d2 <USBD_CtlSendData>
          break;
 8006e10:	e022      	b.n	8006e58 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	885b      	ldrh	r3, [r3, #2]
 8006e16:	0a1b      	lsrs	r3, r3, #8
 8006e18:	b29b      	uxth	r3, r3
 8006e1a:	b2db      	uxtb	r3, r3
 8006e1c:	461a      	mov	r2, r3
 8006e1e:	693b      	ldr	r3, [r7, #16]
 8006e20:	645a      	str	r2, [r3, #68]	; 0x44
          break;
 8006e22:	e019      	b.n	8006e58 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8006e24:	693b      	ldr	r3, [r7, #16]
 8006e26:	3344      	adds	r3, #68	; 0x44
 8006e28:	2201      	movs	r2, #1
 8006e2a:	4619      	mov	r1, r3
 8006e2c:	6878      	ldr	r0, [r7, #4]
 8006e2e:	f001 f950 	bl	80080d2 <USBD_CtlSendData>
          break;
 8006e32:	e011      	b.n	8006e58 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 8006e34:	693b      	ldr	r3, [r7, #16]
 8006e36:	2201      	movs	r2, #1
 8006e38:	64da      	str	r2, [r3, #76]	; 0x4c
          USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 8006e3a:	6939      	ldr	r1, [r7, #16]
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	88db      	ldrh	r3, [r3, #6]
 8006e40:	461a      	mov	r2, r3
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f001 f973 	bl	800812e <USBD_CtlPrepareRx>
          break;
 8006e48:	e006      	b.n	8006e58 <USBD_CUSTOM_HID_Setup+0xd0>

        default:
          USBD_CtlError(pdev, req);
 8006e4a:	6839      	ldr	r1, [r7, #0]
 8006e4c:	6878      	ldr	r0, [r7, #4]
 8006e4e:	f001 f8d6 	bl	8007ffe <USBD_CtlError>
          ret = USBD_FAIL;
 8006e52:	2302      	movs	r3, #2
 8006e54:	75fb      	strb	r3, [r7, #23]
          break;
 8006e56:	bf00      	nop
      }
      break;
 8006e58:	e080      	b.n	8006f5c <USBD_CUSTOM_HID_Setup+0x1d4>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	785b      	ldrb	r3, [r3, #1]
 8006e5e:	2b0b      	cmp	r3, #11
 8006e60:	d86d      	bhi.n	8006f3e <USBD_CUSTOM_HID_Setup+0x1b6>
 8006e62:	a201      	add	r2, pc, #4	; (adr r2, 8006e68 <USBD_CUSTOM_HID_Setup+0xe0>)
 8006e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e68:	08006e99 	.word	0x08006e99
 8006e6c:	08006f3f 	.word	0x08006f3f
 8006e70:	08006f3f 	.word	0x08006f3f
 8006e74:	08006f3f 	.word	0x08006f3f
 8006e78:	08006f3f 	.word	0x08006f3f
 8006e7c:	08006f3f 	.word	0x08006f3f
 8006e80:	08006ec1 	.word	0x08006ec1
 8006e84:	08006f3f 	.word	0x08006f3f
 8006e88:	08006f3f 	.word	0x08006f3f
 8006e8c:	08006f3f 	.word	0x08006f3f
 8006e90:	08006ef1 	.word	0x08006ef1
 8006e94:	08006f19 	.word	0x08006f19
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e9e:	2b03      	cmp	r3, #3
 8006ea0:	d107      	bne.n	8006eb2 <USBD_CUSTOM_HID_Setup+0x12a>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006ea2:	f107 030e 	add.w	r3, r7, #14
 8006ea6:	2202      	movs	r2, #2
 8006ea8:	4619      	mov	r1, r3
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f001 f911 	bl	80080d2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006eb0:	e04c      	b.n	8006f4c <USBD_CUSTOM_HID_Setup+0x1c4>
            USBD_CtlError(pdev, req);
 8006eb2:	6839      	ldr	r1, [r7, #0]
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	f001 f8a2 	bl	8007ffe <USBD_CtlError>
            ret = USBD_FAIL;
 8006eba:	2302      	movs	r3, #2
 8006ebc:	75fb      	strb	r3, [r7, #23]
          break;
 8006ebe:	e045      	b.n	8006f4c <USBD_CUSTOM_HID_Setup+0x1c4>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == CUSTOM_HID_REPORT_DESC)
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	885b      	ldrh	r3, [r3, #2]
 8006ec4:	0a1b      	lsrs	r3, r3, #8
 8006ec6:	b29b      	uxth	r3, r3
 8006ec8:	2b22      	cmp	r3, #34	; 0x22
 8006eca:	d10a      	bne.n	8006ee2 <USBD_CUSTOM_HID_Setup+0x15a>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	88db      	ldrh	r3, [r3, #6]
 8006ed0:	2b40      	cmp	r3, #64	; 0x40
 8006ed2:	bf28      	it	cs
 8006ed4:	2340      	movcs	r3, #64	; 0x40
 8006ed6:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	61bb      	str	r3, [r7, #24]
            {

            }
          }

          USBD_CtlSendData(pdev, pbuf, len);
 8006ee2:	8bfb      	ldrh	r3, [r7, #30]
 8006ee4:	461a      	mov	r2, r3
 8006ee6:	69b9      	ldr	r1, [r7, #24]
 8006ee8:	6878      	ldr	r0, [r7, #4]
 8006eea:	f001 f8f2 	bl	80080d2 <USBD_CtlSendData>
          break;
 8006eee:	e02d      	b.n	8006f4c <USBD_CUSTOM_HID_Setup+0x1c4>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ef6:	2b03      	cmp	r3, #3
 8006ef8:	d107      	bne.n	8006f0a <USBD_CUSTOM_HID_Setup+0x182>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8006efa:	693b      	ldr	r3, [r7, #16]
 8006efc:	3348      	adds	r3, #72	; 0x48
 8006efe:	2201      	movs	r2, #1
 8006f00:	4619      	mov	r1, r3
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f001 f8e5 	bl	80080d2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006f08:	e020      	b.n	8006f4c <USBD_CUSTOM_HID_Setup+0x1c4>
            USBD_CtlError(pdev, req);
 8006f0a:	6839      	ldr	r1, [r7, #0]
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	f001 f876 	bl	8007ffe <USBD_CtlError>
            ret = USBD_FAIL;
 8006f12:	2302      	movs	r3, #2
 8006f14:	75fb      	strb	r3, [r7, #23]
          break;
 8006f16:	e019      	b.n	8006f4c <USBD_CUSTOM_HID_Setup+0x1c4>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f1e:	2b03      	cmp	r3, #3
 8006f20:	d106      	bne.n	8006f30 <USBD_CUSTOM_HID_Setup+0x1a8>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	885b      	ldrh	r3, [r3, #2]
 8006f26:	b2db      	uxtb	r3, r3
 8006f28:	461a      	mov	r2, r3
 8006f2a:	693b      	ldr	r3, [r7, #16]
 8006f2c:	649a      	str	r2, [r3, #72]	; 0x48
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006f2e:	e00d      	b.n	8006f4c <USBD_CUSTOM_HID_Setup+0x1c4>
            USBD_CtlError(pdev, req);
 8006f30:	6839      	ldr	r1, [r7, #0]
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f001 f863 	bl	8007ffe <USBD_CtlError>
            ret = USBD_FAIL;
 8006f38:	2302      	movs	r3, #2
 8006f3a:	75fb      	strb	r3, [r7, #23]
          break;
 8006f3c:	e006      	b.n	8006f4c <USBD_CUSTOM_HID_Setup+0x1c4>

        default:
          USBD_CtlError(pdev, req);
 8006f3e:	6839      	ldr	r1, [r7, #0]
 8006f40:	6878      	ldr	r0, [r7, #4]
 8006f42:	f001 f85c 	bl	8007ffe <USBD_CtlError>
          ret = USBD_FAIL;
 8006f46:	2302      	movs	r3, #2
 8006f48:	75fb      	strb	r3, [r7, #23]
          break;
 8006f4a:	bf00      	nop
      }
      break;
 8006f4c:	e006      	b.n	8006f5c <USBD_CUSTOM_HID_Setup+0x1d4>

    default:
      USBD_CtlError(pdev, req);
 8006f4e:	6839      	ldr	r1, [r7, #0]
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	f001 f854 	bl	8007ffe <USBD_CtlError>
      ret = USBD_FAIL;
 8006f56:	2302      	movs	r3, #2
 8006f58:	75fb      	strb	r3, [r7, #23]
      break;
 8006f5a:	bf00      	nop
  }
  return ret;
 8006f5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f5e:	4618      	mov	r0, r3
 8006f60:	3720      	adds	r7, #32
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}
 8006f66:	bf00      	nop

08006f68 <USBD_CUSTOM_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef  *pdev,
                                   uint8_t *report,
                                   uint16_t len)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b086      	sub	sp, #24
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	60f8      	str	r0, [r7, #12]
 8006f70:	60b9      	str	r1, [r7, #8]
 8006f72:	4613      	mov	r3, r2
 8006f74:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f7c:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f84:	2b03      	cmp	r3, #3
 8006f86:	d111      	bne.n	8006fac <USBD_CUSTOM_HID_SendReport+0x44>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 8006f88:	697b      	ldr	r3, [r7, #20]
 8006f8a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d10a      	bne.n	8006fa8 <USBD_CUSTOM_HID_SendReport+0x40>
    {
      hhid->state = CUSTOM_HID_BUSY;
 8006f92:	697b      	ldr	r3, [r7, #20]
 8006f94:	2201      	movs	r2, #1
 8006f96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBD_LL_Transmit(pdev, 0x81, report, len);
 8006f9a:	88fb      	ldrh	r3, [r7, #6]
 8006f9c:	68ba      	ldr	r2, [r7, #8]
 8006f9e:	2181      	movs	r1, #129	; 0x81
 8006fa0:	68f8      	ldr	r0, [r7, #12]
 8006fa2:	f001 fc78 	bl	8008896 <USBD_LL_Transmit>
 8006fa6:	e001      	b.n	8006fac <USBD_CUSTOM_HID_SendReport+0x44>
    }
    else
    {
      return USBD_BUSY;
 8006fa8:	2301      	movs	r3, #1
 8006faa:	e000      	b.n	8006fae <USBD_CUSTOM_HID_SendReport+0x46>
    }
  }
  return USBD_OK;
 8006fac:	2300      	movs	r3, #0
}
 8006fae:	4618      	mov	r0, r3
 8006fb0:	3718      	adds	r7, #24
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}
	...

08006fb8 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b083      	sub	sp, #12
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2220      	movs	r2, #32
 8006fc4:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgFSDesc;
 8006fc6:	4b03      	ldr	r3, [pc, #12]	; (8006fd4 <USBD_CUSTOM_HID_GetFSCfgDesc+0x1c>)
}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	370c      	adds	r7, #12
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	bc80      	pop	{r7}
 8006fd0:	4770      	bx	lr
 8006fd2:	bf00      	nop
 8006fd4:	20000044 	.word	0x20000044

08006fd8 <USBD_CUSTOM_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum)
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b083      	sub	sp, #12
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
 8006fe0:	460b      	mov	r3, r1
 8006fe2:	70fb      	strb	r3, [r7, #3]
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fea:	2200      	movs	r2, #0
 8006fec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return USBD_OK;
 8006ff0:	2300      	movs	r3, #0
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	370c      	adds	r7, #12
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bc80      	pop	{r7}
 8006ffa:	4770      	bx	lr

08006ffc <USBD_CUSTOM_HID_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b082      	sub	sp, #8
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
 8007004:	460b      	mov	r3, r1
 8007006:	70fb      	strb	r3, [r7, #3]

	usb_rx_ready = 1;
 8007008:	4b06      	ldr	r3, [pc, #24]	; (8007024 <USBD_CUSTOM_HID_DataOut+0x28>)
 800700a:	2201      	movs	r2, #1
 800700c:	701a      	strb	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0x1, usb_rx_buffer,0x40);
 800700e:	2340      	movs	r3, #64	; 0x40
 8007010:	4a05      	ldr	r2, [pc, #20]	; (8007028 <USBD_CUSTOM_HID_DataOut+0x2c>)
 8007012:	2101      	movs	r1, #1
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	f001 fc61 	bl	80088dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800701a:	2300      	movs	r3, #0
}
 800701c:	4618      	mov	r0, r3
 800701e:	3708      	adds	r7, #8
 8007020:	46bd      	mov	sp, r7
 8007022:	bd80      	pop	{r7, pc}
 8007024:	20000214 	.word	0x20000214
 8007028:	2000018c 	.word	0x2000018c

0800702c <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800702c:	b480      	push	{r7}
 800702e:	b085      	sub	sp, #20
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800703a:	60fb      	str	r3, [r7, #12]

  if (hhid->IsReportAvailable == 1U)
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007040:	2b01      	cmp	r3, #1
 8007042:	d102      	bne.n	800704a <USBD_CUSTOM_HID_EP0_RxReady+0x1e>
  {
	  usb_rx_ready = 1;
 8007044:	4b04      	ldr	r3, [pc, #16]	; (8007058 <USBD_CUSTOM_HID_EP0_RxReady+0x2c>)
 8007046:	2201      	movs	r2, #1
 8007048:	701a      	strb	r2, [r3, #0]
  }

  return USBD_OK;
 800704a:	2300      	movs	r3, #0
}
 800704c:	4618      	mov	r0, r3
 800704e:	3714      	adds	r7, #20
 8007050:	46bd      	mov	sp, r7
 8007052:	bc80      	pop	{r7}
 8007054:	4770      	bx	lr
 8007056:	bf00      	nop
 8007058:	20000214 	.word	0x20000214

0800705c <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800705c:	b480      	push	{r7}
 800705e:	b083      	sub	sp, #12
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	220a      	movs	r2, #10
 8007068:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 800706a:	4b03      	ldr	r3, [pc, #12]	; (8007078 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 800706c:	4618      	mov	r0, r3
 800706e:	370c      	adds	r7, #12
 8007070:	46bd      	mov	sp, r7
 8007072:	bc80      	pop	{r7}
 8007074:	4770      	bx	lr
 8007076:	bf00      	nop
 8007078:	20000064 	.word	0x20000064

0800707c <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t  USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                           USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 800707c:	b480      	push	{r7}
 800707e:	b085      	sub	sp, #20
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
 8007084:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007086:	2302      	movs	r3, #2
 8007088:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d005      	beq.n	800709c <USBD_CUSTOM_HID_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	683a      	ldr	r2, [r7, #0]
 8007094:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8007098:	2300      	movs	r3, #0
 800709a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800709c:	7bfb      	ldrb	r3, [r7, #15]
}
 800709e:	4618      	mov	r0, r3
 80070a0:	3714      	adds	r7, #20
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bc80      	pop	{r7}
 80070a6:	4770      	bx	lr

080070a8 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b084      	sub	sp, #16
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	60f8      	str	r0, [r7, #12]
 80070b0:	60b9      	str	r1, [r7, #8]
 80070b2:	4613      	mov	r3, r2
 80070b4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d101      	bne.n	80070c0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80070bc:	2302      	movs	r3, #2
 80070be:	e01a      	b.n	80070f6 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d003      	beq.n	80070d2 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	2200      	movs	r2, #0
 80070ce:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d003      	beq.n	80070e0 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	68ba      	ldr	r2, [r7, #8]
 80070dc:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	2201      	movs	r2, #1
 80070e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	79fa      	ldrb	r2, [r7, #7]
 80070ec:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80070ee:	68f8      	ldr	r0, [r7, #12]
 80070f0:	f001 fa98 	bl	8008624 <USBD_LL_Init>

  return USBD_OK;
 80070f4:	2300      	movs	r3, #0
}
 80070f6:	4618      	mov	r0, r3
 80070f8:	3710      	adds	r7, #16
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd80      	pop	{r7, pc}

080070fe <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80070fe:	b480      	push	{r7}
 8007100:	b085      	sub	sp, #20
 8007102:	af00      	add	r7, sp, #0
 8007104:	6078      	str	r0, [r7, #4]
 8007106:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007108:	2300      	movs	r3, #0
 800710a:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d006      	beq.n	8007120 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	683a      	ldr	r2, [r7, #0]
 8007116:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800711a:	2300      	movs	r3, #0
 800711c:	73fb      	strb	r3, [r7, #15]
 800711e:	e001      	b.n	8007124 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007120:	2302      	movs	r3, #2
 8007122:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007124:	7bfb      	ldrb	r3, [r7, #15]
}
 8007126:	4618      	mov	r0, r3
 8007128:	3714      	adds	r7, #20
 800712a:	46bd      	mov	sp, r7
 800712c:	bc80      	pop	{r7}
 800712e:	4770      	bx	lr

08007130 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b082      	sub	sp, #8
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f001 fac3 	bl	80086c4 <USBD_LL_Start>

  return USBD_OK;
 800713e:	2300      	movs	r3, #0
}
 8007140:	4618      	mov	r0, r3
 8007142:	3708      	adds	r7, #8
 8007144:	46bd      	mov	sp, r7
 8007146:	bd80      	pop	{r7, pc}

08007148 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007148:	b480      	push	{r7}
 800714a:	b083      	sub	sp, #12
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007150:	2300      	movs	r3, #0
}
 8007152:	4618      	mov	r0, r3
 8007154:	370c      	adds	r7, #12
 8007156:	46bd      	mov	sp, r7
 8007158:	bc80      	pop	{r7}
 800715a:	4770      	bx	lr

0800715c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b084      	sub	sp, #16
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
 8007164:	460b      	mov	r3, r1
 8007166:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007168:	2302      	movs	r3, #2
 800716a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007172:	2b00      	cmp	r3, #0
 8007174:	d00c      	beq.n	8007190 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	78fa      	ldrb	r2, [r7, #3]
 8007180:	4611      	mov	r1, r2
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	4798      	blx	r3
 8007186:	4603      	mov	r3, r0
 8007188:	2b00      	cmp	r3, #0
 800718a:	d101      	bne.n	8007190 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800718c:	2300      	movs	r3, #0
 800718e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007190:	7bfb      	ldrb	r3, [r7, #15]
}
 8007192:	4618      	mov	r0, r3
 8007194:	3710      	adds	r7, #16
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}

0800719a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800719a:	b580      	push	{r7, lr}
 800719c:	b082      	sub	sp, #8
 800719e:	af00      	add	r7, sp, #0
 80071a0:	6078      	str	r0, [r7, #4]
 80071a2:	460b      	mov	r3, r1
 80071a4:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071ac:	685b      	ldr	r3, [r3, #4]
 80071ae:	78fa      	ldrb	r2, [r7, #3]
 80071b0:	4611      	mov	r1, r2
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	4798      	blx	r3

  return USBD_OK;
 80071b6:	2300      	movs	r3, #0
}
 80071b8:	4618      	mov	r0, r3
 80071ba:	3708      	adds	r7, #8
 80071bc:	46bd      	mov	sp, r7
 80071be:	bd80      	pop	{r7, pc}

080071c0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b082      	sub	sp, #8
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
 80071c8:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80071d0:	6839      	ldr	r1, [r7, #0]
 80071d2:	4618      	mov	r0, r3
 80071d4:	f000 fed7 	bl	8007f86 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2201      	movs	r2, #1
 80071dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80071e6:	461a      	mov	r2, r3
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80071f4:	f003 031f 	and.w	r3, r3, #31
 80071f8:	2b02      	cmp	r3, #2
 80071fa:	d016      	beq.n	800722a <USBD_LL_SetupStage+0x6a>
 80071fc:	2b02      	cmp	r3, #2
 80071fe:	d81c      	bhi.n	800723a <USBD_LL_SetupStage+0x7a>
 8007200:	2b00      	cmp	r3, #0
 8007202:	d002      	beq.n	800720a <USBD_LL_SetupStage+0x4a>
 8007204:	2b01      	cmp	r3, #1
 8007206:	d008      	beq.n	800721a <USBD_LL_SetupStage+0x5a>
 8007208:	e017      	b.n	800723a <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007210:	4619      	mov	r1, r3
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f000 f9ca 	bl	80075ac <USBD_StdDevReq>
      break;
 8007218:	e01a      	b.n	8007250 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007220:	4619      	mov	r1, r3
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f000 fa2c 	bl	8007680 <USBD_StdItfReq>
      break;
 8007228:	e012      	b.n	8007250 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007230:	4619      	mov	r1, r3
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	f000 fa6c 	bl	8007710 <USBD_StdEPReq>
      break;
 8007238:	e00a      	b.n	8007250 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007240:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007244:	b2db      	uxtb	r3, r3
 8007246:	4619      	mov	r1, r3
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	f001 fa9b 	bl	8008784 <USBD_LL_StallEP>
      break;
 800724e:	bf00      	nop
  }

  return USBD_OK;
 8007250:	2300      	movs	r3, #0
}
 8007252:	4618      	mov	r0, r3
 8007254:	3708      	adds	r7, #8
 8007256:	46bd      	mov	sp, r7
 8007258:	bd80      	pop	{r7, pc}

0800725a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800725a:	b580      	push	{r7, lr}
 800725c:	b086      	sub	sp, #24
 800725e:	af00      	add	r7, sp, #0
 8007260:	60f8      	str	r0, [r7, #12]
 8007262:	460b      	mov	r3, r1
 8007264:	607a      	str	r2, [r7, #4]
 8007266:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007268:	7afb      	ldrb	r3, [r7, #11]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d14b      	bne.n	8007306 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007274:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800727c:	2b03      	cmp	r3, #3
 800727e:	d134      	bne.n	80072ea <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007280:	697b      	ldr	r3, [r7, #20]
 8007282:	68da      	ldr	r2, [r3, #12]
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	691b      	ldr	r3, [r3, #16]
 8007288:	429a      	cmp	r2, r3
 800728a:	d919      	bls.n	80072c0 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	68da      	ldr	r2, [r3, #12]
 8007290:	697b      	ldr	r3, [r7, #20]
 8007292:	691b      	ldr	r3, [r3, #16]
 8007294:	1ad2      	subs	r2, r2, r3
 8007296:	697b      	ldr	r3, [r7, #20]
 8007298:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	68da      	ldr	r2, [r3, #12]
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80072a2:	429a      	cmp	r2, r3
 80072a4:	d203      	bcs.n	80072ae <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80072aa:	b29b      	uxth	r3, r3
 80072ac:	e002      	b.n	80072b4 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80072b2:	b29b      	uxth	r3, r3
 80072b4:	461a      	mov	r2, r3
 80072b6:	6879      	ldr	r1, [r7, #4]
 80072b8:	68f8      	ldr	r0, [r7, #12]
 80072ba:	f000 ff56 	bl	800816a <USBD_CtlContinueRx>
 80072be:	e038      	b.n	8007332 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072c6:	691b      	ldr	r3, [r3, #16]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d00a      	beq.n	80072e2 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80072d2:	2b03      	cmp	r3, #3
 80072d4:	d105      	bne.n	80072e2 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072dc:	691b      	ldr	r3, [r3, #16]
 80072de:	68f8      	ldr	r0, [r7, #12]
 80072e0:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80072e2:	68f8      	ldr	r0, [r7, #12]
 80072e4:	f000 ff53 	bl	800818e <USBD_CtlSendStatus>
 80072e8:	e023      	b.n	8007332 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80072f0:	2b05      	cmp	r3, #5
 80072f2:	d11e      	bne.n	8007332 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	2200      	movs	r2, #0
 80072f8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80072fc:	2100      	movs	r1, #0
 80072fe:	68f8      	ldr	r0, [r7, #12]
 8007300:	f001 fa40 	bl	8008784 <USBD_LL_StallEP>
 8007304:	e015      	b.n	8007332 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800730c:	699b      	ldr	r3, [r3, #24]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d00d      	beq.n	800732e <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007318:	2b03      	cmp	r3, #3
 800731a:	d108      	bne.n	800732e <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007322:	699b      	ldr	r3, [r3, #24]
 8007324:	7afa      	ldrb	r2, [r7, #11]
 8007326:	4611      	mov	r1, r2
 8007328:	68f8      	ldr	r0, [r7, #12]
 800732a:	4798      	blx	r3
 800732c:	e001      	b.n	8007332 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800732e:	2302      	movs	r3, #2
 8007330:	e000      	b.n	8007334 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007332:	2300      	movs	r3, #0
}
 8007334:	4618      	mov	r0, r3
 8007336:	3718      	adds	r7, #24
 8007338:	46bd      	mov	sp, r7
 800733a:	bd80      	pop	{r7, pc}

0800733c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b086      	sub	sp, #24
 8007340:	af00      	add	r7, sp, #0
 8007342:	60f8      	str	r0, [r7, #12]
 8007344:	460b      	mov	r3, r1
 8007346:	607a      	str	r2, [r7, #4]
 8007348:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800734a:	7afb      	ldrb	r3, [r7, #11]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d17f      	bne.n	8007450 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	3314      	adds	r3, #20
 8007354:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800735c:	2b02      	cmp	r3, #2
 800735e:	d15c      	bne.n	800741a <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007360:	697b      	ldr	r3, [r7, #20]
 8007362:	68da      	ldr	r2, [r3, #12]
 8007364:	697b      	ldr	r3, [r7, #20]
 8007366:	691b      	ldr	r3, [r3, #16]
 8007368:	429a      	cmp	r2, r3
 800736a:	d915      	bls.n	8007398 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800736c:	697b      	ldr	r3, [r7, #20]
 800736e:	68da      	ldr	r2, [r3, #12]
 8007370:	697b      	ldr	r3, [r7, #20]
 8007372:	691b      	ldr	r3, [r3, #16]
 8007374:	1ad2      	subs	r2, r2, r3
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800737a:	697b      	ldr	r3, [r7, #20]
 800737c:	68db      	ldr	r3, [r3, #12]
 800737e:	b29b      	uxth	r3, r3
 8007380:	461a      	mov	r2, r3
 8007382:	6879      	ldr	r1, [r7, #4]
 8007384:	68f8      	ldr	r0, [r7, #12]
 8007386:	f000 fec0 	bl	800810a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800738a:	2300      	movs	r3, #0
 800738c:	2200      	movs	r2, #0
 800738e:	2100      	movs	r1, #0
 8007390:	68f8      	ldr	r0, [r7, #12]
 8007392:	f001 faa3 	bl	80088dc <USBD_LL_PrepareReceive>
 8007396:	e04e      	b.n	8007436 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	689b      	ldr	r3, [r3, #8]
 800739c:	697a      	ldr	r2, [r7, #20]
 800739e:	6912      	ldr	r2, [r2, #16]
 80073a0:	fbb3 f1f2 	udiv	r1, r3, r2
 80073a4:	fb02 f201 	mul.w	r2, r2, r1
 80073a8:	1a9b      	subs	r3, r3, r2
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d11c      	bne.n	80073e8 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80073ae:	697b      	ldr	r3, [r7, #20]
 80073b0:	689a      	ldr	r2, [r3, #8]
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80073b6:	429a      	cmp	r2, r3
 80073b8:	d316      	bcc.n	80073e8 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	689a      	ldr	r2, [r3, #8]
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80073c4:	429a      	cmp	r2, r3
 80073c6:	d20f      	bcs.n	80073e8 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80073c8:	2200      	movs	r2, #0
 80073ca:	2100      	movs	r1, #0
 80073cc:	68f8      	ldr	r0, [r7, #12]
 80073ce:	f000 fe9c 	bl	800810a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	2200      	movs	r2, #0
 80073d6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80073da:	2300      	movs	r3, #0
 80073dc:	2200      	movs	r2, #0
 80073de:	2100      	movs	r1, #0
 80073e0:	68f8      	ldr	r0, [r7, #12]
 80073e2:	f001 fa7b 	bl	80088dc <USBD_LL_PrepareReceive>
 80073e6:	e026      	b.n	8007436 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073ee:	68db      	ldr	r3, [r3, #12]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d00a      	beq.n	800740a <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80073fa:	2b03      	cmp	r3, #3
 80073fc:	d105      	bne.n	800740a <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007404:	68db      	ldr	r3, [r3, #12]
 8007406:	68f8      	ldr	r0, [r7, #12]
 8007408:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800740a:	2180      	movs	r1, #128	; 0x80
 800740c:	68f8      	ldr	r0, [r7, #12]
 800740e:	f001 f9b9 	bl	8008784 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007412:	68f8      	ldr	r0, [r7, #12]
 8007414:	f000 fece 	bl	80081b4 <USBD_CtlReceiveStatus>
 8007418:	e00d      	b.n	8007436 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007420:	2b04      	cmp	r3, #4
 8007422:	d004      	beq.n	800742e <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800742a:	2b00      	cmp	r3, #0
 800742c:	d103      	bne.n	8007436 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800742e:	2180      	movs	r1, #128	; 0x80
 8007430:	68f8      	ldr	r0, [r7, #12]
 8007432:	f001 f9a7 	bl	8008784 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800743c:	2b01      	cmp	r3, #1
 800743e:	d11d      	bne.n	800747c <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007440:	68f8      	ldr	r0, [r7, #12]
 8007442:	f7ff fe81 	bl	8007148 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	2200      	movs	r2, #0
 800744a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800744e:	e015      	b.n	800747c <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007456:	695b      	ldr	r3, [r3, #20]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d00d      	beq.n	8007478 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007462:	2b03      	cmp	r3, #3
 8007464:	d108      	bne.n	8007478 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800746c:	695b      	ldr	r3, [r3, #20]
 800746e:	7afa      	ldrb	r2, [r7, #11]
 8007470:	4611      	mov	r1, r2
 8007472:	68f8      	ldr	r0, [r7, #12]
 8007474:	4798      	blx	r3
 8007476:	e001      	b.n	800747c <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007478:	2302      	movs	r3, #2
 800747a:	e000      	b.n	800747e <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800747c:	2300      	movs	r3, #0
}
 800747e:	4618      	mov	r0, r3
 8007480:	3718      	adds	r7, #24
 8007482:	46bd      	mov	sp, r7
 8007484:	bd80      	pop	{r7, pc}

08007486 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007486:	b580      	push	{r7, lr}
 8007488:	b082      	sub	sp, #8
 800748a:	af00      	add	r7, sp, #0
 800748c:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800748e:	2340      	movs	r3, #64	; 0x40
 8007490:	2200      	movs	r2, #0
 8007492:	2100      	movs	r1, #0
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	f001 f930 	bl	80086fa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2201      	movs	r2, #1
 800749e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2240      	movs	r2, #64	; 0x40
 80074a6:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80074aa:	2340      	movs	r3, #64	; 0x40
 80074ac:	2200      	movs	r2, #0
 80074ae:	2180      	movs	r1, #128	; 0x80
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f001 f922 	bl	80086fa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2201      	movs	r2, #1
 80074ba:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2240      	movs	r2, #64	; 0x40
 80074c0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2201      	movs	r2, #1
 80074c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2200      	movs	r2, #0
 80074ce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2200      	movs	r2, #0
 80074d6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2200      	movs	r2, #0
 80074dc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d009      	beq.n	80074fe <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074f0:	685b      	ldr	r3, [r3, #4]
 80074f2:	687a      	ldr	r2, [r7, #4]
 80074f4:	6852      	ldr	r2, [r2, #4]
 80074f6:	b2d2      	uxtb	r2, r2
 80074f8:	4611      	mov	r1, r2
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	4798      	blx	r3
  }

  return USBD_OK;
 80074fe:	2300      	movs	r3, #0
}
 8007500:	4618      	mov	r0, r3
 8007502:	3708      	adds	r7, #8
 8007504:	46bd      	mov	sp, r7
 8007506:	bd80      	pop	{r7, pc}

08007508 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007508:	b480      	push	{r7}
 800750a:	b083      	sub	sp, #12
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
 8007510:	460b      	mov	r3, r1
 8007512:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	78fa      	ldrb	r2, [r7, #3]
 8007518:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800751a:	2300      	movs	r3, #0
}
 800751c:	4618      	mov	r0, r3
 800751e:	370c      	adds	r7, #12
 8007520:	46bd      	mov	sp, r7
 8007522:	bc80      	pop	{r7}
 8007524:	4770      	bx	lr

08007526 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007526:	b480      	push	{r7}
 8007528:	b083      	sub	sp, #12
 800752a:	af00      	add	r7, sp, #0
 800752c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2204      	movs	r2, #4
 800753e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007542:	2300      	movs	r3, #0
}
 8007544:	4618      	mov	r0, r3
 8007546:	370c      	adds	r7, #12
 8007548:	46bd      	mov	sp, r7
 800754a:	bc80      	pop	{r7}
 800754c:	4770      	bx	lr

0800754e <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800754e:	b480      	push	{r7}
 8007550:	b083      	sub	sp, #12
 8007552:	af00      	add	r7, sp, #0
 8007554:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800755c:	2b04      	cmp	r3, #4
 800755e:	d105      	bne.n	800756c <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800756c:	2300      	movs	r3, #0
}
 800756e:	4618      	mov	r0, r3
 8007570:	370c      	adds	r7, #12
 8007572:	46bd      	mov	sp, r7
 8007574:	bc80      	pop	{r7}
 8007576:	4770      	bx	lr

08007578 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b082      	sub	sp, #8
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007586:	2b03      	cmp	r3, #3
 8007588:	d10b      	bne.n	80075a2 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007590:	69db      	ldr	r3, [r3, #28]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d005      	beq.n	80075a2 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800759c:	69db      	ldr	r3, [r3, #28]
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80075a2:	2300      	movs	r3, #0
}
 80075a4:	4618      	mov	r0, r3
 80075a6:	3708      	adds	r7, #8
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}

080075ac <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b084      	sub	sp, #16
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
 80075b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80075b6:	2300      	movs	r3, #0
 80075b8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	781b      	ldrb	r3, [r3, #0]
 80075be:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80075c2:	2b40      	cmp	r3, #64	; 0x40
 80075c4:	d005      	beq.n	80075d2 <USBD_StdDevReq+0x26>
 80075c6:	2b40      	cmp	r3, #64	; 0x40
 80075c8:	d84f      	bhi.n	800766a <USBD_StdDevReq+0xbe>
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d009      	beq.n	80075e2 <USBD_StdDevReq+0x36>
 80075ce:	2b20      	cmp	r3, #32
 80075d0:	d14b      	bne.n	800766a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075d8:	689b      	ldr	r3, [r3, #8]
 80075da:	6839      	ldr	r1, [r7, #0]
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	4798      	blx	r3
      break;
 80075e0:	e048      	b.n	8007674 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	785b      	ldrb	r3, [r3, #1]
 80075e6:	2b09      	cmp	r3, #9
 80075e8:	d839      	bhi.n	800765e <USBD_StdDevReq+0xb2>
 80075ea:	a201      	add	r2, pc, #4	; (adr r2, 80075f0 <USBD_StdDevReq+0x44>)
 80075ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075f0:	08007641 	.word	0x08007641
 80075f4:	08007655 	.word	0x08007655
 80075f8:	0800765f 	.word	0x0800765f
 80075fc:	0800764b 	.word	0x0800764b
 8007600:	0800765f 	.word	0x0800765f
 8007604:	08007623 	.word	0x08007623
 8007608:	08007619 	.word	0x08007619
 800760c:	0800765f 	.word	0x0800765f
 8007610:	08007637 	.word	0x08007637
 8007614:	0800762d 	.word	0x0800762d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007618:	6839      	ldr	r1, [r7, #0]
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f000 f9dc 	bl	80079d8 <USBD_GetDescriptor>
          break;
 8007620:	e022      	b.n	8007668 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007622:	6839      	ldr	r1, [r7, #0]
 8007624:	6878      	ldr	r0, [r7, #4]
 8007626:	f000 fb3f 	bl	8007ca8 <USBD_SetAddress>
          break;
 800762a:	e01d      	b.n	8007668 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800762c:	6839      	ldr	r1, [r7, #0]
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f000 fb7e 	bl	8007d30 <USBD_SetConfig>
          break;
 8007634:	e018      	b.n	8007668 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007636:	6839      	ldr	r1, [r7, #0]
 8007638:	6878      	ldr	r0, [r7, #4]
 800763a:	f000 fc07 	bl	8007e4c <USBD_GetConfig>
          break;
 800763e:	e013      	b.n	8007668 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007640:	6839      	ldr	r1, [r7, #0]
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f000 fc37 	bl	8007eb6 <USBD_GetStatus>
          break;
 8007648:	e00e      	b.n	8007668 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800764a:	6839      	ldr	r1, [r7, #0]
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	f000 fc65 	bl	8007f1c <USBD_SetFeature>
          break;
 8007652:	e009      	b.n	8007668 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007654:	6839      	ldr	r1, [r7, #0]
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	f000 fc74 	bl	8007f44 <USBD_ClrFeature>
          break;
 800765c:	e004      	b.n	8007668 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800765e:	6839      	ldr	r1, [r7, #0]
 8007660:	6878      	ldr	r0, [r7, #4]
 8007662:	f000 fccc 	bl	8007ffe <USBD_CtlError>
          break;
 8007666:	bf00      	nop
      }
      break;
 8007668:	e004      	b.n	8007674 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800766a:	6839      	ldr	r1, [r7, #0]
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	f000 fcc6 	bl	8007ffe <USBD_CtlError>
      break;
 8007672:	bf00      	nop
  }

  return ret;
 8007674:	7bfb      	ldrb	r3, [r7, #15]
}
 8007676:	4618      	mov	r0, r3
 8007678:	3710      	adds	r7, #16
 800767a:	46bd      	mov	sp, r7
 800767c:	bd80      	pop	{r7, pc}
 800767e:	bf00      	nop

08007680 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b084      	sub	sp, #16
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
 8007688:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800768a:	2300      	movs	r3, #0
 800768c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	781b      	ldrb	r3, [r3, #0]
 8007692:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007696:	2b40      	cmp	r3, #64	; 0x40
 8007698:	d005      	beq.n	80076a6 <USBD_StdItfReq+0x26>
 800769a:	2b40      	cmp	r3, #64	; 0x40
 800769c:	d82e      	bhi.n	80076fc <USBD_StdItfReq+0x7c>
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d001      	beq.n	80076a6 <USBD_StdItfReq+0x26>
 80076a2:	2b20      	cmp	r3, #32
 80076a4:	d12a      	bne.n	80076fc <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076ac:	3b01      	subs	r3, #1
 80076ae:	2b02      	cmp	r3, #2
 80076b0:	d81d      	bhi.n	80076ee <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	889b      	ldrh	r3, [r3, #4]
 80076b6:	b2db      	uxtb	r3, r3
 80076b8:	2b01      	cmp	r3, #1
 80076ba:	d813      	bhi.n	80076e4 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076c2:	689b      	ldr	r3, [r3, #8]
 80076c4:	6839      	ldr	r1, [r7, #0]
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	4798      	blx	r3
 80076ca:	4603      	mov	r3, r0
 80076cc:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	88db      	ldrh	r3, [r3, #6]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d110      	bne.n	80076f8 <USBD_StdItfReq+0x78>
 80076d6:	7bfb      	ldrb	r3, [r7, #15]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d10d      	bne.n	80076f8 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	f000 fd56 	bl	800818e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80076e2:	e009      	b.n	80076f8 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80076e4:	6839      	ldr	r1, [r7, #0]
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f000 fc89 	bl	8007ffe <USBD_CtlError>
          break;
 80076ec:	e004      	b.n	80076f8 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80076ee:	6839      	ldr	r1, [r7, #0]
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f000 fc84 	bl	8007ffe <USBD_CtlError>
          break;
 80076f6:	e000      	b.n	80076fa <USBD_StdItfReq+0x7a>
          break;
 80076f8:	bf00      	nop
      }
      break;
 80076fa:	e004      	b.n	8007706 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80076fc:	6839      	ldr	r1, [r7, #0]
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f000 fc7d 	bl	8007ffe <USBD_CtlError>
      break;
 8007704:	bf00      	nop
  }

  return USBD_OK;
 8007706:	2300      	movs	r3, #0
}
 8007708:	4618      	mov	r0, r3
 800770a:	3710      	adds	r7, #16
 800770c:	46bd      	mov	sp, r7
 800770e:	bd80      	pop	{r7, pc}

08007710 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b084      	sub	sp, #16
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
 8007718:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800771a:	2300      	movs	r3, #0
 800771c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	889b      	ldrh	r3, [r3, #4]
 8007722:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	781b      	ldrb	r3, [r3, #0]
 8007728:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800772c:	2b40      	cmp	r3, #64	; 0x40
 800772e:	d007      	beq.n	8007740 <USBD_StdEPReq+0x30>
 8007730:	2b40      	cmp	r3, #64	; 0x40
 8007732:	f200 8146 	bhi.w	80079c2 <USBD_StdEPReq+0x2b2>
 8007736:	2b00      	cmp	r3, #0
 8007738:	d00a      	beq.n	8007750 <USBD_StdEPReq+0x40>
 800773a:	2b20      	cmp	r3, #32
 800773c:	f040 8141 	bne.w	80079c2 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007746:	689b      	ldr	r3, [r3, #8]
 8007748:	6839      	ldr	r1, [r7, #0]
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	4798      	blx	r3
      break;
 800774e:	e13d      	b.n	80079cc <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	781b      	ldrb	r3, [r3, #0]
 8007754:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007758:	2b20      	cmp	r3, #32
 800775a:	d10a      	bne.n	8007772 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007762:	689b      	ldr	r3, [r3, #8]
 8007764:	6839      	ldr	r1, [r7, #0]
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	4798      	blx	r3
 800776a:	4603      	mov	r3, r0
 800776c:	73fb      	strb	r3, [r7, #15]

        return ret;
 800776e:	7bfb      	ldrb	r3, [r7, #15]
 8007770:	e12d      	b.n	80079ce <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	785b      	ldrb	r3, [r3, #1]
 8007776:	2b03      	cmp	r3, #3
 8007778:	d007      	beq.n	800778a <USBD_StdEPReq+0x7a>
 800777a:	2b03      	cmp	r3, #3
 800777c:	f300 811b 	bgt.w	80079b6 <USBD_StdEPReq+0x2a6>
 8007780:	2b00      	cmp	r3, #0
 8007782:	d072      	beq.n	800786a <USBD_StdEPReq+0x15a>
 8007784:	2b01      	cmp	r3, #1
 8007786:	d03a      	beq.n	80077fe <USBD_StdEPReq+0xee>
 8007788:	e115      	b.n	80079b6 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007790:	2b02      	cmp	r3, #2
 8007792:	d002      	beq.n	800779a <USBD_StdEPReq+0x8a>
 8007794:	2b03      	cmp	r3, #3
 8007796:	d015      	beq.n	80077c4 <USBD_StdEPReq+0xb4>
 8007798:	e02b      	b.n	80077f2 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800779a:	7bbb      	ldrb	r3, [r7, #14]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d00c      	beq.n	80077ba <USBD_StdEPReq+0xaa>
 80077a0:	7bbb      	ldrb	r3, [r7, #14]
 80077a2:	2b80      	cmp	r3, #128	; 0x80
 80077a4:	d009      	beq.n	80077ba <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80077a6:	7bbb      	ldrb	r3, [r7, #14]
 80077a8:	4619      	mov	r1, r3
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f000 ffea 	bl	8008784 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80077b0:	2180      	movs	r1, #128	; 0x80
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f000 ffe6 	bl	8008784 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80077b8:	e020      	b.n	80077fc <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80077ba:	6839      	ldr	r1, [r7, #0]
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f000 fc1e 	bl	8007ffe <USBD_CtlError>
              break;
 80077c2:	e01b      	b.n	80077fc <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	885b      	ldrh	r3, [r3, #2]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d10e      	bne.n	80077ea <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80077cc:	7bbb      	ldrb	r3, [r7, #14]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d00b      	beq.n	80077ea <USBD_StdEPReq+0xda>
 80077d2:	7bbb      	ldrb	r3, [r7, #14]
 80077d4:	2b80      	cmp	r3, #128	; 0x80
 80077d6:	d008      	beq.n	80077ea <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	88db      	ldrh	r3, [r3, #6]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d104      	bne.n	80077ea <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80077e0:	7bbb      	ldrb	r3, [r7, #14]
 80077e2:	4619      	mov	r1, r3
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f000 ffcd 	bl	8008784 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f000 fccf 	bl	800818e <USBD_CtlSendStatus>

              break;
 80077f0:	e004      	b.n	80077fc <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80077f2:	6839      	ldr	r1, [r7, #0]
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f000 fc02 	bl	8007ffe <USBD_CtlError>
              break;
 80077fa:	bf00      	nop
          }
          break;
 80077fc:	e0e0      	b.n	80079c0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007804:	2b02      	cmp	r3, #2
 8007806:	d002      	beq.n	800780e <USBD_StdEPReq+0xfe>
 8007808:	2b03      	cmp	r3, #3
 800780a:	d015      	beq.n	8007838 <USBD_StdEPReq+0x128>
 800780c:	e026      	b.n	800785c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800780e:	7bbb      	ldrb	r3, [r7, #14]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d00c      	beq.n	800782e <USBD_StdEPReq+0x11e>
 8007814:	7bbb      	ldrb	r3, [r7, #14]
 8007816:	2b80      	cmp	r3, #128	; 0x80
 8007818:	d009      	beq.n	800782e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800781a:	7bbb      	ldrb	r3, [r7, #14]
 800781c:	4619      	mov	r1, r3
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f000 ffb0 	bl	8008784 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007824:	2180      	movs	r1, #128	; 0x80
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f000 ffac 	bl	8008784 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800782c:	e01c      	b.n	8007868 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800782e:	6839      	ldr	r1, [r7, #0]
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f000 fbe4 	bl	8007ffe <USBD_CtlError>
              break;
 8007836:	e017      	b.n	8007868 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	885b      	ldrh	r3, [r3, #2]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d112      	bne.n	8007866 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007840:	7bbb      	ldrb	r3, [r7, #14]
 8007842:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007846:	2b00      	cmp	r3, #0
 8007848:	d004      	beq.n	8007854 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800784a:	7bbb      	ldrb	r3, [r7, #14]
 800784c:	4619      	mov	r1, r3
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f000 ffb7 	bl	80087c2 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007854:	6878      	ldr	r0, [r7, #4]
 8007856:	f000 fc9a 	bl	800818e <USBD_CtlSendStatus>
              }
              break;
 800785a:	e004      	b.n	8007866 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800785c:	6839      	ldr	r1, [r7, #0]
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f000 fbcd 	bl	8007ffe <USBD_CtlError>
              break;
 8007864:	e000      	b.n	8007868 <USBD_StdEPReq+0x158>
              break;
 8007866:	bf00      	nop
          }
          break;
 8007868:	e0aa      	b.n	80079c0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007870:	2b02      	cmp	r3, #2
 8007872:	d002      	beq.n	800787a <USBD_StdEPReq+0x16a>
 8007874:	2b03      	cmp	r3, #3
 8007876:	d032      	beq.n	80078de <USBD_StdEPReq+0x1ce>
 8007878:	e097      	b.n	80079aa <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800787a:	7bbb      	ldrb	r3, [r7, #14]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d007      	beq.n	8007890 <USBD_StdEPReq+0x180>
 8007880:	7bbb      	ldrb	r3, [r7, #14]
 8007882:	2b80      	cmp	r3, #128	; 0x80
 8007884:	d004      	beq.n	8007890 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8007886:	6839      	ldr	r1, [r7, #0]
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f000 fbb8 	bl	8007ffe <USBD_CtlError>
                break;
 800788e:	e091      	b.n	80079b4 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007890:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007894:	2b00      	cmp	r3, #0
 8007896:	da0b      	bge.n	80078b0 <USBD_StdEPReq+0x1a0>
 8007898:	7bbb      	ldrb	r3, [r7, #14]
 800789a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800789e:	4613      	mov	r3, r2
 80078a0:	009b      	lsls	r3, r3, #2
 80078a2:	4413      	add	r3, r2
 80078a4:	009b      	lsls	r3, r3, #2
 80078a6:	3310      	adds	r3, #16
 80078a8:	687a      	ldr	r2, [r7, #4]
 80078aa:	4413      	add	r3, r2
 80078ac:	3304      	adds	r3, #4
 80078ae:	e00b      	b.n	80078c8 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80078b0:	7bbb      	ldrb	r3, [r7, #14]
 80078b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80078b6:	4613      	mov	r3, r2
 80078b8:	009b      	lsls	r3, r3, #2
 80078ba:	4413      	add	r3, r2
 80078bc:	009b      	lsls	r3, r3, #2
 80078be:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80078c2:	687a      	ldr	r2, [r7, #4]
 80078c4:	4413      	add	r3, r2
 80078c6:	3304      	adds	r3, #4
 80078c8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	2200      	movs	r2, #0
 80078ce:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	2202      	movs	r2, #2
 80078d4:	4619      	mov	r1, r3
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	f000 fbfb 	bl	80080d2 <USBD_CtlSendData>
              break;
 80078dc:	e06a      	b.n	80079b4 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80078de:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	da11      	bge.n	800790a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80078e6:	7bbb      	ldrb	r3, [r7, #14]
 80078e8:	f003 020f 	and.w	r2, r3, #15
 80078ec:	6879      	ldr	r1, [r7, #4]
 80078ee:	4613      	mov	r3, r2
 80078f0:	009b      	lsls	r3, r3, #2
 80078f2:	4413      	add	r3, r2
 80078f4:	009b      	lsls	r3, r3, #2
 80078f6:	440b      	add	r3, r1
 80078f8:	3318      	adds	r3, #24
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d117      	bne.n	8007930 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007900:	6839      	ldr	r1, [r7, #0]
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f000 fb7b 	bl	8007ffe <USBD_CtlError>
                  break;
 8007908:	e054      	b.n	80079b4 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800790a:	7bbb      	ldrb	r3, [r7, #14]
 800790c:	f003 020f 	and.w	r2, r3, #15
 8007910:	6879      	ldr	r1, [r7, #4]
 8007912:	4613      	mov	r3, r2
 8007914:	009b      	lsls	r3, r3, #2
 8007916:	4413      	add	r3, r2
 8007918:	009b      	lsls	r3, r3, #2
 800791a:	440b      	add	r3, r1
 800791c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d104      	bne.n	8007930 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007926:	6839      	ldr	r1, [r7, #0]
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f000 fb68 	bl	8007ffe <USBD_CtlError>
                  break;
 800792e:	e041      	b.n	80079b4 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007930:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007934:	2b00      	cmp	r3, #0
 8007936:	da0b      	bge.n	8007950 <USBD_StdEPReq+0x240>
 8007938:	7bbb      	ldrb	r3, [r7, #14]
 800793a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800793e:	4613      	mov	r3, r2
 8007940:	009b      	lsls	r3, r3, #2
 8007942:	4413      	add	r3, r2
 8007944:	009b      	lsls	r3, r3, #2
 8007946:	3310      	adds	r3, #16
 8007948:	687a      	ldr	r2, [r7, #4]
 800794a:	4413      	add	r3, r2
 800794c:	3304      	adds	r3, #4
 800794e:	e00b      	b.n	8007968 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007950:	7bbb      	ldrb	r3, [r7, #14]
 8007952:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007956:	4613      	mov	r3, r2
 8007958:	009b      	lsls	r3, r3, #2
 800795a:	4413      	add	r3, r2
 800795c:	009b      	lsls	r3, r3, #2
 800795e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007962:	687a      	ldr	r2, [r7, #4]
 8007964:	4413      	add	r3, r2
 8007966:	3304      	adds	r3, #4
 8007968:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800796a:	7bbb      	ldrb	r3, [r7, #14]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d002      	beq.n	8007976 <USBD_StdEPReq+0x266>
 8007970:	7bbb      	ldrb	r3, [r7, #14]
 8007972:	2b80      	cmp	r3, #128	; 0x80
 8007974:	d103      	bne.n	800797e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	2200      	movs	r2, #0
 800797a:	601a      	str	r2, [r3, #0]
 800797c:	e00e      	b.n	800799c <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800797e:	7bbb      	ldrb	r3, [r7, #14]
 8007980:	4619      	mov	r1, r3
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	f000 ff3c 	bl	8008800 <USBD_LL_IsStallEP>
 8007988:	4603      	mov	r3, r0
 800798a:	2b00      	cmp	r3, #0
 800798c:	d003      	beq.n	8007996 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	2201      	movs	r2, #1
 8007992:	601a      	str	r2, [r3, #0]
 8007994:	e002      	b.n	800799c <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8007996:	68bb      	ldr	r3, [r7, #8]
 8007998:	2200      	movs	r2, #0
 800799a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	2202      	movs	r2, #2
 80079a0:	4619      	mov	r1, r3
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f000 fb95 	bl	80080d2 <USBD_CtlSendData>
              break;
 80079a8:	e004      	b.n	80079b4 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80079aa:	6839      	ldr	r1, [r7, #0]
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f000 fb26 	bl	8007ffe <USBD_CtlError>
              break;
 80079b2:	bf00      	nop
          }
          break;
 80079b4:	e004      	b.n	80079c0 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80079b6:	6839      	ldr	r1, [r7, #0]
 80079b8:	6878      	ldr	r0, [r7, #4]
 80079ba:	f000 fb20 	bl	8007ffe <USBD_CtlError>
          break;
 80079be:	bf00      	nop
      }
      break;
 80079c0:	e004      	b.n	80079cc <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80079c2:	6839      	ldr	r1, [r7, #0]
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f000 fb1a 	bl	8007ffe <USBD_CtlError>
      break;
 80079ca:	bf00      	nop
  }

  return ret;
 80079cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80079ce:	4618      	mov	r0, r3
 80079d0:	3710      	adds	r7, #16
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bd80      	pop	{r7, pc}
	...

080079d8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b084      	sub	sp, #16
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
 80079e0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80079e2:	2300      	movs	r3, #0
 80079e4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80079e6:	2300      	movs	r3, #0
 80079e8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80079ea:	2300      	movs	r3, #0
 80079ec:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	885b      	ldrh	r3, [r3, #2]
 80079f2:	0a1b      	lsrs	r3, r3, #8
 80079f4:	b29b      	uxth	r3, r3
 80079f6:	3b01      	subs	r3, #1
 80079f8:	2b06      	cmp	r3, #6
 80079fa:	f200 8128 	bhi.w	8007c4e <USBD_GetDescriptor+0x276>
 80079fe:	a201      	add	r2, pc, #4	; (adr r2, 8007a04 <USBD_GetDescriptor+0x2c>)
 8007a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a04:	08007a21 	.word	0x08007a21
 8007a08:	08007a39 	.word	0x08007a39
 8007a0c:	08007a79 	.word	0x08007a79
 8007a10:	08007c4f 	.word	0x08007c4f
 8007a14:	08007c4f 	.word	0x08007c4f
 8007a18:	08007bef 	.word	0x08007bef
 8007a1c:	08007c1b 	.word	0x08007c1b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	687a      	ldr	r2, [r7, #4]
 8007a2a:	7c12      	ldrb	r2, [r2, #16]
 8007a2c:	f107 0108 	add.w	r1, r7, #8
 8007a30:	4610      	mov	r0, r2
 8007a32:	4798      	blx	r3
 8007a34:	60f8      	str	r0, [r7, #12]
      break;
 8007a36:	e112      	b.n	8007c5e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	7c1b      	ldrb	r3, [r3, #16]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d10d      	bne.n	8007a5c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a48:	f107 0208 	add.w	r2, r7, #8
 8007a4c:	4610      	mov	r0, r2
 8007a4e:	4798      	blx	r3
 8007a50:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	3301      	adds	r3, #1
 8007a56:	2202      	movs	r2, #2
 8007a58:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007a5a:	e100      	b.n	8007c5e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a64:	f107 0208 	add.w	r2, r7, #8
 8007a68:	4610      	mov	r0, r2
 8007a6a:	4798      	blx	r3
 8007a6c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	3301      	adds	r3, #1
 8007a72:	2202      	movs	r2, #2
 8007a74:	701a      	strb	r2, [r3, #0]
      break;
 8007a76:	e0f2      	b.n	8007c5e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	885b      	ldrh	r3, [r3, #2]
 8007a7c:	b2db      	uxtb	r3, r3
 8007a7e:	2b05      	cmp	r3, #5
 8007a80:	f200 80ac 	bhi.w	8007bdc <USBD_GetDescriptor+0x204>
 8007a84:	a201      	add	r2, pc, #4	; (adr r2, 8007a8c <USBD_GetDescriptor+0xb4>)
 8007a86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a8a:	bf00      	nop
 8007a8c:	08007aa5 	.word	0x08007aa5
 8007a90:	08007ad9 	.word	0x08007ad9
 8007a94:	08007b0d 	.word	0x08007b0d
 8007a98:	08007b41 	.word	0x08007b41
 8007a9c:	08007b75 	.word	0x08007b75
 8007aa0:	08007ba9 	.word	0x08007ba9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007aaa:	685b      	ldr	r3, [r3, #4]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d00b      	beq.n	8007ac8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007ab6:	685b      	ldr	r3, [r3, #4]
 8007ab8:	687a      	ldr	r2, [r7, #4]
 8007aba:	7c12      	ldrb	r2, [r2, #16]
 8007abc:	f107 0108 	add.w	r1, r7, #8
 8007ac0:	4610      	mov	r0, r2
 8007ac2:	4798      	blx	r3
 8007ac4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ac6:	e091      	b.n	8007bec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ac8:	6839      	ldr	r1, [r7, #0]
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	f000 fa97 	bl	8007ffe <USBD_CtlError>
            err++;
 8007ad0:	7afb      	ldrb	r3, [r7, #11]
 8007ad2:	3301      	adds	r3, #1
 8007ad4:	72fb      	strb	r3, [r7, #11]
          break;
 8007ad6:	e089      	b.n	8007bec <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007ade:	689b      	ldr	r3, [r3, #8]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d00b      	beq.n	8007afc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007aea:	689b      	ldr	r3, [r3, #8]
 8007aec:	687a      	ldr	r2, [r7, #4]
 8007aee:	7c12      	ldrb	r2, [r2, #16]
 8007af0:	f107 0108 	add.w	r1, r7, #8
 8007af4:	4610      	mov	r0, r2
 8007af6:	4798      	blx	r3
 8007af8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007afa:	e077      	b.n	8007bec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007afc:	6839      	ldr	r1, [r7, #0]
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f000 fa7d 	bl	8007ffe <USBD_CtlError>
            err++;
 8007b04:	7afb      	ldrb	r3, [r7, #11]
 8007b06:	3301      	adds	r3, #1
 8007b08:	72fb      	strb	r3, [r7, #11]
          break;
 8007b0a:	e06f      	b.n	8007bec <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007b12:	68db      	ldr	r3, [r3, #12]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d00b      	beq.n	8007b30 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007b1e:	68db      	ldr	r3, [r3, #12]
 8007b20:	687a      	ldr	r2, [r7, #4]
 8007b22:	7c12      	ldrb	r2, [r2, #16]
 8007b24:	f107 0108 	add.w	r1, r7, #8
 8007b28:	4610      	mov	r0, r2
 8007b2a:	4798      	blx	r3
 8007b2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b2e:	e05d      	b.n	8007bec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b30:	6839      	ldr	r1, [r7, #0]
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	f000 fa63 	bl	8007ffe <USBD_CtlError>
            err++;
 8007b38:	7afb      	ldrb	r3, [r7, #11]
 8007b3a:	3301      	adds	r3, #1
 8007b3c:	72fb      	strb	r3, [r7, #11]
          break;
 8007b3e:	e055      	b.n	8007bec <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007b46:	691b      	ldr	r3, [r3, #16]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d00b      	beq.n	8007b64 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007b52:	691b      	ldr	r3, [r3, #16]
 8007b54:	687a      	ldr	r2, [r7, #4]
 8007b56:	7c12      	ldrb	r2, [r2, #16]
 8007b58:	f107 0108 	add.w	r1, r7, #8
 8007b5c:	4610      	mov	r0, r2
 8007b5e:	4798      	blx	r3
 8007b60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b62:	e043      	b.n	8007bec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b64:	6839      	ldr	r1, [r7, #0]
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	f000 fa49 	bl	8007ffe <USBD_CtlError>
            err++;
 8007b6c:	7afb      	ldrb	r3, [r7, #11]
 8007b6e:	3301      	adds	r3, #1
 8007b70:	72fb      	strb	r3, [r7, #11]
          break;
 8007b72:	e03b      	b.n	8007bec <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007b7a:	695b      	ldr	r3, [r3, #20]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d00b      	beq.n	8007b98 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007b86:	695b      	ldr	r3, [r3, #20]
 8007b88:	687a      	ldr	r2, [r7, #4]
 8007b8a:	7c12      	ldrb	r2, [r2, #16]
 8007b8c:	f107 0108 	add.w	r1, r7, #8
 8007b90:	4610      	mov	r0, r2
 8007b92:	4798      	blx	r3
 8007b94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b96:	e029      	b.n	8007bec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b98:	6839      	ldr	r1, [r7, #0]
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f000 fa2f 	bl	8007ffe <USBD_CtlError>
            err++;
 8007ba0:	7afb      	ldrb	r3, [r7, #11]
 8007ba2:	3301      	adds	r3, #1
 8007ba4:	72fb      	strb	r3, [r7, #11]
          break;
 8007ba6:	e021      	b.n	8007bec <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007bae:	699b      	ldr	r3, [r3, #24]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d00b      	beq.n	8007bcc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007bba:	699b      	ldr	r3, [r3, #24]
 8007bbc:	687a      	ldr	r2, [r7, #4]
 8007bbe:	7c12      	ldrb	r2, [r2, #16]
 8007bc0:	f107 0108 	add.w	r1, r7, #8
 8007bc4:	4610      	mov	r0, r2
 8007bc6:	4798      	blx	r3
 8007bc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007bca:	e00f      	b.n	8007bec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007bcc:	6839      	ldr	r1, [r7, #0]
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f000 fa15 	bl	8007ffe <USBD_CtlError>
            err++;
 8007bd4:	7afb      	ldrb	r3, [r7, #11]
 8007bd6:	3301      	adds	r3, #1
 8007bd8:	72fb      	strb	r3, [r7, #11]
          break;
 8007bda:	e007      	b.n	8007bec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007bdc:	6839      	ldr	r1, [r7, #0]
 8007bde:	6878      	ldr	r0, [r7, #4]
 8007be0:	f000 fa0d 	bl	8007ffe <USBD_CtlError>
          err++;
 8007be4:	7afb      	ldrb	r3, [r7, #11]
 8007be6:	3301      	adds	r3, #1
 8007be8:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007bea:	e038      	b.n	8007c5e <USBD_GetDescriptor+0x286>
 8007bec:	e037      	b.n	8007c5e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	7c1b      	ldrb	r3, [r3, #16]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d109      	bne.n	8007c0a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bfe:	f107 0208 	add.w	r2, r7, #8
 8007c02:	4610      	mov	r0, r2
 8007c04:	4798      	blx	r3
 8007c06:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007c08:	e029      	b.n	8007c5e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007c0a:	6839      	ldr	r1, [r7, #0]
 8007c0c:	6878      	ldr	r0, [r7, #4]
 8007c0e:	f000 f9f6 	bl	8007ffe <USBD_CtlError>
        err++;
 8007c12:	7afb      	ldrb	r3, [r7, #11]
 8007c14:	3301      	adds	r3, #1
 8007c16:	72fb      	strb	r3, [r7, #11]
      break;
 8007c18:	e021      	b.n	8007c5e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	7c1b      	ldrb	r3, [r3, #16]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d10d      	bne.n	8007c3e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c2a:	f107 0208 	add.w	r2, r7, #8
 8007c2e:	4610      	mov	r0, r2
 8007c30:	4798      	blx	r3
 8007c32:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	3301      	adds	r3, #1
 8007c38:	2207      	movs	r2, #7
 8007c3a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007c3c:	e00f      	b.n	8007c5e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007c3e:	6839      	ldr	r1, [r7, #0]
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	f000 f9dc 	bl	8007ffe <USBD_CtlError>
        err++;
 8007c46:	7afb      	ldrb	r3, [r7, #11]
 8007c48:	3301      	adds	r3, #1
 8007c4a:	72fb      	strb	r3, [r7, #11]
      break;
 8007c4c:	e007      	b.n	8007c5e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007c4e:	6839      	ldr	r1, [r7, #0]
 8007c50:	6878      	ldr	r0, [r7, #4]
 8007c52:	f000 f9d4 	bl	8007ffe <USBD_CtlError>
      err++;
 8007c56:	7afb      	ldrb	r3, [r7, #11]
 8007c58:	3301      	adds	r3, #1
 8007c5a:	72fb      	strb	r3, [r7, #11]
      break;
 8007c5c:	bf00      	nop
  }

  if (err != 0U)
 8007c5e:	7afb      	ldrb	r3, [r7, #11]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d11c      	bne.n	8007c9e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007c64:	893b      	ldrh	r3, [r7, #8]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d011      	beq.n	8007c8e <USBD_GetDescriptor+0x2b6>
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	88db      	ldrh	r3, [r3, #6]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d00d      	beq.n	8007c8e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	88da      	ldrh	r2, [r3, #6]
 8007c76:	893b      	ldrh	r3, [r7, #8]
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	bf28      	it	cs
 8007c7c:	4613      	movcs	r3, r2
 8007c7e:	b29b      	uxth	r3, r3
 8007c80:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007c82:	893b      	ldrh	r3, [r7, #8]
 8007c84:	461a      	mov	r2, r3
 8007c86:	68f9      	ldr	r1, [r7, #12]
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	f000 fa22 	bl	80080d2 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	88db      	ldrh	r3, [r3, #6]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d104      	bne.n	8007ca0 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f000 fa79 	bl	800818e <USBD_CtlSendStatus>
 8007c9c:	e000      	b.n	8007ca0 <USBD_GetDescriptor+0x2c8>
    return;
 8007c9e:	bf00      	nop
    }
  }
}
 8007ca0:	3710      	adds	r7, #16
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	bd80      	pop	{r7, pc}
 8007ca6:	bf00      	nop

08007ca8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b084      	sub	sp, #16
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
 8007cb0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	889b      	ldrh	r3, [r3, #4]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d130      	bne.n	8007d1c <USBD_SetAddress+0x74>
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	88db      	ldrh	r3, [r3, #6]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d12c      	bne.n	8007d1c <USBD_SetAddress+0x74>
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	885b      	ldrh	r3, [r3, #2]
 8007cc6:	2b7f      	cmp	r3, #127	; 0x7f
 8007cc8:	d828      	bhi.n	8007d1c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	885b      	ldrh	r3, [r3, #2]
 8007cce:	b2db      	uxtb	r3, r3
 8007cd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007cd4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cdc:	2b03      	cmp	r3, #3
 8007cde:	d104      	bne.n	8007cea <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007ce0:	6839      	ldr	r1, [r7, #0]
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f000 f98b 	bl	8007ffe <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ce8:	e01d      	b.n	8007d26 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	7bfa      	ldrb	r2, [r7, #15]
 8007cee:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007cf2:	7bfb      	ldrb	r3, [r7, #15]
 8007cf4:	4619      	mov	r1, r3
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f000 fdae 	bl	8008858 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f000 fa46 	bl	800818e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007d02:	7bfb      	ldrb	r3, [r7, #15]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d004      	beq.n	8007d12 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2202      	movs	r2, #2
 8007d0c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d10:	e009      	b.n	8007d26 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2201      	movs	r2, #1
 8007d16:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d1a:	e004      	b.n	8007d26 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007d1c:	6839      	ldr	r1, [r7, #0]
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f000 f96d 	bl	8007ffe <USBD_CtlError>
  }
}
 8007d24:	bf00      	nop
 8007d26:	bf00      	nop
 8007d28:	3710      	adds	r7, #16
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bd80      	pop	{r7, pc}
	...

08007d30 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b082      	sub	sp, #8
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
 8007d38:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	885b      	ldrh	r3, [r3, #2]
 8007d3e:	b2da      	uxtb	r2, r3
 8007d40:	4b41      	ldr	r3, [pc, #260]	; (8007e48 <USBD_SetConfig+0x118>)
 8007d42:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007d44:	4b40      	ldr	r3, [pc, #256]	; (8007e48 <USBD_SetConfig+0x118>)
 8007d46:	781b      	ldrb	r3, [r3, #0]
 8007d48:	2b01      	cmp	r3, #1
 8007d4a:	d904      	bls.n	8007d56 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007d4c:	6839      	ldr	r1, [r7, #0]
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	f000 f955 	bl	8007ffe <USBD_CtlError>
 8007d54:	e075      	b.n	8007e42 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d5c:	2b02      	cmp	r3, #2
 8007d5e:	d002      	beq.n	8007d66 <USBD_SetConfig+0x36>
 8007d60:	2b03      	cmp	r3, #3
 8007d62:	d023      	beq.n	8007dac <USBD_SetConfig+0x7c>
 8007d64:	e062      	b.n	8007e2c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007d66:	4b38      	ldr	r3, [pc, #224]	; (8007e48 <USBD_SetConfig+0x118>)
 8007d68:	781b      	ldrb	r3, [r3, #0]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d01a      	beq.n	8007da4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007d6e:	4b36      	ldr	r3, [pc, #216]	; (8007e48 <USBD_SetConfig+0x118>)
 8007d70:	781b      	ldrb	r3, [r3, #0]
 8007d72:	461a      	mov	r2, r3
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2203      	movs	r2, #3
 8007d7c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007d80:	4b31      	ldr	r3, [pc, #196]	; (8007e48 <USBD_SetConfig+0x118>)
 8007d82:	781b      	ldrb	r3, [r3, #0]
 8007d84:	4619      	mov	r1, r3
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f7ff f9e8 	bl	800715c <USBD_SetClassConfig>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	2b02      	cmp	r3, #2
 8007d90:	d104      	bne.n	8007d9c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007d92:	6839      	ldr	r1, [r7, #0]
 8007d94:	6878      	ldr	r0, [r7, #4]
 8007d96:	f000 f932 	bl	8007ffe <USBD_CtlError>
            return;
 8007d9a:	e052      	b.n	8007e42 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007d9c:	6878      	ldr	r0, [r7, #4]
 8007d9e:	f000 f9f6 	bl	800818e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007da2:	e04e      	b.n	8007e42 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007da4:	6878      	ldr	r0, [r7, #4]
 8007da6:	f000 f9f2 	bl	800818e <USBD_CtlSendStatus>
        break;
 8007daa:	e04a      	b.n	8007e42 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007dac:	4b26      	ldr	r3, [pc, #152]	; (8007e48 <USBD_SetConfig+0x118>)
 8007dae:	781b      	ldrb	r3, [r3, #0]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d112      	bne.n	8007dda <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2202      	movs	r2, #2
 8007db8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007dbc:	4b22      	ldr	r3, [pc, #136]	; (8007e48 <USBD_SetConfig+0x118>)
 8007dbe:	781b      	ldrb	r3, [r3, #0]
 8007dc0:	461a      	mov	r2, r3
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007dc6:	4b20      	ldr	r3, [pc, #128]	; (8007e48 <USBD_SetConfig+0x118>)
 8007dc8:	781b      	ldrb	r3, [r3, #0]
 8007dca:	4619      	mov	r1, r3
 8007dcc:	6878      	ldr	r0, [r7, #4]
 8007dce:	f7ff f9e4 	bl	800719a <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f000 f9db 	bl	800818e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007dd8:	e033      	b.n	8007e42 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007dda:	4b1b      	ldr	r3, [pc, #108]	; (8007e48 <USBD_SetConfig+0x118>)
 8007ddc:	781b      	ldrb	r3, [r3, #0]
 8007dde:	461a      	mov	r2, r3
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	685b      	ldr	r3, [r3, #4]
 8007de4:	429a      	cmp	r2, r3
 8007de6:	d01d      	beq.n	8007e24 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	685b      	ldr	r3, [r3, #4]
 8007dec:	b2db      	uxtb	r3, r3
 8007dee:	4619      	mov	r1, r3
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	f7ff f9d2 	bl	800719a <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007df6:	4b14      	ldr	r3, [pc, #80]	; (8007e48 <USBD_SetConfig+0x118>)
 8007df8:	781b      	ldrb	r3, [r3, #0]
 8007dfa:	461a      	mov	r2, r3
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007e00:	4b11      	ldr	r3, [pc, #68]	; (8007e48 <USBD_SetConfig+0x118>)
 8007e02:	781b      	ldrb	r3, [r3, #0]
 8007e04:	4619      	mov	r1, r3
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f7ff f9a8 	bl	800715c <USBD_SetClassConfig>
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	2b02      	cmp	r3, #2
 8007e10:	d104      	bne.n	8007e1c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007e12:	6839      	ldr	r1, [r7, #0]
 8007e14:	6878      	ldr	r0, [r7, #4]
 8007e16:	f000 f8f2 	bl	8007ffe <USBD_CtlError>
            return;
 8007e1a:	e012      	b.n	8007e42 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	f000 f9b6 	bl	800818e <USBD_CtlSendStatus>
        break;
 8007e22:	e00e      	b.n	8007e42 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f000 f9b2 	bl	800818e <USBD_CtlSendStatus>
        break;
 8007e2a:	e00a      	b.n	8007e42 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007e2c:	6839      	ldr	r1, [r7, #0]
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f000 f8e5 	bl	8007ffe <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007e34:	4b04      	ldr	r3, [pc, #16]	; (8007e48 <USBD_SetConfig+0x118>)
 8007e36:	781b      	ldrb	r3, [r3, #0]
 8007e38:	4619      	mov	r1, r3
 8007e3a:	6878      	ldr	r0, [r7, #4]
 8007e3c:	f7ff f9ad 	bl	800719a <USBD_ClrClassConfig>
        break;
 8007e40:	bf00      	nop
    }
  }
}
 8007e42:	3708      	adds	r7, #8
 8007e44:	46bd      	mov	sp, r7
 8007e46:	bd80      	pop	{r7, pc}
 8007e48:	2000012c 	.word	0x2000012c

08007e4c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b082      	sub	sp, #8
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
 8007e54:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	88db      	ldrh	r3, [r3, #6]
 8007e5a:	2b01      	cmp	r3, #1
 8007e5c:	d004      	beq.n	8007e68 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007e5e:	6839      	ldr	r1, [r7, #0]
 8007e60:	6878      	ldr	r0, [r7, #4]
 8007e62:	f000 f8cc 	bl	8007ffe <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007e66:	e022      	b.n	8007eae <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e6e:	2b02      	cmp	r3, #2
 8007e70:	dc02      	bgt.n	8007e78 <USBD_GetConfig+0x2c>
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	dc03      	bgt.n	8007e7e <USBD_GetConfig+0x32>
 8007e76:	e015      	b.n	8007ea4 <USBD_GetConfig+0x58>
 8007e78:	2b03      	cmp	r3, #3
 8007e7a:	d00b      	beq.n	8007e94 <USBD_GetConfig+0x48>
 8007e7c:	e012      	b.n	8007ea4 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2200      	movs	r2, #0
 8007e82:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	3308      	adds	r3, #8
 8007e88:	2201      	movs	r2, #1
 8007e8a:	4619      	mov	r1, r3
 8007e8c:	6878      	ldr	r0, [r7, #4]
 8007e8e:	f000 f920 	bl	80080d2 <USBD_CtlSendData>
        break;
 8007e92:	e00c      	b.n	8007eae <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	3304      	adds	r3, #4
 8007e98:	2201      	movs	r2, #1
 8007e9a:	4619      	mov	r1, r3
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	f000 f918 	bl	80080d2 <USBD_CtlSendData>
        break;
 8007ea2:	e004      	b.n	8007eae <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007ea4:	6839      	ldr	r1, [r7, #0]
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	f000 f8a9 	bl	8007ffe <USBD_CtlError>
        break;
 8007eac:	bf00      	nop
}
 8007eae:	bf00      	nop
 8007eb0:	3708      	adds	r7, #8
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	bd80      	pop	{r7, pc}

08007eb6 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007eb6:	b580      	push	{r7, lr}
 8007eb8:	b082      	sub	sp, #8
 8007eba:	af00      	add	r7, sp, #0
 8007ebc:	6078      	str	r0, [r7, #4]
 8007ebe:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ec6:	3b01      	subs	r3, #1
 8007ec8:	2b02      	cmp	r3, #2
 8007eca:	d81e      	bhi.n	8007f0a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	88db      	ldrh	r3, [r3, #6]
 8007ed0:	2b02      	cmp	r3, #2
 8007ed2:	d004      	beq.n	8007ede <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007ed4:	6839      	ldr	r1, [r7, #0]
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	f000 f891 	bl	8007ffe <USBD_CtlError>
        break;
 8007edc:	e01a      	b.n	8007f14 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2201      	movs	r2, #1
 8007ee2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d005      	beq.n	8007efa <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	68db      	ldr	r3, [r3, #12]
 8007ef2:	f043 0202 	orr.w	r2, r3, #2
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	330c      	adds	r3, #12
 8007efe:	2202      	movs	r2, #2
 8007f00:	4619      	mov	r1, r3
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f000 f8e5 	bl	80080d2 <USBD_CtlSendData>
      break;
 8007f08:	e004      	b.n	8007f14 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007f0a:	6839      	ldr	r1, [r7, #0]
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	f000 f876 	bl	8007ffe <USBD_CtlError>
      break;
 8007f12:	bf00      	nop
  }
}
 8007f14:	bf00      	nop
 8007f16:	3708      	adds	r7, #8
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	bd80      	pop	{r7, pc}

08007f1c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b082      	sub	sp, #8
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
 8007f24:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	885b      	ldrh	r3, [r3, #2]
 8007f2a:	2b01      	cmp	r3, #1
 8007f2c:	d106      	bne.n	8007f3c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2201      	movs	r2, #1
 8007f32:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f000 f929 	bl	800818e <USBD_CtlSendStatus>
  }
}
 8007f3c:	bf00      	nop
 8007f3e:	3708      	adds	r7, #8
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bd80      	pop	{r7, pc}

08007f44 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b082      	sub	sp, #8
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
 8007f4c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f54:	3b01      	subs	r3, #1
 8007f56:	2b02      	cmp	r3, #2
 8007f58:	d80b      	bhi.n	8007f72 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	885b      	ldrh	r3, [r3, #2]
 8007f5e:	2b01      	cmp	r3, #1
 8007f60:	d10c      	bne.n	8007f7c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2200      	movs	r2, #0
 8007f66:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	f000 f90f 	bl	800818e <USBD_CtlSendStatus>
      }
      break;
 8007f70:	e004      	b.n	8007f7c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007f72:	6839      	ldr	r1, [r7, #0]
 8007f74:	6878      	ldr	r0, [r7, #4]
 8007f76:	f000 f842 	bl	8007ffe <USBD_CtlError>
      break;
 8007f7a:	e000      	b.n	8007f7e <USBD_ClrFeature+0x3a>
      break;
 8007f7c:	bf00      	nop
  }
}
 8007f7e:	bf00      	nop
 8007f80:	3708      	adds	r7, #8
 8007f82:	46bd      	mov	sp, r7
 8007f84:	bd80      	pop	{r7, pc}

08007f86 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007f86:	b480      	push	{r7}
 8007f88:	b083      	sub	sp, #12
 8007f8a:	af00      	add	r7, sp, #0
 8007f8c:	6078      	str	r0, [r7, #4]
 8007f8e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	781a      	ldrb	r2, [r3, #0]
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	785a      	ldrb	r2, [r3, #1]
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	3302      	adds	r3, #2
 8007fa4:	781b      	ldrb	r3, [r3, #0]
 8007fa6:	b29a      	uxth	r2, r3
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	3303      	adds	r3, #3
 8007fac:	781b      	ldrb	r3, [r3, #0]
 8007fae:	b29b      	uxth	r3, r3
 8007fb0:	021b      	lsls	r3, r3, #8
 8007fb2:	b29b      	uxth	r3, r3
 8007fb4:	4413      	add	r3, r2
 8007fb6:	b29a      	uxth	r2, r3
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	3304      	adds	r3, #4
 8007fc0:	781b      	ldrb	r3, [r3, #0]
 8007fc2:	b29a      	uxth	r2, r3
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	3305      	adds	r3, #5
 8007fc8:	781b      	ldrb	r3, [r3, #0]
 8007fca:	b29b      	uxth	r3, r3
 8007fcc:	021b      	lsls	r3, r3, #8
 8007fce:	b29b      	uxth	r3, r3
 8007fd0:	4413      	add	r3, r2
 8007fd2:	b29a      	uxth	r2, r3
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	3306      	adds	r3, #6
 8007fdc:	781b      	ldrb	r3, [r3, #0]
 8007fde:	b29a      	uxth	r2, r3
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	3307      	adds	r3, #7
 8007fe4:	781b      	ldrb	r3, [r3, #0]
 8007fe6:	b29b      	uxth	r3, r3
 8007fe8:	021b      	lsls	r3, r3, #8
 8007fea:	b29b      	uxth	r3, r3
 8007fec:	4413      	add	r3, r2
 8007fee:	b29a      	uxth	r2, r3
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	80da      	strh	r2, [r3, #6]

}
 8007ff4:	bf00      	nop
 8007ff6:	370c      	adds	r7, #12
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	bc80      	pop	{r7}
 8007ffc:	4770      	bx	lr

08007ffe <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007ffe:	b580      	push	{r7, lr}
 8008000:	b082      	sub	sp, #8
 8008002:	af00      	add	r7, sp, #0
 8008004:	6078      	str	r0, [r7, #4]
 8008006:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008008:	2180      	movs	r1, #128	; 0x80
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f000 fbba 	bl	8008784 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008010:	2100      	movs	r1, #0
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f000 fbb6 	bl	8008784 <USBD_LL_StallEP>
}
 8008018:	bf00      	nop
 800801a:	3708      	adds	r7, #8
 800801c:	46bd      	mov	sp, r7
 800801e:	bd80      	pop	{r7, pc}

08008020 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b086      	sub	sp, #24
 8008024:	af00      	add	r7, sp, #0
 8008026:	60f8      	str	r0, [r7, #12]
 8008028:	60b9      	str	r1, [r7, #8]
 800802a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800802c:	2300      	movs	r3, #0
 800802e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d032      	beq.n	800809c <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008036:	68f8      	ldr	r0, [r7, #12]
 8008038:	f000 f834 	bl	80080a4 <USBD_GetLen>
 800803c:	4603      	mov	r3, r0
 800803e:	3301      	adds	r3, #1
 8008040:	b29b      	uxth	r3, r3
 8008042:	005b      	lsls	r3, r3, #1
 8008044:	b29a      	uxth	r2, r3
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800804a:	7dfb      	ldrb	r3, [r7, #23]
 800804c:	1c5a      	adds	r2, r3, #1
 800804e:	75fa      	strb	r2, [r7, #23]
 8008050:	461a      	mov	r2, r3
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	4413      	add	r3, r2
 8008056:	687a      	ldr	r2, [r7, #4]
 8008058:	7812      	ldrb	r2, [r2, #0]
 800805a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800805c:	7dfb      	ldrb	r3, [r7, #23]
 800805e:	1c5a      	adds	r2, r3, #1
 8008060:	75fa      	strb	r2, [r7, #23]
 8008062:	461a      	mov	r2, r3
 8008064:	68bb      	ldr	r3, [r7, #8]
 8008066:	4413      	add	r3, r2
 8008068:	2203      	movs	r2, #3
 800806a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800806c:	e012      	b.n	8008094 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	1c5a      	adds	r2, r3, #1
 8008072:	60fa      	str	r2, [r7, #12]
 8008074:	7dfa      	ldrb	r2, [r7, #23]
 8008076:	1c51      	adds	r1, r2, #1
 8008078:	75f9      	strb	r1, [r7, #23]
 800807a:	4611      	mov	r1, r2
 800807c:	68ba      	ldr	r2, [r7, #8]
 800807e:	440a      	add	r2, r1
 8008080:	781b      	ldrb	r3, [r3, #0]
 8008082:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008084:	7dfb      	ldrb	r3, [r7, #23]
 8008086:	1c5a      	adds	r2, r3, #1
 8008088:	75fa      	strb	r2, [r7, #23]
 800808a:	461a      	mov	r2, r3
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	4413      	add	r3, r2
 8008090:	2200      	movs	r2, #0
 8008092:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	781b      	ldrb	r3, [r3, #0]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d1e8      	bne.n	800806e <USBD_GetString+0x4e>
    }
  }
}
 800809c:	bf00      	nop
 800809e:	3718      	adds	r7, #24
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}

080080a4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80080a4:	b480      	push	{r7}
 80080a6:	b085      	sub	sp, #20
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80080ac:	2300      	movs	r3, #0
 80080ae:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80080b0:	e005      	b.n	80080be <USBD_GetLen+0x1a>
  {
    len++;
 80080b2:	7bfb      	ldrb	r3, [r7, #15]
 80080b4:	3301      	adds	r3, #1
 80080b6:	73fb      	strb	r3, [r7, #15]
    buf++;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	3301      	adds	r3, #1
 80080bc:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	781b      	ldrb	r3, [r3, #0]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d1f5      	bne.n	80080b2 <USBD_GetLen+0xe>
  }

  return len;
 80080c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80080c8:	4618      	mov	r0, r3
 80080ca:	3714      	adds	r7, #20
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bc80      	pop	{r7}
 80080d0:	4770      	bx	lr

080080d2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80080d2:	b580      	push	{r7, lr}
 80080d4:	b084      	sub	sp, #16
 80080d6:	af00      	add	r7, sp, #0
 80080d8:	60f8      	str	r0, [r7, #12]
 80080da:	60b9      	str	r1, [r7, #8]
 80080dc:	4613      	mov	r3, r2
 80080de:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	2202      	movs	r2, #2
 80080e4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80080e8:	88fa      	ldrh	r2, [r7, #6]
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80080ee:	88fa      	ldrh	r2, [r7, #6]
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80080f4:	88fb      	ldrh	r3, [r7, #6]
 80080f6:	68ba      	ldr	r2, [r7, #8]
 80080f8:	2100      	movs	r1, #0
 80080fa:	68f8      	ldr	r0, [r7, #12]
 80080fc:	f000 fbcb 	bl	8008896 <USBD_LL_Transmit>

  return USBD_OK;
 8008100:	2300      	movs	r3, #0
}
 8008102:	4618      	mov	r0, r3
 8008104:	3710      	adds	r7, #16
 8008106:	46bd      	mov	sp, r7
 8008108:	bd80      	pop	{r7, pc}

0800810a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800810a:	b580      	push	{r7, lr}
 800810c:	b084      	sub	sp, #16
 800810e:	af00      	add	r7, sp, #0
 8008110:	60f8      	str	r0, [r7, #12]
 8008112:	60b9      	str	r1, [r7, #8]
 8008114:	4613      	mov	r3, r2
 8008116:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008118:	88fb      	ldrh	r3, [r7, #6]
 800811a:	68ba      	ldr	r2, [r7, #8]
 800811c:	2100      	movs	r1, #0
 800811e:	68f8      	ldr	r0, [r7, #12]
 8008120:	f000 fbb9 	bl	8008896 <USBD_LL_Transmit>

  return USBD_OK;
 8008124:	2300      	movs	r3, #0
}
 8008126:	4618      	mov	r0, r3
 8008128:	3710      	adds	r7, #16
 800812a:	46bd      	mov	sp, r7
 800812c:	bd80      	pop	{r7, pc}

0800812e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800812e:	b580      	push	{r7, lr}
 8008130:	b084      	sub	sp, #16
 8008132:	af00      	add	r7, sp, #0
 8008134:	60f8      	str	r0, [r7, #12]
 8008136:	60b9      	str	r1, [r7, #8]
 8008138:	4613      	mov	r3, r2
 800813a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	2203      	movs	r2, #3
 8008140:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008144:	88fa      	ldrh	r2, [r7, #6]
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800814c:	88fa      	ldrh	r2, [r7, #6]
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008154:	88fb      	ldrh	r3, [r7, #6]
 8008156:	68ba      	ldr	r2, [r7, #8]
 8008158:	2100      	movs	r1, #0
 800815a:	68f8      	ldr	r0, [r7, #12]
 800815c:	f000 fbbe 	bl	80088dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008160:	2300      	movs	r3, #0
}
 8008162:	4618      	mov	r0, r3
 8008164:	3710      	adds	r7, #16
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}

0800816a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800816a:	b580      	push	{r7, lr}
 800816c:	b084      	sub	sp, #16
 800816e:	af00      	add	r7, sp, #0
 8008170:	60f8      	str	r0, [r7, #12]
 8008172:	60b9      	str	r1, [r7, #8]
 8008174:	4613      	mov	r3, r2
 8008176:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008178:	88fb      	ldrh	r3, [r7, #6]
 800817a:	68ba      	ldr	r2, [r7, #8]
 800817c:	2100      	movs	r1, #0
 800817e:	68f8      	ldr	r0, [r7, #12]
 8008180:	f000 fbac 	bl	80088dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008184:	2300      	movs	r3, #0
}
 8008186:	4618      	mov	r0, r3
 8008188:	3710      	adds	r7, #16
 800818a:	46bd      	mov	sp, r7
 800818c:	bd80      	pop	{r7, pc}

0800818e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800818e:	b580      	push	{r7, lr}
 8008190:	b082      	sub	sp, #8
 8008192:	af00      	add	r7, sp, #0
 8008194:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2204      	movs	r2, #4
 800819a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800819e:	2300      	movs	r3, #0
 80081a0:	2200      	movs	r2, #0
 80081a2:	2100      	movs	r1, #0
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	f000 fb76 	bl	8008896 <USBD_LL_Transmit>

  return USBD_OK;
 80081aa:	2300      	movs	r3, #0
}
 80081ac:	4618      	mov	r0, r3
 80081ae:	3708      	adds	r7, #8
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bd80      	pop	{r7, pc}

080081b4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b082      	sub	sp, #8
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2205      	movs	r2, #5
 80081c0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80081c4:	2300      	movs	r3, #0
 80081c6:	2200      	movs	r2, #0
 80081c8:	2100      	movs	r1, #0
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f000 fb86 	bl	80088dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 80081d0:	2300      	movs	r3, #0
}
 80081d2:	4618      	mov	r0, r3
 80081d4:	3708      	adds	r7, #8
 80081d6:	46bd      	mov	sp, r7
 80081d8:	bd80      	pop	{r7, pc}
	...

080081dc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80081e0:	2200      	movs	r2, #0
 80081e2:	4912      	ldr	r1, [pc, #72]	; (800822c <MX_USB_DEVICE_Init+0x50>)
 80081e4:	4812      	ldr	r0, [pc, #72]	; (8008230 <MX_USB_DEVICE_Init+0x54>)
 80081e6:	f7fe ff5f 	bl	80070a8 <USBD_Init>
 80081ea:	4603      	mov	r3, r0
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d001      	beq.n	80081f4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80081f0:	f7f8 fa52 	bl	8000698 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 80081f4:	490f      	ldr	r1, [pc, #60]	; (8008234 <MX_USB_DEVICE_Init+0x58>)
 80081f6:	480e      	ldr	r0, [pc, #56]	; (8008230 <MX_USB_DEVICE_Init+0x54>)
 80081f8:	f7fe ff81 	bl	80070fe <USBD_RegisterClass>
 80081fc:	4603      	mov	r3, r0
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d001      	beq.n	8008206 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008202:	f7f8 fa49 	bl	8000698 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 8008206:	490c      	ldr	r1, [pc, #48]	; (8008238 <MX_USB_DEVICE_Init+0x5c>)
 8008208:	4809      	ldr	r0, [pc, #36]	; (8008230 <MX_USB_DEVICE_Init+0x54>)
 800820a:	f7fe ff37 	bl	800707c <USBD_CUSTOM_HID_RegisterInterface>
 800820e:	4603      	mov	r3, r0
 8008210:	2b00      	cmp	r3, #0
 8008212:	d001      	beq.n	8008218 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008214:	f7f8 fa40 	bl	8000698 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008218:	4805      	ldr	r0, [pc, #20]	; (8008230 <MX_USB_DEVICE_Init+0x54>)
 800821a:	f7fe ff89 	bl	8007130 <USBD_Start>
 800821e:	4603      	mov	r3, r0
 8008220:	2b00      	cmp	r3, #0
 8008222:	d001      	beq.n	8008228 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008224:	f7f8 fa38 	bl	8000698 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008228:	bf00      	nop
 800822a:	bd80      	pop	{r7, pc}
 800822c:	200000c0 	.word	0x200000c0
 8008230:	200002bc 	.word	0x200002bc
 8008234:	2000000c 	.word	0x2000000c
 8008238:	200000b0 	.word	0x200000b0

0800823c <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 800823c:	b480      	push	{r7}
 800823e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008240:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008242:	4618      	mov	r0, r3
 8008244:	46bd      	mov	sp, r7
 8008246:	bc80      	pop	{r7}
 8008248:	4770      	bx	lr

0800824a <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 800824a:	b480      	push	{r7}
 800824c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 800824e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008250:	4618      	mov	r0, r3
 8008252:	46bd      	mov	sp, r7
 8008254:	bc80      	pop	{r7}
 8008256:	4770      	bx	lr

08008258 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 8008258:	b480      	push	{r7}
 800825a:	b083      	sub	sp, #12
 800825c:	af00      	add	r7, sp, #0
 800825e:	4603      	mov	r3, r0
 8008260:	460a      	mov	r2, r1
 8008262:	71fb      	strb	r3, [r7, #7]
 8008264:	4613      	mov	r3, r2
 8008266:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 8008268:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800826a:	4618      	mov	r0, r3
 800826c:	370c      	adds	r7, #12
 800826e:	46bd      	mov	sp, r7
 8008270:	bc80      	pop	{r7}
 8008272:	4770      	bx	lr

08008274 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008274:	b480      	push	{r7}
 8008276:	b083      	sub	sp, #12
 8008278:	af00      	add	r7, sp, #0
 800827a:	4603      	mov	r3, r0
 800827c:	6039      	str	r1, [r7, #0]
 800827e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	2212      	movs	r2, #18
 8008284:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008286:	4b03      	ldr	r3, [pc, #12]	; (8008294 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008288:	4618      	mov	r0, r3
 800828a:	370c      	adds	r7, #12
 800828c:	46bd      	mov	sp, r7
 800828e:	bc80      	pop	{r7}
 8008290:	4770      	bx	lr
 8008292:	bf00      	nop
 8008294:	200000dc 	.word	0x200000dc

08008298 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008298:	b480      	push	{r7}
 800829a:	b083      	sub	sp, #12
 800829c:	af00      	add	r7, sp, #0
 800829e:	4603      	mov	r3, r0
 80082a0:	6039      	str	r1, [r7, #0]
 80082a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	2204      	movs	r2, #4
 80082a8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80082aa:	4b03      	ldr	r3, [pc, #12]	; (80082b8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80082ac:	4618      	mov	r0, r3
 80082ae:	370c      	adds	r7, #12
 80082b0:	46bd      	mov	sp, r7
 80082b2:	bc80      	pop	{r7}
 80082b4:	4770      	bx	lr
 80082b6:	bf00      	nop
 80082b8:	200000f0 	.word	0x200000f0

080082bc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b082      	sub	sp, #8
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	4603      	mov	r3, r0
 80082c4:	6039      	str	r1, [r7, #0]
 80082c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80082c8:	79fb      	ldrb	r3, [r7, #7]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d105      	bne.n	80082da <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80082ce:	683a      	ldr	r2, [r7, #0]
 80082d0:	4907      	ldr	r1, [pc, #28]	; (80082f0 <USBD_FS_ProductStrDescriptor+0x34>)
 80082d2:	4808      	ldr	r0, [pc, #32]	; (80082f4 <USBD_FS_ProductStrDescriptor+0x38>)
 80082d4:	f7ff fea4 	bl	8008020 <USBD_GetString>
 80082d8:	e004      	b.n	80082e4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80082da:	683a      	ldr	r2, [r7, #0]
 80082dc:	4904      	ldr	r1, [pc, #16]	; (80082f0 <USBD_FS_ProductStrDescriptor+0x34>)
 80082de:	4805      	ldr	r0, [pc, #20]	; (80082f4 <USBD_FS_ProductStrDescriptor+0x38>)
 80082e0:	f7ff fe9e 	bl	8008020 <USBD_GetString>
  }
  return USBD_StrDesc;
 80082e4:	4b02      	ldr	r3, [pc, #8]	; (80082f0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80082e6:	4618      	mov	r0, r3
 80082e8:	3708      	adds	r7, #8
 80082ea:	46bd      	mov	sp, r7
 80082ec:	bd80      	pop	{r7, pc}
 80082ee:	bf00      	nop
 80082f0:	20000580 	.word	0x20000580
 80082f4:	08008a3c 	.word	0x08008a3c

080082f8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b082      	sub	sp, #8
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	4603      	mov	r3, r0
 8008300:	6039      	str	r1, [r7, #0]
 8008302:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008304:	683a      	ldr	r2, [r7, #0]
 8008306:	4904      	ldr	r1, [pc, #16]	; (8008318 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008308:	4804      	ldr	r0, [pc, #16]	; (800831c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800830a:	f7ff fe89 	bl	8008020 <USBD_GetString>
  return USBD_StrDesc;
 800830e:	4b02      	ldr	r3, [pc, #8]	; (8008318 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008310:	4618      	mov	r0, r3
 8008312:	3708      	adds	r7, #8
 8008314:	46bd      	mov	sp, r7
 8008316:	bd80      	pop	{r7, pc}
 8008318:	20000580 	.word	0x20000580
 800831c:	08008a5c 	.word	0x08008a5c

08008320 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b082      	sub	sp, #8
 8008324:	af00      	add	r7, sp, #0
 8008326:	4603      	mov	r3, r0
 8008328:	6039      	str	r1, [r7, #0]
 800832a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	221a      	movs	r2, #26
 8008330:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008332:	f000 f843 	bl	80083bc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008336:	4b02      	ldr	r3, [pc, #8]	; (8008340 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008338:	4618      	mov	r0, r3
 800833a:	3708      	adds	r7, #8
 800833c:	46bd      	mov	sp, r7
 800833e:	bd80      	pop	{r7, pc}
 8008340:	200000f4 	.word	0x200000f4

08008344 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b082      	sub	sp, #8
 8008348:	af00      	add	r7, sp, #0
 800834a:	4603      	mov	r3, r0
 800834c:	6039      	str	r1, [r7, #0]
 800834e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008350:	79fb      	ldrb	r3, [r7, #7]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d105      	bne.n	8008362 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008356:	683a      	ldr	r2, [r7, #0]
 8008358:	4907      	ldr	r1, [pc, #28]	; (8008378 <USBD_FS_ConfigStrDescriptor+0x34>)
 800835a:	4808      	ldr	r0, [pc, #32]	; (800837c <USBD_FS_ConfigStrDescriptor+0x38>)
 800835c:	f7ff fe60 	bl	8008020 <USBD_GetString>
 8008360:	e004      	b.n	800836c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008362:	683a      	ldr	r2, [r7, #0]
 8008364:	4904      	ldr	r1, [pc, #16]	; (8008378 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008366:	4805      	ldr	r0, [pc, #20]	; (800837c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008368:	f7ff fe5a 	bl	8008020 <USBD_GetString>
  }
  return USBD_StrDesc;
 800836c:	4b02      	ldr	r3, [pc, #8]	; (8008378 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800836e:	4618      	mov	r0, r3
 8008370:	3708      	adds	r7, #8
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}
 8008376:	bf00      	nop
 8008378:	20000580 	.word	0x20000580
 800837c:	08008a70 	.word	0x08008a70

08008380 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b082      	sub	sp, #8
 8008384:	af00      	add	r7, sp, #0
 8008386:	4603      	mov	r3, r0
 8008388:	6039      	str	r1, [r7, #0]
 800838a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800838c:	79fb      	ldrb	r3, [r7, #7]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d105      	bne.n	800839e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008392:	683a      	ldr	r2, [r7, #0]
 8008394:	4907      	ldr	r1, [pc, #28]	; (80083b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008396:	4808      	ldr	r0, [pc, #32]	; (80083b8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008398:	f7ff fe42 	bl	8008020 <USBD_GetString>
 800839c:	e004      	b.n	80083a8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800839e:	683a      	ldr	r2, [r7, #0]
 80083a0:	4904      	ldr	r1, [pc, #16]	; (80083b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80083a2:	4805      	ldr	r0, [pc, #20]	; (80083b8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80083a4:	f7ff fe3c 	bl	8008020 <USBD_GetString>
  }
  return USBD_StrDesc;
 80083a8:	4b02      	ldr	r3, [pc, #8]	; (80083b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80083aa:	4618      	mov	r0, r3
 80083ac:	3708      	adds	r7, #8
 80083ae:	46bd      	mov	sp, r7
 80083b0:	bd80      	pop	{r7, pc}
 80083b2:	bf00      	nop
 80083b4:	20000580 	.word	0x20000580
 80083b8:	08008a84 	.word	0x08008a84

080083bc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b084      	sub	sp, #16
 80083c0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80083c2:	4b0f      	ldr	r3, [pc, #60]	; (8008400 <Get_SerialNum+0x44>)
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80083c8:	4b0e      	ldr	r3, [pc, #56]	; (8008404 <Get_SerialNum+0x48>)
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80083ce:	4b0e      	ldr	r3, [pc, #56]	; (8008408 <Get_SerialNum+0x4c>)
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80083d4:	68fa      	ldr	r2, [r7, #12]
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	4413      	add	r3, r2
 80083da:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d009      	beq.n	80083f6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80083e2:	2208      	movs	r2, #8
 80083e4:	4909      	ldr	r1, [pc, #36]	; (800840c <Get_SerialNum+0x50>)
 80083e6:	68f8      	ldr	r0, [r7, #12]
 80083e8:	f000 f814 	bl	8008414 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80083ec:	2204      	movs	r2, #4
 80083ee:	4908      	ldr	r1, [pc, #32]	; (8008410 <Get_SerialNum+0x54>)
 80083f0:	68b8      	ldr	r0, [r7, #8]
 80083f2:	f000 f80f 	bl	8008414 <IntToUnicode>
  }
}
 80083f6:	bf00      	nop
 80083f8:	3710      	adds	r7, #16
 80083fa:	46bd      	mov	sp, r7
 80083fc:	bd80      	pop	{r7, pc}
 80083fe:	bf00      	nop
 8008400:	1ffff7e8 	.word	0x1ffff7e8
 8008404:	1ffff7ec 	.word	0x1ffff7ec
 8008408:	1ffff7f0 	.word	0x1ffff7f0
 800840c:	200000f6 	.word	0x200000f6
 8008410:	20000106 	.word	0x20000106

08008414 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008414:	b480      	push	{r7}
 8008416:	b087      	sub	sp, #28
 8008418:	af00      	add	r7, sp, #0
 800841a:	60f8      	str	r0, [r7, #12]
 800841c:	60b9      	str	r1, [r7, #8]
 800841e:	4613      	mov	r3, r2
 8008420:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008422:	2300      	movs	r3, #0
 8008424:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008426:	2300      	movs	r3, #0
 8008428:	75fb      	strb	r3, [r7, #23]
 800842a:	e027      	b.n	800847c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	0f1b      	lsrs	r3, r3, #28
 8008430:	2b09      	cmp	r3, #9
 8008432:	d80b      	bhi.n	800844c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	0f1b      	lsrs	r3, r3, #28
 8008438:	b2da      	uxtb	r2, r3
 800843a:	7dfb      	ldrb	r3, [r7, #23]
 800843c:	005b      	lsls	r3, r3, #1
 800843e:	4619      	mov	r1, r3
 8008440:	68bb      	ldr	r3, [r7, #8]
 8008442:	440b      	add	r3, r1
 8008444:	3230      	adds	r2, #48	; 0x30
 8008446:	b2d2      	uxtb	r2, r2
 8008448:	701a      	strb	r2, [r3, #0]
 800844a:	e00a      	b.n	8008462 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	0f1b      	lsrs	r3, r3, #28
 8008450:	b2da      	uxtb	r2, r3
 8008452:	7dfb      	ldrb	r3, [r7, #23]
 8008454:	005b      	lsls	r3, r3, #1
 8008456:	4619      	mov	r1, r3
 8008458:	68bb      	ldr	r3, [r7, #8]
 800845a:	440b      	add	r3, r1
 800845c:	3237      	adds	r2, #55	; 0x37
 800845e:	b2d2      	uxtb	r2, r2
 8008460:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	011b      	lsls	r3, r3, #4
 8008466:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008468:	7dfb      	ldrb	r3, [r7, #23]
 800846a:	005b      	lsls	r3, r3, #1
 800846c:	3301      	adds	r3, #1
 800846e:	68ba      	ldr	r2, [r7, #8]
 8008470:	4413      	add	r3, r2
 8008472:	2200      	movs	r2, #0
 8008474:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008476:	7dfb      	ldrb	r3, [r7, #23]
 8008478:	3301      	adds	r3, #1
 800847a:	75fb      	strb	r3, [r7, #23]
 800847c:	7dfa      	ldrb	r2, [r7, #23]
 800847e:	79fb      	ldrb	r3, [r7, #7]
 8008480:	429a      	cmp	r2, r3
 8008482:	d3d3      	bcc.n	800842c <IntToUnicode+0x18>
  }
}
 8008484:	bf00      	nop
 8008486:	bf00      	nop
 8008488:	371c      	adds	r7, #28
 800848a:	46bd      	mov	sp, r7
 800848c:	bc80      	pop	{r7}
 800848e:	4770      	bx	lr

08008490 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b084      	sub	sp, #16
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	4a11      	ldr	r2, [pc, #68]	; (80084e4 <HAL_PCD_MspInit+0x54>)
 800849e:	4293      	cmp	r3, r2
 80084a0:	d11b      	bne.n	80084da <HAL_PCD_MspInit+0x4a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80084a2:	4b11      	ldr	r3, [pc, #68]	; (80084e8 <HAL_PCD_MspInit+0x58>)
 80084a4:	69db      	ldr	r3, [r3, #28]
 80084a6:	4a10      	ldr	r2, [pc, #64]	; (80084e8 <HAL_PCD_MspInit+0x58>)
 80084a8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80084ac:	61d3      	str	r3, [r2, #28]
 80084ae:	4b0e      	ldr	r3, [pc, #56]	; (80084e8 <HAL_PCD_MspInit+0x58>)
 80084b0:	69db      	ldr	r3, [r3, #28]
 80084b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80084b6:	60fb      	str	r3, [r7, #12]
 80084b8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_IRQn, 0, 0);
 80084ba:	2200      	movs	r2, #0
 80084bc:	2100      	movs	r1, #0
 80084be:	2013      	movs	r0, #19
 80084c0:	f7f8 fb61 	bl	8000b86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_IRQn);
 80084c4:	2013      	movs	r0, #19
 80084c6:	f7f8 fb7a 	bl	8000bbe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 80084ca:	2200      	movs	r2, #0
 80084cc:	2100      	movs	r1, #0
 80084ce:	2014      	movs	r0, #20
 80084d0:	f7f8 fb59 	bl	8000b86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 80084d4:	2014      	movs	r0, #20
 80084d6:	f7f8 fb72 	bl	8000bbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80084da:	bf00      	nop
 80084dc:	3710      	adds	r7, #16
 80084de:	46bd      	mov	sp, r7
 80084e0:	bd80      	pop	{r7, pc}
 80084e2:	bf00      	nop
 80084e4:	40005c00 	.word	0x40005c00
 80084e8:	40021000 	.word	0x40021000

080084ec <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b082      	sub	sp, #8
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8008500:	4619      	mov	r1, r3
 8008502:	4610      	mov	r0, r2
 8008504:	f7fe fe5c 	bl	80071c0 <USBD_LL_SetupStage>
}
 8008508:	bf00      	nop
 800850a:	3708      	adds	r7, #8
 800850c:	46bd      	mov	sp, r7
 800850e:	bd80      	pop	{r7, pc}

08008510 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b082      	sub	sp, #8
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
 8008518:	460b      	mov	r3, r1
 800851a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8008522:	78fa      	ldrb	r2, [r7, #3]
 8008524:	6879      	ldr	r1, [r7, #4]
 8008526:	4613      	mov	r3, r2
 8008528:	009b      	lsls	r3, r3, #2
 800852a:	4413      	add	r3, r2
 800852c:	00db      	lsls	r3, r3, #3
 800852e:	440b      	add	r3, r1
 8008530:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8008534:	681a      	ldr	r2, [r3, #0]
 8008536:	78fb      	ldrb	r3, [r7, #3]
 8008538:	4619      	mov	r1, r3
 800853a:	f7fe fe8e 	bl	800725a <USBD_LL_DataOutStage>
}
 800853e:	bf00      	nop
 8008540:	3708      	adds	r7, #8
 8008542:	46bd      	mov	sp, r7
 8008544:	bd80      	pop	{r7, pc}

08008546 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008546:	b580      	push	{r7, lr}
 8008548:	b082      	sub	sp, #8
 800854a:	af00      	add	r7, sp, #0
 800854c:	6078      	str	r0, [r7, #4]
 800854e:	460b      	mov	r3, r1
 8008550:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8008558:	78fa      	ldrb	r2, [r7, #3]
 800855a:	6879      	ldr	r1, [r7, #4]
 800855c:	4613      	mov	r3, r2
 800855e:	009b      	lsls	r3, r3, #2
 8008560:	4413      	add	r3, r2
 8008562:	00db      	lsls	r3, r3, #3
 8008564:	440b      	add	r3, r1
 8008566:	333c      	adds	r3, #60	; 0x3c
 8008568:	681a      	ldr	r2, [r3, #0]
 800856a:	78fb      	ldrb	r3, [r7, #3]
 800856c:	4619      	mov	r1, r3
 800856e:	f7fe fee5 	bl	800733c <USBD_LL_DataInStage>
}
 8008572:	bf00      	nop
 8008574:	3708      	adds	r7, #8
 8008576:	46bd      	mov	sp, r7
 8008578:	bd80      	pop	{r7, pc}

0800857a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800857a:	b580      	push	{r7, lr}
 800857c:	b082      	sub	sp, #8
 800857e:	af00      	add	r7, sp, #0
 8008580:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008588:	4618      	mov	r0, r3
 800858a:	f7fe fff5 	bl	8007578 <USBD_LL_SOF>
}
 800858e:	bf00      	nop
 8008590:	3708      	adds	r7, #8
 8008592:	46bd      	mov	sp, r7
 8008594:	bd80      	pop	{r7, pc}

08008596 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008596:	b580      	push	{r7, lr}
 8008598:	b084      	sub	sp, #16
 800859a:	af00      	add	r7, sp, #0
 800859c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800859e:	2301      	movs	r3, #1
 80085a0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	689b      	ldr	r3, [r3, #8]
 80085a6:	2b02      	cmp	r3, #2
 80085a8:	d001      	beq.n	80085ae <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80085aa:	f7f8 f875 	bl	8000698 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80085b4:	7bfa      	ldrb	r2, [r7, #15]
 80085b6:	4611      	mov	r1, r2
 80085b8:	4618      	mov	r0, r3
 80085ba:	f7fe ffa5 	bl	8007508 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80085c4:	4618      	mov	r0, r3
 80085c6:	f7fe ff5e 	bl	8007486 <USBD_LL_Reset>
}
 80085ca:	bf00      	nop
 80085cc:	3710      	adds	r7, #16
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bd80      	pop	{r7, pc}
	...

080085d4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b082      	sub	sp, #8
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80085e2:	4618      	mov	r0, r3
 80085e4:	f7fe ff9f 	bl	8007526 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	699b      	ldr	r3, [r3, #24]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d005      	beq.n	80085fc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80085f0:	4b04      	ldr	r3, [pc, #16]	; (8008604 <HAL_PCD_SuspendCallback+0x30>)
 80085f2:	691b      	ldr	r3, [r3, #16]
 80085f4:	4a03      	ldr	r2, [pc, #12]	; (8008604 <HAL_PCD_SuspendCallback+0x30>)
 80085f6:	f043 0306 	orr.w	r3, r3, #6
 80085fa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80085fc:	bf00      	nop
 80085fe:	3708      	adds	r7, #8
 8008600:	46bd      	mov	sp, r7
 8008602:	bd80      	pop	{r7, pc}
 8008604:	e000ed00 	.word	0xe000ed00

08008608 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b082      	sub	sp, #8
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008616:	4618      	mov	r0, r3
 8008618:	f7fe ff99 	bl	800754e <USBD_LL_Resume>
}
 800861c:	bf00      	nop
 800861e:	3708      	adds	r7, #8
 8008620:	46bd      	mov	sp, r7
 8008622:	bd80      	pop	{r7, pc}

08008624 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b082      	sub	sp, #8
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800862c:	4a23      	ldr	r2, [pc, #140]	; (80086bc <USBD_LL_Init+0x98>)
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	4a21      	ldr	r2, [pc, #132]	; (80086bc <USBD_LL_Init+0x98>)
 8008638:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800863c:	4b1f      	ldr	r3, [pc, #124]	; (80086bc <USBD_LL_Init+0x98>)
 800863e:	4a20      	ldr	r2, [pc, #128]	; (80086c0 <USBD_LL_Init+0x9c>)
 8008640:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008642:	4b1e      	ldr	r3, [pc, #120]	; (80086bc <USBD_LL_Init+0x98>)
 8008644:	2208      	movs	r2, #8
 8008646:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008648:	4b1c      	ldr	r3, [pc, #112]	; (80086bc <USBD_LL_Init+0x98>)
 800864a:	2202      	movs	r2, #2
 800864c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800864e:	4b1b      	ldr	r3, [pc, #108]	; (80086bc <USBD_LL_Init+0x98>)
 8008650:	2200      	movs	r2, #0
 8008652:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008654:	4b19      	ldr	r3, [pc, #100]	; (80086bc <USBD_LL_Init+0x98>)
 8008656:	2200      	movs	r2, #0
 8008658:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800865a:	4b18      	ldr	r3, [pc, #96]	; (80086bc <USBD_LL_Init+0x98>)
 800865c:	2200      	movs	r2, #0
 800865e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008660:	4816      	ldr	r0, [pc, #88]	; (80086bc <USBD_LL_Init+0x98>)
 8008662:	f7f8 fc59 	bl	8000f18 <HAL_PCD_Init>
 8008666:	4603      	mov	r3, r0
 8008668:	2b00      	cmp	r3, #0
 800866a:	d001      	beq.n	8008670 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800866c:	f7f8 f814 	bl	8000698 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008676:	2318      	movs	r3, #24
 8008678:	2200      	movs	r2, #0
 800867a:	2100      	movs	r1, #0
 800867c:	f7fa f8b8 	bl	80027f0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008686:	2358      	movs	r3, #88	; 0x58
 8008688:	2200      	movs	r2, #0
 800868a:	2180      	movs	r1, #128	; 0x80
 800868c:	f7fa f8b0 	bl	80027f0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CUSTOM_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPIN_ADDR , PCD_SNG_BUF, 0x98);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008696:	2398      	movs	r3, #152	; 0x98
 8008698:	2200      	movs	r2, #0
 800869a:	2181      	movs	r1, #129	; 0x81
 800869c:	f7fa f8a8 	bl	80027f0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPOUT_ADDR , PCD_SNG_BUF, 0xD8);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80086a6:	23d8      	movs	r3, #216	; 0xd8
 80086a8:	2200      	movs	r2, #0
 80086aa:	2101      	movs	r1, #1
 80086ac:	f7fa f8a0 	bl	80027f0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CUSTOM_HID */
  return USBD_OK;
 80086b0:	2300      	movs	r3, #0
}
 80086b2:	4618      	mov	r0, r3
 80086b4:	3708      	adds	r7, #8
 80086b6:	46bd      	mov	sp, r7
 80086b8:	bd80      	pop	{r7, pc}
 80086ba:	bf00      	nop
 80086bc:	20000780 	.word	0x20000780
 80086c0:	40005c00 	.word	0x40005c00

080086c4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b084      	sub	sp, #16
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086cc:	2300      	movs	r3, #0
 80086ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086d0:	2300      	movs	r3, #0
 80086d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80086da:	4618      	mov	r0, r3
 80086dc:	f7f8 fd27 	bl	800112e <HAL_PCD_Start>
 80086e0:	4603      	mov	r3, r0
 80086e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80086e4:	7bfb      	ldrb	r3, [r7, #15]
 80086e6:	4618      	mov	r0, r3
 80086e8:	f000 f93c 	bl	8008964 <USBD_Get_USB_Status>
 80086ec:	4603      	mov	r3, r0
 80086ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80086f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80086f2:	4618      	mov	r0, r3
 80086f4:	3710      	adds	r7, #16
 80086f6:	46bd      	mov	sp, r7
 80086f8:	bd80      	pop	{r7, pc}

080086fa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80086fa:	b580      	push	{r7, lr}
 80086fc:	b084      	sub	sp, #16
 80086fe:	af00      	add	r7, sp, #0
 8008700:	6078      	str	r0, [r7, #4]
 8008702:	4608      	mov	r0, r1
 8008704:	4611      	mov	r1, r2
 8008706:	461a      	mov	r2, r3
 8008708:	4603      	mov	r3, r0
 800870a:	70fb      	strb	r3, [r7, #3]
 800870c:	460b      	mov	r3, r1
 800870e:	70bb      	strb	r3, [r7, #2]
 8008710:	4613      	mov	r3, r2
 8008712:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008714:	2300      	movs	r3, #0
 8008716:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008718:	2300      	movs	r3, #0
 800871a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008722:	78bb      	ldrb	r3, [r7, #2]
 8008724:	883a      	ldrh	r2, [r7, #0]
 8008726:	78f9      	ldrb	r1, [r7, #3]
 8008728:	f7f8 fea1 	bl	800146e <HAL_PCD_EP_Open>
 800872c:	4603      	mov	r3, r0
 800872e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008730:	7bfb      	ldrb	r3, [r7, #15]
 8008732:	4618      	mov	r0, r3
 8008734:	f000 f916 	bl	8008964 <USBD_Get_USB_Status>
 8008738:	4603      	mov	r3, r0
 800873a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800873c:	7bbb      	ldrb	r3, [r7, #14]
}
 800873e:	4618      	mov	r0, r3
 8008740:	3710      	adds	r7, #16
 8008742:	46bd      	mov	sp, r7
 8008744:	bd80      	pop	{r7, pc}

08008746 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008746:	b580      	push	{r7, lr}
 8008748:	b084      	sub	sp, #16
 800874a:	af00      	add	r7, sp, #0
 800874c:	6078      	str	r0, [r7, #4]
 800874e:	460b      	mov	r3, r1
 8008750:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008752:	2300      	movs	r3, #0
 8008754:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008756:	2300      	movs	r3, #0
 8008758:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008760:	78fa      	ldrb	r2, [r7, #3]
 8008762:	4611      	mov	r1, r2
 8008764:	4618      	mov	r0, r3
 8008766:	f7f8 fee8 	bl	800153a <HAL_PCD_EP_Close>
 800876a:	4603      	mov	r3, r0
 800876c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800876e:	7bfb      	ldrb	r3, [r7, #15]
 8008770:	4618      	mov	r0, r3
 8008772:	f000 f8f7 	bl	8008964 <USBD_Get_USB_Status>
 8008776:	4603      	mov	r3, r0
 8008778:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800877a:	7bbb      	ldrb	r3, [r7, #14]
}
 800877c:	4618      	mov	r0, r3
 800877e:	3710      	adds	r7, #16
 8008780:	46bd      	mov	sp, r7
 8008782:	bd80      	pop	{r7, pc}

08008784 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b084      	sub	sp, #16
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
 800878c:	460b      	mov	r3, r1
 800878e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008790:	2300      	movs	r3, #0
 8008792:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008794:	2300      	movs	r3, #0
 8008796:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800879e:	78fa      	ldrb	r2, [r7, #3]
 80087a0:	4611      	mov	r1, r2
 80087a2:	4618      	mov	r0, r3
 80087a4:	f7f8 ff91 	bl	80016ca <HAL_PCD_EP_SetStall>
 80087a8:	4603      	mov	r3, r0
 80087aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80087ac:	7bfb      	ldrb	r3, [r7, #15]
 80087ae:	4618      	mov	r0, r3
 80087b0:	f000 f8d8 	bl	8008964 <USBD_Get_USB_Status>
 80087b4:	4603      	mov	r3, r0
 80087b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80087b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80087ba:	4618      	mov	r0, r3
 80087bc:	3710      	adds	r7, #16
 80087be:	46bd      	mov	sp, r7
 80087c0:	bd80      	pop	{r7, pc}

080087c2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80087c2:	b580      	push	{r7, lr}
 80087c4:	b084      	sub	sp, #16
 80087c6:	af00      	add	r7, sp, #0
 80087c8:	6078      	str	r0, [r7, #4]
 80087ca:	460b      	mov	r3, r1
 80087cc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087ce:	2300      	movs	r3, #0
 80087d0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087d2:	2300      	movs	r3, #0
 80087d4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80087dc:	78fa      	ldrb	r2, [r7, #3]
 80087de:	4611      	mov	r1, r2
 80087e0:	4618      	mov	r0, r3
 80087e2:	f7f8 ffd2 	bl	800178a <HAL_PCD_EP_ClrStall>
 80087e6:	4603      	mov	r3, r0
 80087e8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80087ea:	7bfb      	ldrb	r3, [r7, #15]
 80087ec:	4618      	mov	r0, r3
 80087ee:	f000 f8b9 	bl	8008964 <USBD_Get_USB_Status>
 80087f2:	4603      	mov	r3, r0
 80087f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80087f6:	7bbb      	ldrb	r3, [r7, #14]
}
 80087f8:	4618      	mov	r0, r3
 80087fa:	3710      	adds	r7, #16
 80087fc:	46bd      	mov	sp, r7
 80087fe:	bd80      	pop	{r7, pc}

08008800 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008800:	b480      	push	{r7}
 8008802:	b085      	sub	sp, #20
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
 8008808:	460b      	mov	r3, r1
 800880a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008812:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008814:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008818:	2b00      	cmp	r3, #0
 800881a:	da0c      	bge.n	8008836 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800881c:	78fb      	ldrb	r3, [r7, #3]
 800881e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008822:	68f9      	ldr	r1, [r7, #12]
 8008824:	1c5a      	adds	r2, r3, #1
 8008826:	4613      	mov	r3, r2
 8008828:	009b      	lsls	r3, r3, #2
 800882a:	4413      	add	r3, r2
 800882c:	00db      	lsls	r3, r3, #3
 800882e:	440b      	add	r3, r1
 8008830:	3302      	adds	r3, #2
 8008832:	781b      	ldrb	r3, [r3, #0]
 8008834:	e00b      	b.n	800884e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008836:	78fb      	ldrb	r3, [r7, #3]
 8008838:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800883c:	68f9      	ldr	r1, [r7, #12]
 800883e:	4613      	mov	r3, r2
 8008840:	009b      	lsls	r3, r3, #2
 8008842:	4413      	add	r3, r2
 8008844:	00db      	lsls	r3, r3, #3
 8008846:	440b      	add	r3, r1
 8008848:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800884c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800884e:	4618      	mov	r0, r3
 8008850:	3714      	adds	r7, #20
 8008852:	46bd      	mov	sp, r7
 8008854:	bc80      	pop	{r7}
 8008856:	4770      	bx	lr

08008858 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b084      	sub	sp, #16
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
 8008860:	460b      	mov	r3, r1
 8008862:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008864:	2300      	movs	r3, #0
 8008866:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008868:	2300      	movs	r3, #0
 800886a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008872:	78fa      	ldrb	r2, [r7, #3]
 8008874:	4611      	mov	r1, r2
 8008876:	4618      	mov	r0, r3
 8008878:	f7f8 fdd4 	bl	8001424 <HAL_PCD_SetAddress>
 800887c:	4603      	mov	r3, r0
 800887e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008880:	7bfb      	ldrb	r3, [r7, #15]
 8008882:	4618      	mov	r0, r3
 8008884:	f000 f86e 	bl	8008964 <USBD_Get_USB_Status>
 8008888:	4603      	mov	r3, r0
 800888a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800888c:	7bbb      	ldrb	r3, [r7, #14]
}
 800888e:	4618      	mov	r0, r3
 8008890:	3710      	adds	r7, #16
 8008892:	46bd      	mov	sp, r7
 8008894:	bd80      	pop	{r7, pc}

08008896 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008896:	b580      	push	{r7, lr}
 8008898:	b086      	sub	sp, #24
 800889a:	af00      	add	r7, sp, #0
 800889c:	60f8      	str	r0, [r7, #12]
 800889e:	607a      	str	r2, [r7, #4]
 80088a0:	461a      	mov	r2, r3
 80088a2:	460b      	mov	r3, r1
 80088a4:	72fb      	strb	r3, [r7, #11]
 80088a6:	4613      	mov	r3, r2
 80088a8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088aa:	2300      	movs	r3, #0
 80088ac:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088ae:	2300      	movs	r3, #0
 80088b0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80088b8:	893b      	ldrh	r3, [r7, #8]
 80088ba:	7af9      	ldrb	r1, [r7, #11]
 80088bc:	687a      	ldr	r2, [r7, #4]
 80088be:	f7f8 fec1 	bl	8001644 <HAL_PCD_EP_Transmit>
 80088c2:	4603      	mov	r3, r0
 80088c4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088c6:	7dfb      	ldrb	r3, [r7, #23]
 80088c8:	4618      	mov	r0, r3
 80088ca:	f000 f84b 	bl	8008964 <USBD_Get_USB_Status>
 80088ce:	4603      	mov	r3, r0
 80088d0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80088d2:	7dbb      	ldrb	r3, [r7, #22]
}
 80088d4:	4618      	mov	r0, r3
 80088d6:	3718      	adds	r7, #24
 80088d8:	46bd      	mov	sp, r7
 80088da:	bd80      	pop	{r7, pc}

080088dc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b086      	sub	sp, #24
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	60f8      	str	r0, [r7, #12]
 80088e4:	607a      	str	r2, [r7, #4]
 80088e6:	461a      	mov	r2, r3
 80088e8:	460b      	mov	r3, r1
 80088ea:	72fb      	strb	r3, [r7, #11]
 80088ec:	4613      	mov	r3, r2
 80088ee:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088f0:	2300      	movs	r3, #0
 80088f2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088f4:	2300      	movs	r3, #0
 80088f6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80088fe:	893b      	ldrh	r3, [r7, #8]
 8008900:	7af9      	ldrb	r1, [r7, #11]
 8008902:	687a      	ldr	r2, [r7, #4]
 8008904:	f7f8 fe61 	bl	80015ca <HAL_PCD_EP_Receive>
 8008908:	4603      	mov	r3, r0
 800890a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800890c:	7dfb      	ldrb	r3, [r7, #23]
 800890e:	4618      	mov	r0, r3
 8008910:	f000 f828 	bl	8008964 <USBD_Get_USB_Status>
 8008914:	4603      	mov	r3, r0
 8008916:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008918:	7dbb      	ldrb	r3, [r7, #22]
}
 800891a:	4618      	mov	r0, r3
 800891c:	3718      	adds	r7, #24
 800891e:	46bd      	mov	sp, r7
 8008920:	bd80      	pop	{r7, pc}
	...

08008924 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008924:	b480      	push	{r7}
 8008926:	b083      	sub	sp, #12
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 800892c:	4b02      	ldr	r3, [pc, #8]	; (8008938 <USBD_static_malloc+0x14>)
}
 800892e:	4618      	mov	r0, r3
 8008930:	370c      	adds	r7, #12
 8008932:	46bd      	mov	sp, r7
 8008934:	bc80      	pop	{r7}
 8008936:	4770      	bx	lr
 8008938:	20000130 	.word	0x20000130

0800893c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800893c:	b480      	push	{r7}
 800893e:	b083      	sub	sp, #12
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]

}
 8008944:	bf00      	nop
 8008946:	370c      	adds	r7, #12
 8008948:	46bd      	mov	sp, r7
 800894a:	bc80      	pop	{r7}
 800894c:	4770      	bx	lr

0800894e <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800894e:	b480      	push	{r7}
 8008950:	b083      	sub	sp, #12
 8008952:	af00      	add	r7, sp, #0
 8008954:	6078      	str	r0, [r7, #4]
 8008956:	460b      	mov	r3, r1
 8008958:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800895a:	bf00      	nop
 800895c:	370c      	adds	r7, #12
 800895e:	46bd      	mov	sp, r7
 8008960:	bc80      	pop	{r7}
 8008962:	4770      	bx	lr

08008964 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008964:	b480      	push	{r7}
 8008966:	b085      	sub	sp, #20
 8008968:	af00      	add	r7, sp, #0
 800896a:	4603      	mov	r3, r0
 800896c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800896e:	2300      	movs	r3, #0
 8008970:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008972:	79fb      	ldrb	r3, [r7, #7]
 8008974:	2b03      	cmp	r3, #3
 8008976:	d817      	bhi.n	80089a8 <USBD_Get_USB_Status+0x44>
 8008978:	a201      	add	r2, pc, #4	; (adr r2, 8008980 <USBD_Get_USB_Status+0x1c>)
 800897a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800897e:	bf00      	nop
 8008980:	08008991 	.word	0x08008991
 8008984:	08008997 	.word	0x08008997
 8008988:	0800899d 	.word	0x0800899d
 800898c:	080089a3 	.word	0x080089a3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008990:	2300      	movs	r3, #0
 8008992:	73fb      	strb	r3, [r7, #15]
    break;
 8008994:	e00b      	b.n	80089ae <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008996:	2302      	movs	r3, #2
 8008998:	73fb      	strb	r3, [r7, #15]
    break;
 800899a:	e008      	b.n	80089ae <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800899c:	2301      	movs	r3, #1
 800899e:	73fb      	strb	r3, [r7, #15]
    break;
 80089a0:	e005      	b.n	80089ae <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80089a2:	2302      	movs	r3, #2
 80089a4:	73fb      	strb	r3, [r7, #15]
    break;
 80089a6:	e002      	b.n	80089ae <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80089a8:	2302      	movs	r3, #2
 80089aa:	73fb      	strb	r3, [r7, #15]
    break;
 80089ac:	bf00      	nop
  }
  return usb_status;
 80089ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80089b0:	4618      	mov	r0, r3
 80089b2:	3714      	adds	r7, #20
 80089b4:	46bd      	mov	sp, r7
 80089b6:	bc80      	pop	{r7}
 80089b8:	4770      	bx	lr
 80089ba:	bf00      	nop

080089bc <__libc_init_array>:
 80089bc:	b570      	push	{r4, r5, r6, lr}
 80089be:	2600      	movs	r6, #0
 80089c0:	4d0c      	ldr	r5, [pc, #48]	; (80089f4 <__libc_init_array+0x38>)
 80089c2:	4c0d      	ldr	r4, [pc, #52]	; (80089f8 <__libc_init_array+0x3c>)
 80089c4:	1b64      	subs	r4, r4, r5
 80089c6:	10a4      	asrs	r4, r4, #2
 80089c8:	42a6      	cmp	r6, r4
 80089ca:	d109      	bne.n	80089e0 <__libc_init_array+0x24>
 80089cc:	f000 f822 	bl	8008a14 <_init>
 80089d0:	2600      	movs	r6, #0
 80089d2:	4d0a      	ldr	r5, [pc, #40]	; (80089fc <__libc_init_array+0x40>)
 80089d4:	4c0a      	ldr	r4, [pc, #40]	; (8008a00 <__libc_init_array+0x44>)
 80089d6:	1b64      	subs	r4, r4, r5
 80089d8:	10a4      	asrs	r4, r4, #2
 80089da:	42a6      	cmp	r6, r4
 80089dc:	d105      	bne.n	80089ea <__libc_init_array+0x2e>
 80089de:	bd70      	pop	{r4, r5, r6, pc}
 80089e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80089e4:	4798      	blx	r3
 80089e6:	3601      	adds	r6, #1
 80089e8:	e7ee      	b.n	80089c8 <__libc_init_array+0xc>
 80089ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80089ee:	4798      	blx	r3
 80089f0:	3601      	adds	r6, #1
 80089f2:	e7f2      	b.n	80089da <__libc_init_array+0x1e>
 80089f4:	08008aac 	.word	0x08008aac
 80089f8:	08008aac 	.word	0x08008aac
 80089fc:	08008aac 	.word	0x08008aac
 8008a00:	08008ab0 	.word	0x08008ab0

08008a04 <memset>:
 8008a04:	4603      	mov	r3, r0
 8008a06:	4402      	add	r2, r0
 8008a08:	4293      	cmp	r3, r2
 8008a0a:	d100      	bne.n	8008a0e <memset+0xa>
 8008a0c:	4770      	bx	lr
 8008a0e:	f803 1b01 	strb.w	r1, [r3], #1
 8008a12:	e7f9      	b.n	8008a08 <memset+0x4>

08008a14 <_init>:
 8008a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a16:	bf00      	nop
 8008a18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a1a:	bc08      	pop	{r3}
 8008a1c:	469e      	mov	lr, r3
 8008a1e:	4770      	bx	lr

08008a20 <_fini>:
 8008a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a22:	bf00      	nop
 8008a24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a26:	bc08      	pop	{r3}
 8008a28:	469e      	mov	lr, r3
 8008a2a:	4770      	bx	lr
